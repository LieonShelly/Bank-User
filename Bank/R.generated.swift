//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    
    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 365 images.
  struct image {
    /// Image `ad_icon_shop`.
    static let ad_icon_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad_icon_shop")
    /// Image `ad_pic`.
    static let ad_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "ad_pic")
    /// Image `animation_01`.
    static let animation_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "animation_01")
    /// Image `animation_02`.
    static let animation_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "animation_02")
    /// Image `animation_03`.
    static let animation_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "animation_03")
    /// Image `animation_04`.
    static let animation_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "animation_04")
    /// Image `bank_arrow_more`.
    static let bank_arrow_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_arrow_more")
    /// Image `bank_btn_branch`.
    static let bank_btn_branch = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_btn_branch")
    /// Image `bank_check`.
    static let bank_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_check")
    /// Image `bank_ic_add2`.
    static let bank_ic_add2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_ic_add2")
    /// Image `bank_ic_add`.
    static let bank_ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_ic_add")
    /// Image `bank_ico_bank`.
    static let bank_ico_bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_ico_bank")
    /// Image `banner_user`.
    static let banner_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_user")
    /// Image `banner_yours`.
    static let banner_yours = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_yours")
    /// Image `bg_1`.
    static let bg_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_1")
    /// Image `bg_2`.
    static let bg_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_2")
    /// Image `bottom_logo`.
    static let bottom_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_logo")
    /// Image `btn_1`.
    static let btn_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_1")
    /// Image `btn_acceptance`.
    static let btn_acceptance = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_acceptance")
    /// Image `btn_accounts_b`.
    static let btn_accounts_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_accounts_b")
    /// Image `btn_activity1`.
    static let btn_activity1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_activity1")
    /// Image `btn_activity`.
    static let btn_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_activity")
    /// Image `btn_add_a_bank_card`.
    static let btn_add_a_bank_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_a_bank_card")
    /// Image `btn_add_bank`.
    static let btn_add_bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add_bank")
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_all_orders`.
    static let btn_all_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_all_orders")
    /// Image `btn_already_collect`.
    static let btn_already_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_already_collect")
    /// Image `btn_already_collected`.
    static let btn_already_collected = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_already_collected")
    /// Image `btn_announce`.
    static let btn_announce = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_announce")
    /// Image `btn_arrow_tiket`.
    static let btn_arrow_tiket = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_arrow_tiket")
    /// Image `btn_avatar_default`.
    static let btn_avatar_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_avatar_default")
    /// Image `btn_bankcard_x`.
    static let btn_bankcard_x = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_bankcard_x")
    /// Image `btn_bankcard_y`.
    static let btn_bankcard_y = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_bankcard_y")
    /// Image `btn_bg1_ public`.
    static let btn_bg1_Public = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_bg1_ public")
    /// Image `btn_bg_ public`.
    static let btn_bg_Public = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_bg_ public")
    /// Image `btn_bg`.
    static let btn_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_bg")
    /// Image `btn_black_left`.
    static let btn_black_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_black_left")
    /// Image `btn_button_bg`.
    static let btn_button_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_button_bg")
    /// Image `btn_calendar1`.
    static let btn_calendar1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_calendar1")
    /// Image `btn_calendar2`.
    static let btn_calendar2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_calendar2")
    /// Image `btn_calendar`.
    static let btn_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_calendar")
    /// Image `btn_call_h`.
    static let btn_call_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call_h")
    /// Image `btn_call`.
    static let btn_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_call")
    /// Image `btn_cancel`.
    static let btn_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_cancel")
    /// Image `btn_check1`.
    static let btn_check1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_check1")
    /// Image `btn_choice_no`.
    static let btn_choice_no = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_choice_no")
    /// Image `btn_choice_yes_1`.
    static let btn_choice_yes_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_choice_yes_1")
    /// Image `btn_choice_yes`.
    static let btn_choice_yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_choice_yes")
    /// Image `btn_close`.
    static let btn_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_close")
    /// Image `btn_contact`.
    static let btn_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_contact")
    /// Image `btn_credit`.
    static let btn_credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_credit")
    /// Image `btn_customer_service2`.
    static let btn_customer_service2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_customer_service2")
    /// Image `btn_delete1`.
    static let btn_delete1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_delete1")
    /// Image `btn_delete`.
    static let btn_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_delete")
    /// Image `btn_golden_eggs`.
    static let btn_golden_eggs = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_golden_eggs")
    /// Image `btn_hammer`.
    static let btn_hammer = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_hammer")
    /// Image `btn_help1`.
    static let btn_help1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_help1")
    /// Image `btn_help`.
    static let btn_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_help")
    /// Image `btn_left_arrow`.
    static let btn_left_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_left_arrow")
    /// Image `btn_left`.
    static let btn_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_left")
    /// Image `btn_link`.
    static let btn_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_link")
    /// Image `btn_location`.
    static let btn_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_location")
    /// Image `btn_more`.
    static let btn_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more")
    /// Image `btn_my_life`.
    static let btn_my_life = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_my_life")
    /// Image `btn_my_reward`.
    static let btn_my_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_my_reward")
    /// Image `btn_my_task`.
    static let btn_my_task = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_my_task")
    /// Image `btn_navigation_h`.
    static let btn_navigation_h = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_navigation_h")
    /// Image `btn_navigation`.
    static let btn_navigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_navigation")
    /// Image `btn_news_on`.
    static let btn_news_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_news_on")
    /// Image `btn_news`.
    static let btn_news = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_news")
    /// Image `btn_next`.
    static let btn_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_next")
    /// Image `btn_noneEvent`.
    static let btn_noneEvent = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_noneEvent")
    /// Image `btn_noneTask`.
    static let btn_noneTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_noneTask")
    /// Image `btn_none_order`.
    static let btn_none_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_none_order")
    /// Image `btn_open`.
    static let btn_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_open")
    /// Image `btn_pending_payment`.
    static let btn_pending_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_pending_payment")
    /// Image `btn_people`.
    static let btn_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_people")
    /// Image `btn_personal_stores`.
    static let btn_personal_stores = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_personal_stores")
    /// Image `btn_phone1`.
    static let btn_phone1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_phone1")
    /// Image `btn_pick_image`.
    static let btn_pick_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_pick_image")
    /// Image `btn_play`.
    static let btn_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_play")
    /// Image `btn_prize_pool`.
    static let btn_prize_pool = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_prize_pool")
    /// Image `btn_prize`.
    static let btn_prize = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_prize")
    /// Image `btn_profession`.
    static let btn_profession = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_profession")
    /// Image `btn_qr`.
    static let btn_qr = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_qr")
    /// Image `btn_ranking_List`.
    static let btn_ranking_List = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_ranking_List")
    /// Image `btn_receipt_of_goods`.
    static let btn_receipt_of_goods = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_receipt_of_goods")
    /// Image `btn_refresh`.
    static let btn_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_refresh")
    /// Image `btn_scan_code_payment`.
    static let btn_scan_code_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_scan_code_payment")
    /// Image `btn_search`.
    static let btn_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_search")
    /// Image `btn_service`.
    static let btn_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_service")
    /// Image `btn_share`.
    static let btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_share")
    /// Image `btn_the_custom`.
    static let btn_the_custom = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_the_custom")
    /// Image `btn_to_be_refunded`.
    static let btn_to_be_refunded = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_to_be_refunded")
    /// Image `btn_to_be_shipped`.
    static let btn_to_be_shipped = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_to_be_shipped")
    /// Image `btn_unbind`.
    static let btn_unbind = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_unbind")
    /// Image `btn_use_yes`.
    static let btn_use_yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_use_yes")
    /// Image `btn_validation1`.
    static let btn_validation1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_validation1")
    /// Image `btn_validation`.
    static let btn_validation = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_validation")
    /// Image `bubble_ingoing`.
    static let bubble_ingoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble_ingoing")
    /// Image `bubble_outgoing`.
    static let bubble_outgoing = Rswift.ImageResource(bundle: R.hostingBundle, name: "bubble_outgoing")
    /// Image `center-myOrder_addressManagement_btn_location`.
    static let centerMyOrder_addressManagement_btn_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "center-myOrder_addressManagement_btn_location")
    /// Image `center_aboutUs_btn_friend`.
    static let center_aboutUs_btn_friend = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_aboutUs_btn_friend")
    /// Image `center_aboutUs_btn_qq`.
    static let center_aboutUs_btn_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_aboutUs_btn_qq")
    /// Image `center_aboutUs_btn_wechat`.
    static let center_aboutUs_btn_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_aboutUs_btn_wechat")
    /// Image `center_aboutUs_logo_us`.
    static let center_aboutUs_logo_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_aboutUs_logo_us")
    /// Image `center_aboutUs_update`.
    static let center_aboutUs_update = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_aboutUs_update")
    /// Image `center_address_btn_add`.
    static let center_address_btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_address_btn_add")
    /// Image `center_address_pic_add_1`.
    static let center_address_pic_add_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_address_pic_add_1")
    /// Image `center_address_pic_add_plus`.
    static let center_address_pic_add_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_address_pic_add_plus")
    /// Image `center_address_pic_add_word`.
    static let center_address_pic_add_word = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_address_pic_add_word")
    /// Image `center_banner_g`.
    static let center_banner_g = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_g")
    /// Image `center_banner_order2`.
    static let center_banner_order2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order2")
    /// Image `center_banner_order3`.
    static let center_banner_order3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order3")
    /// Image `center_banner_order4`.
    static let center_banner_order4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order4")
    /// Image `center_banner_order5`.
    static let center_banner_order5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order5")
    /// Image `center_banner_order6`.
    static let center_banner_order6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order6")
    /// Image `center_banner_order7`.
    static let center_banner_order7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_banner_order7")
    /// Image `center_feedback_add_pic`.
    static let center_feedback_add_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_feedback_add_pic")
    /// Image `center_modifyAddressbtn_default_on`.
    static let center_modifyAddressbtn_default_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_modifyAddressbtn_default_on")
    /// Image `center_myMember_addMember_banner_members`.
    static let center_myMember_addMember_banner_members = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_myMember_addMember_banner_members")
    /// Image `center_myMember_addresslist`.
    static let center_myMember_addresslist = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_myMember_addresslist")
    /// Image `center_myMember_banner_members`.
    static let center_myMember_banner_members = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_myMember_banner_members")
    /// Image `center_myReservation_icon_drawmoney`.
    static let center_myReservation_icon_drawmoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_myReservation_icon_drawmoney")
    /// Image `center_myReservation_icon_loan`.
    static let center_myReservation_icon_loan = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_myReservation_icon_loan")
    /// Image `center_orderDetails_icon_logistics_01`.
    static let center_orderDetails_icon_logistics_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_orderDetails_icon_logistics_01")
    /// Image `center_orderDetails_icon_site`.
    static let center_orderDetails_icon_site = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_orderDetails_icon_site")
    /// Image `center_order_btn_go`.
    static let center_order_btn_go = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_order_btn_go")
    /// Image `center_order_ico_shop`.
    static let center_order_ico_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_order_ico_shop")
    /// Image `center_order_pic_order_words`.
    static let center_order_pic_order_words = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_order_pic_order_words")
    /// Image `center_passerror_btn`.
    static let center_passerror_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_passerror_btn")
    /// Image `center_passerror_pic`.
    static let center_passerror_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_passerror_pic")
    /// Image `center_passerror_word`.
    static let center_passerror_word = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_passerror_word")
    /// Image `center_shoppingCart_btn_minus`.
    static let center_shoppingCart_btn_minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_shoppingCart_btn_minus")
    /// Image `center_shoppingCart_btn_plus`.
    static let center_shoppingCart_btn_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_shoppingCart_btn_plus")
    /// Image `center_shoppingcart_icon_collection`.
    static let center_shoppingcart_icon_collection = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_shoppingcart_icon_collection")
    /// Image `center_shoppingcart_icon_delete`.
    static let center_shoppingcart_icon_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "center_shoppingcart_icon_delete")
    /// Image `chat_line`.
    static let chat_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_line")
    /// Image `chat_plaint`.
    static let chat_plaint = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_plaint")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `clerk_bg`.
    static let clerk_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "clerk_bg")
    /// Image `cneter_order_pic_order`.
    static let cneter_order_pic_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "cneter_order_pic_order")
    /// Image `coordinate_me`.
    static let coordinate_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "coordinate_me")
    /// Image `coordinate_on_01`.
    static let coordinate_on_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "coordinate_on_01")
    /// Image `coordinate_on_02`.
    static let coordinate_on_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "coordinate_on_02")
    /// Image `event_btn_delete`.
    static let event_btn_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "event_btn_delete")
    /// Image `guide_1`.
    static let guide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_1")
    /// Image `guide_2`.
    static let guide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_2")
    /// Image `guide_3`.
    static let guide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_3")
    /// Image `guide_4`.
    static let guide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_4")
    /// Image `guide_5`.
    static let guide_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_5")
    /// Image `head_default`.
    static let head_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "head_default")
    /// Image `ic_list_call`.
    static let ic_list_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_call")
    /// Image `ic_verify_id`.
    static let ic_verify_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verify_id")
    /// Image `ic_verify_name`.
    static let ic_verify_name = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_verify_name")
    /// Image `ico_address_center`.
    static let ico_address_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_address_center")
    /// Image `ico_code1`.
    static let ico_code1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_code1")
    /// Image `ico_edit`.
    static let ico_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_edit")
    /// Image `ico_logo_shop`.
    static let ico_logo_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_logo_shop")
    /// Image `ico_shop`.
    static let ico_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_shop")
    /// Image `ico_stars_g`.
    static let ico_stars_g = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_stars_g")
    /// Image `ico_stars_o`.
    static let ico_stars_o = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_stars_o")
    /// Image `ico_tbuying`.
    static let ico_tbuying = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_tbuying")
    /// Image `ico_tiket`.
    static let ico_tiket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_tiket")
    /// Image `icon_action`.
    static let icon_action = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_action")
    /// Image `icon_announce_new`.
    static let icon_announce_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_announce_new")
    /// Image `icon_apply`.
    static let icon_apply = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_apply")
    /// Image `icon_bank`.
    static let icon_bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bank")
    /// Image `icon_bg-1`.
    static let icon_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg-1")
    /// Image `icon_bg11`.
    static let icon_bg11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg11")
    /// Image `icon_bg_null`.
    static let icon_bg_null = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg_null")
    /// Image `icon_bg_outDate`.
    static let icon_bg_outDate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg_outDate")
    /// Image `icon_bg`.
    static let icon_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg")
    /// Image `icon_blank_card_word`.
    static let icon_blank_card_word = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_blank_card_word")
    /// Image `icon_blank_card`.
    static let icon_blank_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_blank_card")
    /// Image `icon_card`.
    static let icon_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_card")
    /// Image `icon_carousel`.
    static let icon_carousel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_carousel")
    /// Image `icon_cloud_shield`.
    static let icon_cloud_shield = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cloud_shield")
    /// Image `icon_code1`.
    static let icon_code1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_code1")
    /// Image `icon_code`.
    static let icon_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_code")
    /// Image `icon_collection`.
    static let icon_collection = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_collection")
    /// Image `icon_contributepoint`.
    static let icon_contributepoint = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contributepoint")
    /// Image `icon_credit`.
    static let icon_credit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_credit")
    /// Image `icon_cry1`.
    static let icon_cry1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cry1")
    /// Image `icon_cry9`.
    static let icon_cry9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cry9")
    /// Image `icon_cry`.
    static let icon_cry = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cry")
    /// Image `icon_discount_bg1`.
    static let icon_discount_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_discount_bg1")
    /// Image `icon_drop_down`.
    static let icon_drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_drop_down")
    /// Image `icon_expired`.
    static let icon_expired = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_expired")
    /// Image `icon_finger`.
    static let icon_finger = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_finger")
    /// Image `icon_font`.
    static let icon_font = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_font")
    /// Image `icon_has_accepted`.
    static let icon_has_accepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_has_accepted")
    /// Image `icon_has_been_hit-1`.
    static let icon_has_been_hit1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_has_been_hit-1")
    /// Image `icon_has_been_hit`.
    static let icon_has_been_hit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_has_been_hit")
    /// Image `icon_help01`.
    static let icon_help01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_help01")
    /// Image `icon_home_time`.
    static let icon_home_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_time")
    /// Image `icon_in_loading`.
    static let icon_in_loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_in_loading")
    /// Image `icon_indent`.
    static let icon_indent = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_indent")
    /// Image `icon_integral`.
    static let icon_integral = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_integral")
    /// Image `icon_join`.
    static let icon_join = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_join")
    /// Image `icon_kite`.
    static let icon_kite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_kite")
    /// Image `icon_load_failure`.
    static let icon_load_failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_load_failure")
    /// Image `icon_load_success`.
    static let icon_load_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_load_success")
    /// Image `icon_logo`.
    static let icon_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo")
    /// Image `icon_logout`.
    static let icon_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logout")
    /// Image `icon_mccb_logo`.
    static let icon_mccb_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mccb_logo")
    /// Image `icon_member`.
    static let icon_member = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member")
    /// Image `icon_more`.
    static let icon_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more")
    /// Image `icon_myActivity`.
    static let icon_myActivity = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_myActivity")
    /// Image `icon_no.1`.
    static let icon_no1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no.1")
    /// Image `icon_no.2`.
    static let icon_no2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no.2")
    /// Image `icon_no.3`.
    static let icon_no3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no.3")
    /// Image `icon_no_commodity`.
    static let icon_no_commodity = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no_commodity")
    /// Image `icon_no_shop_assistant`.
    static let icon_no_shop_assistant = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no_shop_assistant")
    /// Image `icon_noneEvent`.
    static let icon_noneEvent = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_noneEvent")
    /// Image `icon_ok1`.
    static let icon_ok1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ok1")
    /// Image `icon_ok2`.
    static let icon_ok2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ok2")
    /// Image `icon_ok3`.
    static let icon_ok3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ok3")
    /// Image `icon_ok`.
    static let icon_ok = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ok")
    /// Image `icon_password_a`.
    static let icon_password_a = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_password_a")
    /// Image `icon_password`.
    static let icon_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_password")
    /// Image `icon_passwordsure`.
    static let icon_passwordsure = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_passwordsure")
    /// Image `icon_people4`.
    static let icon_people4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_people4")
    /// Image `icon_people`.
    static let icon_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_people")
    /// Image `icon_play`.
    static let icon_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play")
    /// Image `icon_preferential_pay`.
    static let icon_preferential_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_preferential_pay")
    /// Image `icon_prize`.
    static let icon_prize = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_prize")
    /// Image `icon_pull`.
    static let icon_pull = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pull")
    /// Image `icon_record1`.
    static let icon_record1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_record1")
    /// Image `icon_record_pic`.
    static let icon_record_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_record_pic")
    /// Image `icon_record_word`.
    static let icon_record_word = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_record_word")
    /// Image `icon_red`.
    static let icon_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_red")
    /// Image `icon_refund_fail02`.
    static let icon_refund_fail02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_refund_fail02")
    /// Image `icon_refund_fail`.
    static let icon_refund_fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_refund_fail")
    /// Image `icon_refund`.
    static let icon_refund = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_refund")
    /// Image `icon_role`.
    static let icon_role = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_role")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_shoppingcart`.
    static let icon_shoppingcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_shoppingcart")
    /// Image `icon_spot1`.
    static let icon_spot1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot1")
    /// Image `icon_spot`.
    static let icon_spot = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_spot")
    /// Image `icon_star_off`.
    static let icon_star_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_star_off")
    /// Image `icon_star_on`.
    static let icon_star_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_star_on")
    /// Image `icon_success`.
    static let icon_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_success")
    /// Image `icon_sweep`.
    static let icon_sweep = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sweep")
    /// Image `icon_thank`.
    static let icon_thank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_thank")
    /// Image `icon_time1`.
    static let icon_time1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time1")
    /// Image `icon_time2`.
    static let icon_time2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time2")
    /// Image `icon_time3`.
    static let icon_time3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time3")
    /// Image `icon_time4`.
    static let icon_time4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time4")
    /// Image `icon_to_examine`.
    static let icon_to_examine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_to_examine")
    /// Image `icon_to_update`.
    static let icon_to_update = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_to_update")
    /// Image `icon_user`.
    static let icon_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_user")
    /// Image `icon_voice`.
    static let icon_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_voice")
    /// Image `icon_whole`.
    static let icon_whole = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whole")
    /// Image `image_default_large`.
    static let image_default_large = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_default_large")
    /// Image `image_default_midden`.
    static let image_default_midden = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_default_midden")
    /// Image `image_default_small`.
    static let image_default_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_default_small")
    /// Image `image_default`.
    static let image_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "image_default")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout_pic`.
    static let logout_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout_pic")
    /// Image `lottery_bg_4`.
    static let lottery_bg_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_bg_4")
    /// Image `lottery_btn_back`.
    static let lottery_btn_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_btn_back")
    /// Image `lottery_btn_more`.
    static let lottery_btn_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_btn_more")
    /// Image `lottery_btn_share1`.
    static let lottery_btn_share1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_btn_share1")
    /// Image `lottery_btn_share3`.
    static let lottery_btn_share3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_btn_share3")
    /// Image `lottery_btn_share`.
    static let lottery_btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "lottery_btn_share")
    /// Image `mallHome_checkin_bg`.
    static let mallHome_checkin_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mallHome_checkin_bg")
    /// Image `mallHome_checkin_btn_delete`.
    static let mallHome_checkin_btn_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "mallHome_checkin_btn_delete")
    /// Image `mallHome_checkin_success`.
    static let mallHome_checkin_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "mallHome_checkin_success")
    /// Image `mall_back_to_top`.
    static let mall_back_to_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_back_to_top")
    /// Image `mall_brandZone_btn_menu_more`.
    static let mall_brandZone_btn_menu_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_btn_menu_more")
    /// Image `mall_brandZone_btn_more_menu`.
    static let mall_brandZone_btn_more_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_btn_more_menu")
    /// Image `mall_brandZone_btn_shop_call`.
    static let mall_brandZone_btn_shop_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_btn_shop_call")
    /// Image `mall_brandZone_ic_arraw_left`.
    static let mall_brandZone_ic_arraw_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_ic_arraw_left")
    /// Image `mall_brandZone_ic_shop_arrow`.
    static let mall_brandZone_ic_shop_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_ic_shop_arrow")
    /// Image `mall_brandZone_ic_shop_info`.
    static let mall_brandZone_ic_shop_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_ic_shop_info")
    /// Image `mall_brandZone_ico_search`.
    static let mall_brandZone_ico_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_ico_search")
    /// Image `mall_brandZone_icon_call_menu`.
    static let mall_brandZone_icon_call_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_call_menu")
    /// Image `mall_brandZone_icon_share_menu`.
    static let mall_brandZone_icon_share_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_share_menu")
    /// Image `mall_brandZone_icon_shop_address`.
    static let mall_brandZone_icon_shop_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_shop_address")
    /// Image `mall_brandZone_icon_shop_detail`.
    static let mall_brandZone_icon_shop_detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_shop_detail")
    /// Image `mall_brandZone_icon_shop_realname`.
    static let mall_brandZone_icon_shop_realname = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_shop_realname")
    /// Image `mall_brandZone_icon_thehot`.
    static let mall_brandZone_icon_thehot = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_icon_thehot")
    /// Image `mall_brandZone_pic_banner_shop`.
    static let mall_brandZone_pic_banner_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_brandZone_pic_banner_shop")
    /// Image `mall_btn_choice`.
    static let mall_btn_choice = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_btn_choice")
    /// Image `mall_btn_integrate_cart`.
    static let mall_btn_integrate_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_btn_integrate_cart")
    /// Image `mall_btn_jfb`.
    static let mall_btn_jfb = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_btn_jfb")
    /// Image `mall_btn_sign_in`.
    static let mall_btn_sign_in = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_btn_sign_in")
    /// Image `mall_goodslist_btn_more_down`.
    static let mall_goodslist_btn_more_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_goodslist_btn_more_down")
    /// Image `mall_goodslist_btn_more_up`.
    static let mall_goodslist_btn_more_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_goodslist_btn_more_up")
    /// Image `mall_goodslist_ic_option_all`.
    static let mall_goodslist_ic_option_all = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_goodslist_ic_option_all")
    /// Image `mall_goodslist_ic_option_select`.
    static let mall_goodslist_ic_option_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_goodslist_ic_option_select")
    /// Image `mall_ic_goods_shop`.
    static let mall_ic_goods_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_ic_goods_shop")
    /// Image `mall_ic_shoppingcart`.
    static let mall_ic_shoppingcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_ic_shoppingcart")
    /// Image `mall_icon_hot`.
    static let mall_icon_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_icon_hot")
    /// Image `mall_icon_no1`.
    static let mall_icon_no1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_icon_no1")
    /// Image `mall_integral_activity01`.
    static let mall_integral_activity01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity01")
    /// Image `mall_integral_activity02`.
    static let mall_integral_activity02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity02")
    /// Image `mall_integral_activity03`.
    static let mall_integral_activity03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity03")
    /// Image `mall_integral_activity05`.
    static let mall_integral_activity05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity05")
    /// Image `mall_integral_activity06`.
    static let mall_integral_activity06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity06")
    /// Image `mall_integral_activity07`.
    static let mall_integral_activity07 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_activity07")
    /// Image `mall_integral_btn_banner1`.
    static let mall_integral_btn_banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_btn_banner1")
    /// Image `mall_integral_btn_banner2`.
    static let mall_integral_btn_banner2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_btn_banner2")
    /// Image `mall_integral_btn_banner3`.
    static let mall_integral_btn_banner3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_btn_banner3")
    /// Image `mall_integral_icon_point`.
    static let mall_integral_icon_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_integral_icon_point")
    /// Image `mall_offlineEvent_arrow_more`.
    static let mall_offlineEvent_arrow_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_offlineEvent_arrow_more")
    /// Image `mall_offlineEvent_bg_people`.
    static let mall_offlineEvent_bg_people = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_offlineEvent_bg_people")
    /// Image `mall_offlineEvent_font_1`.
    static let mall_offlineEvent_font_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_offlineEvent_font_1")
    /// Image `mall_offlineEvent_icon_cannot_view`.
    static let mall_offlineEvent_icon_cannot_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_offlineEvent_icon_cannot_view")
    /// Image `mall_task_bg_detail`.
    static let mall_task_bg_detail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_task_bg_detail")
    /// Image `mall_task_icon_coupon`.
    static let mall_task_icon_coupon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_task_icon_coupon")
    /// Image `mall_task_terminaltime`.
    static let mall_task_terminaltime = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_task_terminaltime")
    /// Image `menu_order`.
    static let menu_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_order")
    /// Image `message_bg`.
    static let message_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_bg")
    /// Image `msh_logo_s`.
    static let msh_logo_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "msh_logo_s")
    /// Image `mycollection_icon_product1`.
    static let mycollection_icon_product1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mycollection_icon_product1")
    /// Image `mycollection_icon_product`.
    static let mycollection_icon_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "mycollection_icon_product")
    /// Image `noneCollection_word_pic`.
    static let noneCollection_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneCollection_word_pic")
    /// Image `noneCoupon_btn`.
    static let noneCoupon_btn = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneCoupon_btn")
    /// Image `noneCoupon_pic`.
    static let noneCoupon_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneCoupon_pic")
    /// Image `noneDiscount_word_pic`.
    static let noneDiscount_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneDiscount_word_pic")
    /// Image `nonePrize_word_pic`.
    static let nonePrize_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "nonePrize_word_pic")
    /// Image `noneTask_word_pic`.
    static let noneTask_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneTask_word_pic")
    /// Image `noneUncomplete_word_pic`.
    static let noneUncomplete_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneUncomplete_word_pic")
    /// Image `nonecomplete_word_pic`.
    static let nonecomplete_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "nonecomplete_word_pic")
    /// Image `nonedata_image_pic`.
    static let nonedata_image_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "nonedata_image_pic")
    /// Image `noneorder_word_pic`.
    static let noneorder_word_pic = Rswift.ImageResource(bundle: R.hostingBundle, name: "noneorder_word_pic")
    /// Image `pass_input_box`.
    static let pass_input_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_input_box")
    /// Image `pic_bg_news1`.
    static let pic_bg_news1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_bg_news1")
    /// Image `pic_bg_news`.
    static let pic_bg_news = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_bg_news")
    /// Image `pic_goods_out`.
    static let pic_goods_out = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_goods_out")
    /// Image `pic_goods_words`.
    static let pic_goods_words = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_goods_words")
    /// Image `pic_invalid`.
    static let pic_invalid = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_invalid")
    /// Image `pic_lose`.
    static let pic_lose = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_lose")
    /// Image `pic_message_word`.
    static let pic_message_word = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_message_word")
    /// Image `pic_message`.
    static let pic_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_message")
    /// Image `pic_nail`.
    static let pic_nail = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_nail")
    /// Image `pic_noone`.
    static let pic_noone = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_noone")
    /// Image `pic_postmark01`.
    static let pic_postmark01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_postmark01")
    /// Image `pic_postmark02`.
    static let pic_postmark02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_postmark02")
    /// Image `pic_postmark`.
    static let pic_postmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_postmark")
    /// Image `pic_qr_bg`.
    static let pic_qr_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_qr_bg")
    /// Image `pic_words`.
    static let pic_words = Rswift.ImageResource(bundle: R.hostingBundle, name: "pic_words")
    /// Image `qa_cart`.
    static let qa_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa_cart")
    /// Image `qa_coupon`.
    static let qa_coupon = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa_coupon")
    /// Image `qa_point`.
    static let qa_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa_point")
    /// Image `qa_scan`.
    static let qa_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "qa_scan")
    /// Image `qrcode`.
    static let qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrcode")
    /// Image `quickMenu`.
    static let quickMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "quickMenu")
    /// Image `radio_normal`.
    static let radio_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_normal")
    /// Image `radio_selected`.
    static let radio_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_selected")
    /// Image `startpage`.
    static let startpage = Rswift.ImageResource(bundle: R.hostingBundle, name: "startpage")
    /// Image `tab_01_off`.
    static let tab_01_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_01_off")
    /// Image `tab_01_on`.
    static let tab_01_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_01_on")
    /// Image `tab_02_off`.
    static let tab_02_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_02_off")
    /// Image `tab_02_on`.
    static let tab_02_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_02_on")
    /// Image `tab_03_off`.
    static let tab_03_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_03_off")
    /// Image `tab_03_on`.
    static let tab_03_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_03_on")
    /// Image `tab_04_off`.
    static let tab_04_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_04_off")
    /// Image `tab_04_on`.
    static let tab_04_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_04_on")
    /// Image `tag_frame`.
    static let tag_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "tag_frame")
    /// Image `trans_diff`.
    static let trans_diff = Rswift.ImageResource(bundle: R.hostingBundle, name: "trans_diff")
    /// Image `trans_same`.
    static let trans_same = Rswift.ImageResource(bundle: R.hostingBundle, name: "trans_same")
    /// Image `word_goods`.
    static let word_goods = Rswift.ImageResource(bundle: R.hostingBundle, name: "word_goods")
    
    /// `UIImage(named: "ad_icon_shop", bundle: ..., traitCollection: ...)`
    static func ad_icon_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_icon_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ad_pic", bundle: ..., traitCollection: ...)`
    static func ad_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ad_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "animation_01", bundle: ..., traitCollection: ...)`
    static func animation_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animation_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "animation_02", bundle: ..., traitCollection: ...)`
    static func animation_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animation_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "animation_03", bundle: ..., traitCollection: ...)`
    static func animation_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animation_03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "animation_04", bundle: ..., traitCollection: ...)`
    static func animation_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.animation_04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_arrow_more", bundle: ..., traitCollection: ...)`
    static func bank_arrow_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_arrow_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_btn_branch", bundle: ..., traitCollection: ...)`
    static func bank_btn_branch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_btn_branch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_check", bundle: ..., traitCollection: ...)`
    static func bank_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_ic_add", bundle: ..., traitCollection: ...)`
    static func bank_ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_ic_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_ic_add2", bundle: ..., traitCollection: ...)`
    static func bank_ic_add2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_ic_add2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank_ico_bank", bundle: ..., traitCollection: ...)`
    static func bank_ico_bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_ico_bank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "banner_user", bundle: ..., traitCollection: ...)`
    static func banner_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "banner_yours", bundle: ..., traitCollection: ...)`
    static func banner_yours(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_yours, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_1", bundle: ..., traitCollection: ...)`
    static func bg_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_2", bundle: ..., traitCollection: ...)`
    static func bg_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_logo", bundle: ..., traitCollection: ...)`
    static func bottom_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_1", bundle: ..., traitCollection: ...)`
    static func btn_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_acceptance", bundle: ..., traitCollection: ...)`
    static func btn_acceptance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_acceptance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_accounts_b", bundle: ..., traitCollection: ...)`
    static func btn_accounts_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_accounts_b, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_activity", bundle: ..., traitCollection: ...)`
    static func btn_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_activity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_activity1", bundle: ..., traitCollection: ...)`
    static func btn_activity1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_activity1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add_a_bank_card", bundle: ..., traitCollection: ...)`
    static func btn_add_a_bank_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_a_bank_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add_bank", bundle: ..., traitCollection: ...)`
    static func btn_add_bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add_bank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_all_orders", bundle: ..., traitCollection: ...)`
    static func btn_all_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_all_orders, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_already_collect", bundle: ..., traitCollection: ...)`
    static func btn_already_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_already_collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_already_collected", bundle: ..., traitCollection: ...)`
    static func btn_already_collected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_already_collected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_announce", bundle: ..., traitCollection: ...)`
    static func btn_announce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_announce, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_arrow_tiket", bundle: ..., traitCollection: ...)`
    static func btn_arrow_tiket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_arrow_tiket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_avatar_default", bundle: ..., traitCollection: ...)`
    static func btn_avatar_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_avatar_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_bankcard_x", bundle: ..., traitCollection: ...)`
    static func btn_bankcard_x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_bankcard_x, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_bankcard_y", bundle: ..., traitCollection: ...)`
    static func btn_bankcard_y(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_bankcard_y, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_bg", bundle: ..., traitCollection: ...)`
    static func btn_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_bg1_ public", bundle: ..., traitCollection: ...)`
    static func btn_bg1_Public(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_bg1_Public, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_bg_ public", bundle: ..., traitCollection: ...)`
    static func btn_bg_Public(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_bg_Public, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_black_left", bundle: ..., traitCollection: ...)`
    static func btn_black_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_black_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_button_bg", bundle: ..., traitCollection: ...)`
    static func btn_button_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_button_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_calendar", bundle: ..., traitCollection: ...)`
    static func btn_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_calendar1", bundle: ..., traitCollection: ...)`
    static func btn_calendar1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_calendar1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_calendar2", bundle: ..., traitCollection: ...)`
    static func btn_calendar2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_calendar2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call", bundle: ..., traitCollection: ...)`
    static func btn_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_call_h", bundle: ..., traitCollection: ...)`
    static func btn_call_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_call_h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_cancel", bundle: ..., traitCollection: ...)`
    static func btn_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_check1", bundle: ..., traitCollection: ...)`
    static func btn_check1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_check1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_choice_no", bundle: ..., traitCollection: ...)`
    static func btn_choice_no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_choice_no, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_choice_yes", bundle: ..., traitCollection: ...)`
    static func btn_choice_yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_choice_yes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_choice_yes_1", bundle: ..., traitCollection: ...)`
    static func btn_choice_yes_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_choice_yes_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_close", bundle: ..., traitCollection: ...)`
    static func btn_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_contact", bundle: ..., traitCollection: ...)`
    static func btn_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_credit", bundle: ..., traitCollection: ...)`
    static func btn_credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_credit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_customer_service2", bundle: ..., traitCollection: ...)`
    static func btn_customer_service2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_customer_service2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete", bundle: ..., traitCollection: ...)`
    static func btn_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete1", bundle: ..., traitCollection: ...)`
    static func btn_delete1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_delete1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_golden_eggs", bundle: ..., traitCollection: ...)`
    static func btn_golden_eggs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_golden_eggs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_hammer", bundle: ..., traitCollection: ...)`
    static func btn_hammer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_hammer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_help", bundle: ..., traitCollection: ...)`
    static func btn_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_help1", bundle: ..., traitCollection: ...)`
    static func btn_help1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_help1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_left", bundle: ..., traitCollection: ...)`
    static func btn_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_left_arrow", bundle: ..., traitCollection: ...)`
    static func btn_left_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_left_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_link", bundle: ..., traitCollection: ...)`
    static func btn_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_location", bundle: ..., traitCollection: ...)`
    static func btn_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_more", bundle: ..., traitCollection: ...)`
    static func btn_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_my_life", bundle: ..., traitCollection: ...)`
    static func btn_my_life(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_my_life, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_my_reward", bundle: ..., traitCollection: ...)`
    static func btn_my_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_my_reward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_my_task", bundle: ..., traitCollection: ...)`
    static func btn_my_task(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_my_task, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_navigation", bundle: ..., traitCollection: ...)`
    static func btn_navigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_navigation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_navigation_h", bundle: ..., traitCollection: ...)`
    static func btn_navigation_h(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_navigation_h, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_news", bundle: ..., traitCollection: ...)`
    static func btn_news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_news, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_news_on", bundle: ..., traitCollection: ...)`
    static func btn_news_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_news_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_next", bundle: ..., traitCollection: ...)`
    static func btn_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_next, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_noneEvent", bundle: ..., traitCollection: ...)`
    static func btn_noneEvent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_noneEvent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_noneTask", bundle: ..., traitCollection: ...)`
    static func btn_noneTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_noneTask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_none_order", bundle: ..., traitCollection: ...)`
    static func btn_none_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_none_order, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_open", bundle: ..., traitCollection: ...)`
    static func btn_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_open, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_pending_payment", bundle: ..., traitCollection: ...)`
    static func btn_pending_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_pending_payment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_people", bundle: ..., traitCollection: ...)`
    static func btn_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_personal_stores", bundle: ..., traitCollection: ...)`
    static func btn_personal_stores(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_personal_stores, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_phone1", bundle: ..., traitCollection: ...)`
    static func btn_phone1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_phone1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_pick_image", bundle: ..., traitCollection: ...)`
    static func btn_pick_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_pick_image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_play", bundle: ..., traitCollection: ...)`
    static func btn_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_prize", bundle: ..., traitCollection: ...)`
    static func btn_prize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_prize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_prize_pool", bundle: ..., traitCollection: ...)`
    static func btn_prize_pool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_prize_pool, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_profession", bundle: ..., traitCollection: ...)`
    static func btn_profession(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_profession, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_qr", bundle: ..., traitCollection: ...)`
    static func btn_qr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_qr, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_ranking_List", bundle: ..., traitCollection: ...)`
    static func btn_ranking_List(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_ranking_List, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_receipt_of_goods", bundle: ..., traitCollection: ...)`
    static func btn_receipt_of_goods(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_receipt_of_goods, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_refresh", bundle: ..., traitCollection: ...)`
    static func btn_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_scan_code_payment", bundle: ..., traitCollection: ...)`
    static func btn_scan_code_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_scan_code_payment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_search", bundle: ..., traitCollection: ...)`
    static func btn_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_service", bundle: ..., traitCollection: ...)`
    static func btn_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_service, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_share", bundle: ..., traitCollection: ...)`
    static func btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_the_custom", bundle: ..., traitCollection: ...)`
    static func btn_the_custom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_the_custom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_to_be_refunded", bundle: ..., traitCollection: ...)`
    static func btn_to_be_refunded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_to_be_refunded, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_to_be_shipped", bundle: ..., traitCollection: ...)`
    static func btn_to_be_shipped(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_to_be_shipped, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_unbind", bundle: ..., traitCollection: ...)`
    static func btn_unbind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_unbind, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_use_yes", bundle: ..., traitCollection: ...)`
    static func btn_use_yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_use_yes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_validation", bundle: ..., traitCollection: ...)`
    static func btn_validation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_validation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_validation1", bundle: ..., traitCollection: ...)`
    static func btn_validation1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_validation1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble_ingoing", bundle: ..., traitCollection: ...)`
    static func bubble_ingoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble_ingoing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bubble_outgoing", bundle: ..., traitCollection: ...)`
    static func bubble_outgoing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bubble_outgoing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center-myOrder_addressManagement_btn_location", bundle: ..., traitCollection: ...)`
    static func centerMyOrder_addressManagement_btn_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerMyOrder_addressManagement_btn_location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_aboutUs_btn_friend", bundle: ..., traitCollection: ...)`
    static func center_aboutUs_btn_friend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_aboutUs_btn_friend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_aboutUs_btn_qq", bundle: ..., traitCollection: ...)`
    static func center_aboutUs_btn_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_aboutUs_btn_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_aboutUs_btn_wechat", bundle: ..., traitCollection: ...)`
    static func center_aboutUs_btn_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_aboutUs_btn_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_aboutUs_logo_us", bundle: ..., traitCollection: ...)`
    static func center_aboutUs_logo_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_aboutUs_logo_us, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_aboutUs_update", bundle: ..., traitCollection: ...)`
    static func center_aboutUs_update(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_aboutUs_update, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_address_btn_add", bundle: ..., traitCollection: ...)`
    static func center_address_btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_address_btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_address_pic_add_1", bundle: ..., traitCollection: ...)`
    static func center_address_pic_add_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_address_pic_add_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_address_pic_add_plus", bundle: ..., traitCollection: ...)`
    static func center_address_pic_add_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_address_pic_add_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_address_pic_add_word", bundle: ..., traitCollection: ...)`
    static func center_address_pic_add_word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_address_pic_add_word, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_g", bundle: ..., traitCollection: ...)`
    static func center_banner_g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_g, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order2", bundle: ..., traitCollection: ...)`
    static func center_banner_order2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order3", bundle: ..., traitCollection: ...)`
    static func center_banner_order3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order4", bundle: ..., traitCollection: ...)`
    static func center_banner_order4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order5", bundle: ..., traitCollection: ...)`
    static func center_banner_order5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order6", bundle: ..., traitCollection: ...)`
    static func center_banner_order6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_banner_order7", bundle: ..., traitCollection: ...)`
    static func center_banner_order7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_banner_order7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_feedback_add_pic", bundle: ..., traitCollection: ...)`
    static func center_feedback_add_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_feedback_add_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_modifyAddressbtn_default_on", bundle: ..., traitCollection: ...)`
    static func center_modifyAddressbtn_default_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_modifyAddressbtn_default_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_myMember_addMember_banner_members", bundle: ..., traitCollection: ...)`
    static func center_myMember_addMember_banner_members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_myMember_addMember_banner_members, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_myMember_addresslist", bundle: ..., traitCollection: ...)`
    static func center_myMember_addresslist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_myMember_addresslist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_myMember_banner_members", bundle: ..., traitCollection: ...)`
    static func center_myMember_banner_members(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_myMember_banner_members, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_myReservation_icon_drawmoney", bundle: ..., traitCollection: ...)`
    static func center_myReservation_icon_drawmoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_myReservation_icon_drawmoney, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_myReservation_icon_loan", bundle: ..., traitCollection: ...)`
    static func center_myReservation_icon_loan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_myReservation_icon_loan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_orderDetails_icon_logistics_01", bundle: ..., traitCollection: ...)`
    static func center_orderDetails_icon_logistics_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_orderDetails_icon_logistics_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_orderDetails_icon_site", bundle: ..., traitCollection: ...)`
    static func center_orderDetails_icon_site(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_orderDetails_icon_site, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_order_btn_go", bundle: ..., traitCollection: ...)`
    static func center_order_btn_go(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_order_btn_go, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_order_ico_shop", bundle: ..., traitCollection: ...)`
    static func center_order_ico_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_order_ico_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_order_pic_order_words", bundle: ..., traitCollection: ...)`
    static func center_order_pic_order_words(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_order_pic_order_words, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_passerror_btn", bundle: ..., traitCollection: ...)`
    static func center_passerror_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_passerror_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_passerror_pic", bundle: ..., traitCollection: ...)`
    static func center_passerror_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_passerror_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_passerror_word", bundle: ..., traitCollection: ...)`
    static func center_passerror_word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_passerror_word, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_shoppingCart_btn_minus", bundle: ..., traitCollection: ...)`
    static func center_shoppingCart_btn_minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_shoppingCart_btn_minus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_shoppingCart_btn_plus", bundle: ..., traitCollection: ...)`
    static func center_shoppingCart_btn_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_shoppingCart_btn_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_shoppingcart_icon_collection", bundle: ..., traitCollection: ...)`
    static func center_shoppingcart_icon_collection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_shoppingcart_icon_collection, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "center_shoppingcart_icon_delete", bundle: ..., traitCollection: ...)`
    static func center_shoppingcart_icon_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.center_shoppingcart_icon_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_line", bundle: ..., traitCollection: ...)`
    static func chat_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat_plaint", bundle: ..., traitCollection: ...)`
    static func chat_plaint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_plaint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clerk_bg", bundle: ..., traitCollection: ...)`
    static func clerk_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clerk_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cneter_order_pic_order", bundle: ..., traitCollection: ...)`
    static func cneter_order_pic_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cneter_order_pic_order, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coordinate_me", bundle: ..., traitCollection: ...)`
    static func coordinate_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coordinate_me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coordinate_on_01", bundle: ..., traitCollection: ...)`
    static func coordinate_on_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coordinate_on_01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coordinate_on_02", bundle: ..., traitCollection: ...)`
    static func coordinate_on_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coordinate_on_02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "event_btn_delete", bundle: ..., traitCollection: ...)`
    static func event_btn_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.event_btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_1", bundle: ..., traitCollection: ...)`
    static func guide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_2", bundle: ..., traitCollection: ...)`
    static func guide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_3", bundle: ..., traitCollection: ...)`
    static func guide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_4", bundle: ..., traitCollection: ...)`
    static func guide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_5", bundle: ..., traitCollection: ...)`
    static func guide_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "head_default", bundle: ..., traitCollection: ...)`
    static func head_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.head_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_list_call", bundle: ..., traitCollection: ...)`
    static func ic_list_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verify_id", bundle: ..., traitCollection: ...)`
    static func ic_verify_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verify_id, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_verify_name", bundle: ..., traitCollection: ...)`
    static func ic_verify_name(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_verify_name, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_address_center", bundle: ..., traitCollection: ...)`
    static func ico_address_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_address_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_code1", bundle: ..., traitCollection: ...)`
    static func ico_code1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_code1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_edit", bundle: ..., traitCollection: ...)`
    static func ico_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_logo_shop", bundle: ..., traitCollection: ...)`
    static func ico_logo_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_logo_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_shop", bundle: ..., traitCollection: ...)`
    static func ico_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_stars_g", bundle: ..., traitCollection: ...)`
    static func ico_stars_g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_stars_g, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_stars_o", bundle: ..., traitCollection: ...)`
    static func ico_stars_o(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_stars_o, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_tbuying", bundle: ..., traitCollection: ...)`
    static func ico_tbuying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_tbuying, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_tiket", bundle: ..., traitCollection: ...)`
    static func ico_tiket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_tiket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_action", bundle: ..., traitCollection: ...)`
    static func icon_action(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_action, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_announce_new", bundle: ..., traitCollection: ...)`
    static func icon_announce_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_announce_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_apply", bundle: ..., traitCollection: ...)`
    static func icon_apply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_apply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bank", bundle: ..., traitCollection: ...)`
    static func icon_bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg", bundle: ..., traitCollection: ...)`
    static func icon_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg-1", bundle: ..., traitCollection: ...)`
    static func icon_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg11", bundle: ..., traitCollection: ...)`
    static func icon_bg11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg_null", bundle: ..., traitCollection: ...)`
    static func icon_bg_null(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg_null, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg_outDate", bundle: ..., traitCollection: ...)`
    static func icon_bg_outDate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg_outDate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_blank_card", bundle: ..., traitCollection: ...)`
    static func icon_blank_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_blank_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_blank_card_word", bundle: ..., traitCollection: ...)`
    static func icon_blank_card_word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_blank_card_word, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_card", bundle: ..., traitCollection: ...)`
    static func icon_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_card, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_carousel", bundle: ..., traitCollection: ...)`
    static func icon_carousel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_carousel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cloud_shield", bundle: ..., traitCollection: ...)`
    static func icon_cloud_shield(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cloud_shield, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_code", bundle: ..., traitCollection: ...)`
    static func icon_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_code, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_code1", bundle: ..., traitCollection: ...)`
    static func icon_code1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_code1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_collection", bundle: ..., traitCollection: ...)`
    static func icon_collection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_collection, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contributepoint", bundle: ..., traitCollection: ...)`
    static func icon_contributepoint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contributepoint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_credit", bundle: ..., traitCollection: ...)`
    static func icon_credit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_credit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cry", bundle: ..., traitCollection: ...)`
    static func icon_cry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cry, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cry1", bundle: ..., traitCollection: ...)`
    static func icon_cry1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cry1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cry9", bundle: ..., traitCollection: ...)`
    static func icon_cry9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cry9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_discount_bg1", bundle: ..., traitCollection: ...)`
    static func icon_discount_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_discount_bg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_drop_down", bundle: ..., traitCollection: ...)`
    static func icon_drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_drop_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_expired", bundle: ..., traitCollection: ...)`
    static func icon_expired(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_expired, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_finger", bundle: ..., traitCollection: ...)`
    static func icon_finger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_finger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_font", bundle: ..., traitCollection: ...)`
    static func icon_font(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_font, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_has_accepted", bundle: ..., traitCollection: ...)`
    static func icon_has_accepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_has_accepted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_has_been_hit", bundle: ..., traitCollection: ...)`
    static func icon_has_been_hit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_has_been_hit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_has_been_hit-1", bundle: ..., traitCollection: ...)`
    static func icon_has_been_hit1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_has_been_hit1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_help01", bundle: ..., traitCollection: ...)`
    static func icon_help01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_help01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_home_time", bundle: ..., traitCollection: ...)`
    static func icon_home_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_in_loading", bundle: ..., traitCollection: ...)`
    static func icon_in_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_in_loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_indent", bundle: ..., traitCollection: ...)`
    static func icon_indent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_indent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_integral", bundle: ..., traitCollection: ...)`
    static func icon_integral(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_integral, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_join", bundle: ..., traitCollection: ...)`
    static func icon_join(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_join, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_kite", bundle: ..., traitCollection: ...)`
    static func icon_kite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_kite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_load_failure", bundle: ..., traitCollection: ...)`
    static func icon_load_failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_load_failure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_load_success", bundle: ..., traitCollection: ...)`
    static func icon_load_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_load_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo", bundle: ..., traitCollection: ...)`
    static func icon_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logout", bundle: ..., traitCollection: ...)`
    static func icon_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mccb_logo", bundle: ..., traitCollection: ...)`
    static func icon_mccb_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mccb_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_member", bundle: ..., traitCollection: ...)`
    static func icon_member(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_more", bundle: ..., traitCollection: ...)`
    static func icon_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_myActivity", bundle: ..., traitCollection: ...)`
    static func icon_myActivity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_myActivity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no.1", bundle: ..., traitCollection: ...)`
    static func icon_no1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no.2", bundle: ..., traitCollection: ...)`
    static func icon_no2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no.3", bundle: ..., traitCollection: ...)`
    static func icon_no3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no_commodity", bundle: ..., traitCollection: ...)`
    static func icon_no_commodity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no_commodity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no_shop_assistant", bundle: ..., traitCollection: ...)`
    static func icon_no_shop_assistant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no_shop_assistant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_noneEvent", bundle: ..., traitCollection: ...)`
    static func icon_noneEvent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_noneEvent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ok", bundle: ..., traitCollection: ...)`
    static func icon_ok(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ok, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ok1", bundle: ..., traitCollection: ...)`
    static func icon_ok1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ok1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ok2", bundle: ..., traitCollection: ...)`
    static func icon_ok2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ok2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_ok3", bundle: ..., traitCollection: ...)`
    static func icon_ok3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ok3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_password", bundle: ..., traitCollection: ...)`
    static func icon_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_password_a", bundle: ..., traitCollection: ...)`
    static func icon_password_a(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_password_a, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_passwordsure", bundle: ..., traitCollection: ...)`
    static func icon_passwordsure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_passwordsure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_people", bundle: ..., traitCollection: ...)`
    static func icon_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_people4", bundle: ..., traitCollection: ...)`
    static func icon_people4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_people4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_play", bundle: ..., traitCollection: ...)`
    static func icon_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_preferential_pay", bundle: ..., traitCollection: ...)`
    static func icon_preferential_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_preferential_pay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_prize", bundle: ..., traitCollection: ...)`
    static func icon_prize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_prize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pull", bundle: ..., traitCollection: ...)`
    static func icon_pull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pull, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_record1", bundle: ..., traitCollection: ...)`
    static func icon_record1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_record1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_record_pic", bundle: ..., traitCollection: ...)`
    static func icon_record_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_record_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_record_word", bundle: ..., traitCollection: ...)`
    static func icon_record_word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_record_word, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_red", bundle: ..., traitCollection: ...)`
    static func icon_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_red, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_refund", bundle: ..., traitCollection: ...)`
    static func icon_refund(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_refund, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_refund_fail", bundle: ..., traitCollection: ...)`
    static func icon_refund_fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_refund_fail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_refund_fail02", bundle: ..., traitCollection: ...)`
    static func icon_refund_fail02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_refund_fail02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_role", bundle: ..., traitCollection: ...)`
    static func icon_role(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_role, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_shoppingcart", bundle: ..., traitCollection: ...)`
    static func icon_shoppingcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_shoppingcart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot", bundle: ..., traitCollection: ...)`
    static func icon_spot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_spot1", bundle: ..., traitCollection: ...)`
    static func icon_spot1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_spot1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_star_off", bundle: ..., traitCollection: ...)`
    static func icon_star_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_star_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_star_on", bundle: ..., traitCollection: ...)`
    static func icon_star_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_star_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_success", bundle: ..., traitCollection: ...)`
    static func icon_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_sweep", bundle: ..., traitCollection: ...)`
    static func icon_sweep(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sweep, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_thank", bundle: ..., traitCollection: ...)`
    static func icon_thank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_thank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_time1", bundle: ..., traitCollection: ...)`
    static func icon_time1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_time2", bundle: ..., traitCollection: ...)`
    static func icon_time2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_time3", bundle: ..., traitCollection: ...)`
    static func icon_time3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_time4", bundle: ..., traitCollection: ...)`
    static func icon_time4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_to_examine", bundle: ..., traitCollection: ...)`
    static func icon_to_examine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_to_examine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_to_update", bundle: ..., traitCollection: ...)`
    static func icon_to_update(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_to_update, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_user", bundle: ..., traitCollection: ...)`
    static func icon_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_voice", bundle: ..., traitCollection: ...)`
    static func icon_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_voice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_whole", bundle: ..., traitCollection: ...)`
    static func icon_whole(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whole, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_default", bundle: ..., traitCollection: ...)`
    static func image_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_default_large", bundle: ..., traitCollection: ...)`
    static func image_default_large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_default_large, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_default_midden", bundle: ..., traitCollection: ...)`
    static func image_default_midden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_default_midden, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image_default_small", bundle: ..., traitCollection: ...)`
    static func image_default_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image_default_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout_pic", bundle: ..., traitCollection: ...)`
    static func logout_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_bg_4", bundle: ..., traitCollection: ...)`
    static func lottery_bg_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_bg_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_btn_back", bundle: ..., traitCollection: ...)`
    static func lottery_btn_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_btn_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_btn_more", bundle: ..., traitCollection: ...)`
    static func lottery_btn_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_btn_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_btn_share", bundle: ..., traitCollection: ...)`
    static func lottery_btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_btn_share1", bundle: ..., traitCollection: ...)`
    static func lottery_btn_share1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_btn_share1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lottery_btn_share3", bundle: ..., traitCollection: ...)`
    static func lottery_btn_share3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lottery_btn_share3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mallHome_checkin_bg", bundle: ..., traitCollection: ...)`
    static func mallHome_checkin_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mallHome_checkin_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mallHome_checkin_btn_delete", bundle: ..., traitCollection: ...)`
    static func mallHome_checkin_btn_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mallHome_checkin_btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mallHome_checkin_success", bundle: ..., traitCollection: ...)`
    static func mallHome_checkin_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mallHome_checkin_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_back_to_top", bundle: ..., traitCollection: ...)`
    static func mall_back_to_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_back_to_top, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_btn_menu_more", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_btn_menu_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_btn_menu_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_btn_more_menu", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_btn_more_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_btn_more_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_btn_shop_call", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_btn_shop_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_btn_shop_call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_ic_arraw_left", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_ic_arraw_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_ic_arraw_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_ic_shop_arrow", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_ic_shop_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_ic_shop_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_ic_shop_info", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_ic_shop_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_ic_shop_info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_ico_search", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_ico_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_ico_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_call_menu", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_call_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_call_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_share_menu", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_share_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_share_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_shop_address", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_shop_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_shop_address, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_shop_detail", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_shop_detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_shop_detail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_shop_realname", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_shop_realname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_shop_realname, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_icon_thehot", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_icon_thehot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_icon_thehot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_brandZone_pic_banner_shop", bundle: ..., traitCollection: ...)`
    static func mall_brandZone_pic_banner_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_brandZone_pic_banner_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_btn_choice", bundle: ..., traitCollection: ...)`
    static func mall_btn_choice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_btn_choice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_btn_integrate_cart", bundle: ..., traitCollection: ...)`
    static func mall_btn_integrate_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_btn_integrate_cart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_btn_jfb", bundle: ..., traitCollection: ...)`
    static func mall_btn_jfb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_btn_jfb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_btn_sign_in", bundle: ..., traitCollection: ...)`
    static func mall_btn_sign_in(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_btn_sign_in, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_goodslist_btn_more_down", bundle: ..., traitCollection: ...)`
    static func mall_goodslist_btn_more_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_goodslist_btn_more_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_goodslist_btn_more_up", bundle: ..., traitCollection: ...)`
    static func mall_goodslist_btn_more_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_goodslist_btn_more_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_goodslist_ic_option_all", bundle: ..., traitCollection: ...)`
    static func mall_goodslist_ic_option_all(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_goodslist_ic_option_all, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_goodslist_ic_option_select", bundle: ..., traitCollection: ...)`
    static func mall_goodslist_ic_option_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_goodslist_ic_option_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_ic_goods_shop", bundle: ..., traitCollection: ...)`
    static func mall_ic_goods_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_ic_goods_shop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_ic_shoppingcart", bundle: ..., traitCollection: ...)`
    static func mall_ic_shoppingcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_ic_shoppingcart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_icon_hot", bundle: ..., traitCollection: ...)`
    static func mall_icon_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_icon_hot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_icon_no1", bundle: ..., traitCollection: ...)`
    static func mall_icon_no1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_icon_no1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity01", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity02", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity03", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity05", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity05, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity06", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity06, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_activity07", bundle: ..., traitCollection: ...)`
    static func mall_integral_activity07(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_activity07, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_btn_banner1", bundle: ..., traitCollection: ...)`
    static func mall_integral_btn_banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_btn_banner1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_btn_banner2", bundle: ..., traitCollection: ...)`
    static func mall_integral_btn_banner2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_btn_banner2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_btn_banner3", bundle: ..., traitCollection: ...)`
    static func mall_integral_btn_banner3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_btn_banner3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_integral_icon_point", bundle: ..., traitCollection: ...)`
    static func mall_integral_icon_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_integral_icon_point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_offlineEvent_arrow_more", bundle: ..., traitCollection: ...)`
    static func mall_offlineEvent_arrow_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_offlineEvent_arrow_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_offlineEvent_bg_people", bundle: ..., traitCollection: ...)`
    static func mall_offlineEvent_bg_people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_offlineEvent_bg_people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_offlineEvent_font_1", bundle: ..., traitCollection: ...)`
    static func mall_offlineEvent_font_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_offlineEvent_font_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_offlineEvent_icon_cannot_view", bundle: ..., traitCollection: ...)`
    static func mall_offlineEvent_icon_cannot_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_offlineEvent_icon_cannot_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_task_bg_detail", bundle: ..., traitCollection: ...)`
    static func mall_task_bg_detail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_task_bg_detail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_task_icon_coupon", bundle: ..., traitCollection: ...)`
    static func mall_task_icon_coupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_task_icon_coupon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mall_task_terminaltime", bundle: ..., traitCollection: ...)`
    static func mall_task_terminaltime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_task_terminaltime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu_order", bundle: ..., traitCollection: ...)`
    static func menu_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_order, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_bg", bundle: ..., traitCollection: ...)`
    static func message_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "msh_logo_s", bundle: ..., traitCollection: ...)`
    static func msh_logo_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.msh_logo_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mycollection_icon_product", bundle: ..., traitCollection: ...)`
    static func mycollection_icon_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mycollection_icon_product, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mycollection_icon_product1", bundle: ..., traitCollection: ...)`
    static func mycollection_icon_product1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mycollection_icon_product1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneCollection_word_pic", bundle: ..., traitCollection: ...)`
    static func noneCollection_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneCollection_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneCoupon_btn", bundle: ..., traitCollection: ...)`
    static func noneCoupon_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneCoupon_btn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneCoupon_pic", bundle: ..., traitCollection: ...)`
    static func noneCoupon_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneCoupon_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneDiscount_word_pic", bundle: ..., traitCollection: ...)`
    static func noneDiscount_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneDiscount_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nonePrize_word_pic", bundle: ..., traitCollection: ...)`
    static func nonePrize_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonePrize_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneTask_word_pic", bundle: ..., traitCollection: ...)`
    static func noneTask_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneTask_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneUncomplete_word_pic", bundle: ..., traitCollection: ...)`
    static func noneUncomplete_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneUncomplete_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nonecomplete_word_pic", bundle: ..., traitCollection: ...)`
    static func nonecomplete_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonecomplete_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nonedata_image_pic", bundle: ..., traitCollection: ...)`
    static func nonedata_image_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nonedata_image_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noneorder_word_pic", bundle: ..., traitCollection: ...)`
    static func noneorder_word_pic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noneorder_word_pic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_input_box", bundle: ..., traitCollection: ...)`
    static func pass_input_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_input_box, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_bg_news", bundle: ..., traitCollection: ...)`
    static func pic_bg_news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_bg_news, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_bg_news1", bundle: ..., traitCollection: ...)`
    static func pic_bg_news1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_bg_news1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_goods_out", bundle: ..., traitCollection: ...)`
    static func pic_goods_out(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_goods_out, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_goods_words", bundle: ..., traitCollection: ...)`
    static func pic_goods_words(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_goods_words, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_invalid", bundle: ..., traitCollection: ...)`
    static func pic_invalid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_invalid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_lose", bundle: ..., traitCollection: ...)`
    static func pic_lose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_lose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_message", bundle: ..., traitCollection: ...)`
    static func pic_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_message_word", bundle: ..., traitCollection: ...)`
    static func pic_message_word(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_message_word, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_nail", bundle: ..., traitCollection: ...)`
    static func pic_nail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_nail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_noone", bundle: ..., traitCollection: ...)`
    static func pic_noone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_noone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_postmark", bundle: ..., traitCollection: ...)`
    static func pic_postmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_postmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_postmark01", bundle: ..., traitCollection: ...)`
    static func pic_postmark01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_postmark01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_postmark02", bundle: ..., traitCollection: ...)`
    static func pic_postmark02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_postmark02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_qr_bg", bundle: ..., traitCollection: ...)`
    static func pic_qr_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_qr_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pic_words", bundle: ..., traitCollection: ...)`
    static func pic_words(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pic_words, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qa_cart", bundle: ..., traitCollection: ...)`
    static func qa_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa_cart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qa_coupon", bundle: ..., traitCollection: ...)`
    static func qa_coupon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa_coupon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qa_point", bundle: ..., traitCollection: ...)`
    static func qa_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa_point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qa_scan", bundle: ..., traitCollection: ...)`
    static func qa_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qa_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qrcode", bundle: ..., traitCollection: ...)`
    static func qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "quickMenu", bundle: ..., traitCollection: ...)`
    static func quickMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_normal", bundle: ..., traitCollection: ...)`
    static func radio_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "radio_selected", bundle: ..., traitCollection: ...)`
    static func radio_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "startpage", bundle: ..., traitCollection: ...)`
    static func startpage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startpage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_01_off", bundle: ..., traitCollection: ...)`
    static func tab_01_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_01_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_01_on", bundle: ..., traitCollection: ...)`
    static func tab_01_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_01_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_02_off", bundle: ..., traitCollection: ...)`
    static func tab_02_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_02_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_02_on", bundle: ..., traitCollection: ...)`
    static func tab_02_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_02_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_03_off", bundle: ..., traitCollection: ...)`
    static func tab_03_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_03_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_03_on", bundle: ..., traitCollection: ...)`
    static func tab_03_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_03_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_04_off", bundle: ..., traitCollection: ...)`
    static func tab_04_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_04_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab_04_on", bundle: ..., traitCollection: ...)`
    static func tab_04_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_04_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tag_frame", bundle: ..., traitCollection: ...)`
    static func tag_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tag_frame, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trans_diff", bundle: ..., traitCollection: ...)`
    static func trans_diff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trans_diff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trans_same", bundle: ..., traitCollection: ...)`
    static func trans_same(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trans_same, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "word_goods", bundle: ..., traitCollection: ...)`
    static func word_goods(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.word_goods, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 102 nibs.
  struct nib {
    /// Nib `AccountTableViewCell`.
    static let accountTableViewCell = _R.nib._AccountTableViewCell()
    /// Nib `AddressManagementTableViewCell`.
    static let addressManagementTableViewCell = _R.nib._AddressManagementTableViewCell()
    /// Nib `AdvertTableViewCell`.
    static let advertTableViewCell = _R.nib._AdvertTableViewCell()
    /// Nib `AnswerQuestionTableViewCell`.
    static let answerQuestionTableViewCell = _R.nib._AnswerQuestionTableViewCell()
    /// Nib `AppraiseSectionHeaderView`.
    static let appraiseSectionHeaderView = _R.nib._AppraiseSectionHeaderView()
    /// Nib `AppraiseTableViewCell`.
    static let appraiseTableViewCell = _R.nib._AppraiseTableViewCell()
    /// Nib `AwardRecordTableViewCell`.
    static let awardRecordTableViewCell = _R.nib._AwardRecordTableViewCell()
    /// Nib `BankCardTableViewCell`.
    static let bankCardTableViewCell = _R.nib._BankCardTableViewCell()
    /// Nib `BrandDetailCollectionReusableView`.
    static let brandDetailCollectionReusableView = _R.nib._BrandDetailCollectionReusableView()
    /// Nib `BrandDetailMoreTableViewCell`.
    static let brandDetailMoreTableViewCell = _R.nib._BrandDetailMoreTableViewCell()
    /// Nib `BrandDetailSectionHeaderView`.
    static let brandDetailSectionHeaderView = _R.nib._BrandDetailSectionHeaderView()
    /// Nib `BrandTableViewCell`.
    static let brandTableViewCell = _R.nib._BrandTableViewCell()
    /// Nib `BrandZoneTableViewCell`.
    static let brandZoneTableViewCell = _R.nib._BrandZoneTableViewCell()
    /// Nib `BrandZoneView`.
    static let brandZoneView = _R.nib._BrandZoneView()
    /// Nib `ChangeGoodsEventView`.
    static let changeGoodsEventView = _R.nib._ChangeGoodsEventView()
    /// Nib `ChangeGoodsNumberView`.
    static let changeGoodsNumberView = _R.nib._ChangeGoodsNumberView()
    /// Nib `ChooseCardTableViewCell`.
    static let chooseCardTableViewCell = _R.nib._ChooseCardTableViewCell()
    /// Nib `ChoosePaymentAddNewCardCell`.
    static let choosePaymentAddNewCardCell = _R.nib._ChoosePaymentAddNewCardCell()
    /// Nib `ChoosePaymentTableViewCell`.
    static let choosePaymentTableViewCell = _R.nib._ChoosePaymentTableViewCell()
    /// Nib `CityActivityCollectionViewCell`.
    static let cityActivityCollectionViewCell = _R.nib._CityActivityCollectionViewCell()
    /// Nib `CityActivityTableViewCell`.
    static let cityActivityTableViewCell = _R.nib._CityActivityTableViewCell()
    /// Nib `ClassiftionCollectionViewCell`.
    static let classiftionCollectionViewCell = _R.nib._ClassiftionCollectionViewCell()
    /// Nib `CreditTableViewCell`.
    static let creditTableViewCell = _R.nib._CreditTableViewCell()
    /// Nib `DetailTableViewCell`.
    static let detailTableViewCell = _R.nib._DetailTableViewCell()
    /// Nib `DiscountListTableViewCell`.
    static let discountListTableViewCell = _R.nib._DiscountListTableViewCell()
    /// Nib `DiscountTableViewCell`.
    static let discountTableViewCell = _R.nib._DiscountTableViewCell()
    /// Nib `DiscountView`.
    static let discountView = _R.nib._DiscountView()
    /// Nib `ErrorPromptView`.
    static let errorPromptView = _R.nib._ErrorPromptView()
    /// Nib `ExchangeRecordTableViewCell`.
    static let exchangeRecordTableViewCell = _R.nib._ExchangeRecordTableViewCell()
    /// Nib `FeatureEventTableViewCell`.
    static let featureEventTableViewCell = _R.nib._FeatureEventTableViewCell()
    /// Nib `FeatureGoodsCollectionCell`.
    static let featureGoodsCollectionCell = _R.nib._FeatureGoodsCollectionCell()
    /// Nib `FeatureGoodsTableViewCell`.
    static let featureGoodsTableViewCell = _R.nib._FeatureGoodsTableViewCell()
    /// Nib `GoodsCollectionViewCell`.
    static let goodsCollectionViewCell = _R.nib._GoodsCollectionViewCell()
    /// Nib `GoodsListCollectionReusableView`.
    static let goodsListCollectionReusableView = _R.nib._GoodsListCollectionReusableView()
    /// Nib `GoodsListCollectionViewCell`.
    static let goodsListCollectionViewCell = _R.nib._GoodsListCollectionViewCell()
    /// Nib `GoodsTableViewCell`.
    static let goodsTableViewCell = _R.nib._GoodsTableViewCell()
    /// Nib `GroupTableViewCell`.
    static let groupTableViewCell = _R.nib._GroupTableViewCell()
    /// Nib `HomWatchAdTableSectionHeaderView`.
    static let homWatchAdTableSectionHeaderView = _R.nib._HomWatchAdTableSectionHeaderView()
    /// Nib `HomeSectionFooterView`.
    static let homeSectionFooterView = _R.nib._HomeSectionFooterView()
    /// Nib `HomeSectionHeaderView`.
    static let homeSectionHeaderView = _R.nib._HomeSectionHeaderView()
    /// Nib `InputAccessoryToolbar`.
    static let inputAccessoryToolbar = _R.nib._InputAccessoryToolbar()
    /// Nib `InputAlertView`.
    static let inputAlertView = _R.nib._InputAlertView()
    /// Nib `InputView`.
    static let inputView = _R.nib._InputView()
    /// Nib `IntegralDetailMenuTableViewCell`.
    static let integralDetailMenuTableViewCell = _R.nib._IntegralDetailMenuTableViewCell()
    /// Nib `ListViewFirstMenuTableViewCell`.
    static let listViewFirstMenuTableViewCell = _R.nib._ListViewFirstMenuTableViewCell()
    /// Nib `ListViewSecondMenuTableViewCell`.
    static let listViewSecondMenuTableViewCell = _R.nib._ListViewSecondMenuTableViewCell()
    /// Nib `LogisticsTableViewCell`.
    static let logisticsTableViewCell = _R.nib._LogisticsTableViewCell()
    /// Nib `LotteryResultView`.
    static let lotteryResultView = _R.nib._LotteryResultView()
    /// Nib `MallGoodsTableViewCell`.
    static let mallGoodsTableViewCell = _R.nib._MallGoodsTableViewCell()
    /// Nib `MallHomeCheckInView`.
    static let mallHomeCheckInView = _R.nib._MallHomeCheckInView()
    /// Nib `MallHomeHeaderView`.
    static let mallHomeHeaderView = _R.nib._MallHomeHeaderView()
    /// Nib `MallHomeSectionHeaderView`.
    static let mallHomeSectionHeaderView = _R.nib._MallHomeSectionHeaderView()
    /// Nib `MyAwardTableViewCell`.
    static let myAwardTableViewCell = _R.nib._MyAwardTableViewCell()
    /// Nib `MyCollectionTableViewCell`.
    static let myCollectionTableViewCell = _R.nib._MyCollectionTableViewCell()
    /// Nib `MyCouponSectionHeaderView`.
    static let myCouponSectionHeaderView = _R.nib._MyCouponSectionHeaderView()
    /// Nib `MyCouponTableViewCell`.
    static let myCouponTableViewCell = _R.nib._MyCouponTableViewCell()
    /// Nib `MyMemberTableViewCell`.
    static let myMemberTableViewCell = _R.nib._MyMemberTableViewCell()
    /// Nib `MyOrderSectionFooterView_SE`.
    static let myOrderSectionFooterView_SE = _R.nib._MyOrderSectionFooterView_SE()
    /// Nib `MyOrderSectionFooterView`.
    static let myOrderSectionFooterView = _R.nib._MyOrderSectionFooterView()
    /// Nib `MyOrderSectionHeaderView`.
    static let myOrderSectionHeaderView = _R.nib._MyOrderSectionHeaderView()
    /// Nib `MyOrderTableViewCell`.
    static let myOrderTableViewCell = _R.nib._MyOrderTableViewCell()
    /// Nib `MyPrizeTableViewCell`.
    static let myPrizeTableViewCell = _R.nib._MyPrizeTableViewCell()
    /// Nib `MyReservationTableViewCell`.
    static let myReservationTableViewCell = _R.nib._MyReservationTableViewCell()
    /// Nib `NewsTableViewCell`.
    static let newsTableViewCell = _R.nib._NewsTableViewCell()
    /// Nib `NoneBackgroundView`.
    static let noneBackgroundView = _R.nib._NoneBackgroundView()
    /// Nib `NoneBindUserView`.
    static let noneBindUserView = _R.nib._NoneBindUserView()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `OfflineEventTableViewCell_SE`.
    static let offlineEventTableViewCell_SE = _R.nib._OfflineEventTableViewCell_SE()
    /// Nib `OfflineEventTableViewCell`.
    static let offlineEventTableViewCell = _R.nib._OfflineEventTableViewCell()
    /// Nib `OnlineEventTableViewCell`.
    static let onlineEventTableViewCell = _R.nib._OnlineEventTableViewCell()
    /// Nib `OrderAddressTableViewCell`.
    static let orderAddressTableViewCell = _R.nib._OrderAddressTableViewCell()
    /// Nib `OrderConsumeTableViewCell`.
    static let orderConsumeTableViewCell = _R.nib._OrderConsumeTableViewCell()
    /// Nib `OrderDeliveryTableViewCell`.
    static let orderDeliveryTableViewCell = _R.nib._OrderDeliveryTableViewCell()
    /// Nib `OrderGoodsSectionFooterView`.
    static let orderGoodsSectionFooterView = _R.nib._OrderGoodsSectionFooterView()
    /// Nib `OrderGoodsSectionHeaderView`.
    static let orderGoodsSectionHeaderView = _R.nib._OrderGoodsSectionHeaderView()
    /// Nib `OrderGoodsTableViewCell`.
    static let orderGoodsTableViewCell = _R.nib._OrderGoodsTableViewCell()
    /// Nib `OrderInfoTableViewCell`.
    static let orderInfoTableViewCell = _R.nib._OrderInfoTableViewCell()
    /// Nib `OrderSubmitSuccessTableViewCell`.
    static let orderSubmitSuccessTableViewCell = _R.nib._OrderSubmitSuccessTableViewCell()
    /// Nib `PrizeGoodsView`.
    static let prizeGoodsView = _R.nib._PrizeGoodsView()
    /// Nib `PrizePoolView`.
    static let prizePoolView = _R.nib._PrizePoolView()
    /// Nib `PrizeTableViewCell`.
    static let prizeTableViewCell = _R.nib._PrizeTableViewCell()
    /// Nib `RankListTableViewCell`.
    static let rankListTableViewCell = _R.nib._RankListTableViewCell()
    /// Nib `RefundFlowView`.
    static let refundFlowView = _R.nib._RefundFlowView()
    /// Nib `RegionChoiceToolView`.
    static let regionChoiceToolView = _R.nib._RegionChoiceToolView()
    /// Nib `SaleGoodsView`.
    static let saleGoodsView = _R.nib._SaleGoodsView()
    /// Nib `ShopAddressTableViewCell`.
    static let shopAddressTableViewCell = _R.nib._ShopAddressTableViewCell()
    /// Nib `ShopAuthTableViewCell`.
    static let shopAuthTableViewCell = _R.nib._ShopAuthTableViewCell()
    /// Nib `ShopDetailSectionHeaderView`.
    static let shopDetailSectionHeaderView = _R.nib._ShopDetailSectionHeaderView()
    /// Nib `ShopDetailTableViewCell`.
    static let shopDetailTableViewCell = _R.nib._ShopDetailTableViewCell()
    /// Nib `ShoppingCatGoodsView`.
    static let shoppingCatGoodsView = _R.nib._ShoppingCatGoodsView()
    /// Nib `ShoppingGoodsEventTableViewCell`.
    static let shoppingGoodsEventTableViewCell = _R.nib._ShoppingGoodsEventTableViewCell()
    /// Nib `ShoppingGoodsTableViewCell`.
    static let shoppingGoodsTableViewCell = _R.nib._ShoppingGoodsTableViewCell()
    /// Nib `ShoppingSectionHeaderView`.
    static let shoppingSectionHeaderView = _R.nib._ShoppingSectionHeaderView()
    /// Nib `ShortcutsTableViewCell`.
    static let shortcutsTableViewCell = _R.nib._ShortcutsTableViewCell()
    /// Nib `ShortcutsViewCell`.
    static let shortcutsViewCell = _R.nib._ShortcutsViewCell()
    /// Nib `StackButtonView`.
    static let stackButtonView = _R.nib._StackButtonView()
    /// Nib `SubmitOrderSectionFooterView`.
    static let submitOrderSectionFooterView = _R.nib._SubmitOrderSectionFooterView()
    /// Nib `SubmitOrderSectionHeaderView`.
    static let submitOrderSectionHeaderView = _R.nib._SubmitOrderSectionHeaderView()
    /// Nib `SubmitOrderTableViewCell`.
    static let submitOrderTableViewCell = _R.nib._SubmitOrderTableViewCell()
    /// Nib `TrendEventGoodsTableViewCell`.
    static let trendEventGoodsTableViewCell = _R.nib._TrendEventGoodsTableViewCell()
    /// Nib `TrendEventTableViewCell`.
    static let trendEventTableViewCell = _R.nib._TrendEventTableViewCell()
    /// Nib `WinInfoView`.
    static let winInfoView = _R.nib._WinInfoView()
    
    /// `UINib(name: "AccountTableViewCell", in: bundle)`
    static func accountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountTableViewCell)
    }
    
    /// `UINib(name: "AddressManagementTableViewCell", in: bundle)`
    static func addressManagementTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressManagementTableViewCell)
    }
    
    /// `UINib(name: "AdvertTableViewCell", in: bundle)`
    static func advertTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.advertTableViewCell)
    }
    
    /// `UINib(name: "AnswerQuestionTableViewCell", in: bundle)`
    static func answerQuestionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerQuestionTableViewCell)
    }
    
    /// `UINib(name: "AppraiseSectionHeaderView", in: bundle)`
    static func appraiseSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appraiseSectionHeaderView)
    }
    
    /// `UINib(name: "AppraiseTableViewCell", in: bundle)`
    static func appraiseTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appraiseTableViewCell)
    }
    
    /// `UINib(name: "AwardRecordTableViewCell", in: bundle)`
    static func awardRecordTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.awardRecordTableViewCell)
    }
    
    /// `UINib(name: "BankCardTableViewCell", in: bundle)`
    static func bankCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankCardTableViewCell)
    }
    
    /// `UINib(name: "BrandDetailCollectionReusableView", in: bundle)`
    static func brandDetailCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandDetailCollectionReusableView)
    }
    
    /// `UINib(name: "BrandDetailMoreTableViewCell", in: bundle)`
    static func brandDetailMoreTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandDetailMoreTableViewCell)
    }
    
    /// `UINib(name: "BrandDetailSectionHeaderView", in: bundle)`
    static func brandDetailSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandDetailSectionHeaderView)
    }
    
    /// `UINib(name: "BrandTableViewCell", in: bundle)`
    static func brandTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandTableViewCell)
    }
    
    /// `UINib(name: "BrandZoneTableViewCell", in: bundle)`
    static func brandZoneTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandZoneTableViewCell)
    }
    
    /// `UINib(name: "BrandZoneView", in: bundle)`
    static func brandZoneView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.brandZoneView)
    }
    
    /// `UINib(name: "ChangeGoodsEventView", in: bundle)`
    static func changeGoodsEventView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changeGoodsEventView)
    }
    
    /// `UINib(name: "ChangeGoodsNumberView", in: bundle)`
    static func changeGoodsNumberView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changeGoodsNumberView)
    }
    
    /// `UINib(name: "ChooseCardTableViewCell", in: bundle)`
    static func chooseCardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseCardTableViewCell)
    }
    
    /// `UINib(name: "ChoosePaymentAddNewCardCell", in: bundle)`
    static func choosePaymentAddNewCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.choosePaymentAddNewCardCell)
    }
    
    /// `UINib(name: "ChoosePaymentTableViewCell", in: bundle)`
    static func choosePaymentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.choosePaymentTableViewCell)
    }
    
    /// `UINib(name: "CityActivityCollectionViewCell", in: bundle)`
    static func cityActivityCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityActivityCollectionViewCell)
    }
    
    /// `UINib(name: "CityActivityTableViewCell", in: bundle)`
    static func cityActivityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityActivityTableViewCell)
    }
    
    /// `UINib(name: "ClassiftionCollectionViewCell", in: bundle)`
    static func classiftionCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.classiftionCollectionViewCell)
    }
    
    /// `UINib(name: "CreditTableViewCell", in: bundle)`
    static func creditTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.creditTableViewCell)
    }
    
    /// `UINib(name: "DetailTableViewCell", in: bundle)`
    static func detailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailTableViewCell)
    }
    
    /// `UINib(name: "DiscountListTableViewCell", in: bundle)`
    static func discountListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discountListTableViewCell)
    }
    
    /// `UINib(name: "DiscountTableViewCell", in: bundle)`
    static func discountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discountTableViewCell)
    }
    
    /// `UINib(name: "DiscountView", in: bundle)`
    static func discountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discountView)
    }
    
    /// `UINib(name: "ErrorPromptView", in: bundle)`
    static func errorPromptView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.errorPromptView)
    }
    
    /// `UINib(name: "ExchangeRecordTableViewCell", in: bundle)`
    static func exchangeRecordTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.exchangeRecordTableViewCell)
    }
    
    /// `UINib(name: "FeatureEventTableViewCell", in: bundle)`
    static func featureEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featureEventTableViewCell)
    }
    
    /// `UINib(name: "FeatureGoodsCollectionCell", in: bundle)`
    static func featureGoodsCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featureGoodsCollectionCell)
    }
    
    /// `UINib(name: "FeatureGoodsTableViewCell", in: bundle)`
    static func featureGoodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.featureGoodsTableViewCell)
    }
    
    /// `UINib(name: "GoodsCollectionViewCell", in: bundle)`
    static func goodsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsCollectionViewCell)
    }
    
    /// `UINib(name: "GoodsListCollectionReusableView", in: bundle)`
    static func goodsListCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsListCollectionReusableView)
    }
    
    /// `UINib(name: "GoodsListCollectionViewCell", in: bundle)`
    static func goodsListCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsListCollectionViewCell)
    }
    
    /// `UINib(name: "GoodsTableViewCell", in: bundle)`
    static func goodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsTableViewCell)
    }
    
    /// `UINib(name: "GroupTableViewCell", in: bundle)`
    static func groupTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupTableViewCell)
    }
    
    /// `UINib(name: "HomWatchAdTableSectionHeaderView", in: bundle)`
    static func homWatchAdTableSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homWatchAdTableSectionHeaderView)
    }
    
    /// `UINib(name: "HomeSectionFooterView", in: bundle)`
    static func homeSectionFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSectionFooterView)
    }
    
    /// `UINib(name: "HomeSectionHeaderView", in: bundle)`
    static func homeSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeSectionHeaderView)
    }
    
    /// `UINib(name: "InputAccessoryToolbar", in: bundle)`
    static func inputAccessoryToolbar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputAccessoryToolbar)
    }
    
    /// `UINib(name: "InputAlertView", in: bundle)`
    static func inputAlertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputAlertView)
    }
    
    /// `UINib(name: "InputView", in: bundle)`
    static func inputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputView)
    }
    
    /// `UINib(name: "IntegralDetailMenuTableViewCell", in: bundle)`
    static func integralDetailMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.integralDetailMenuTableViewCell)
    }
    
    /// `UINib(name: "ListViewFirstMenuTableViewCell", in: bundle)`
    static func listViewFirstMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listViewFirstMenuTableViewCell)
    }
    
    /// `UINib(name: "ListViewSecondMenuTableViewCell", in: bundle)`
    static func listViewSecondMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listViewSecondMenuTableViewCell)
    }
    
    /// `UINib(name: "LogisticsTableViewCell", in: bundle)`
    static func logisticsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.logisticsTableViewCell)
    }
    
    /// `UINib(name: "LotteryResultView", in: bundle)`
    static func lotteryResultView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lotteryResultView)
    }
    
    /// `UINib(name: "MallGoodsTableViewCell", in: bundle)`
    static func mallGoodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mallGoodsTableViewCell)
    }
    
    /// `UINib(name: "MallHomeCheckInView", in: bundle)`
    static func mallHomeCheckInView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mallHomeCheckInView)
    }
    
    /// `UINib(name: "MallHomeHeaderView", in: bundle)`
    static func mallHomeHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mallHomeHeaderView)
    }
    
    /// `UINib(name: "MallHomeSectionHeaderView", in: bundle)`
    static func mallHomeSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mallHomeSectionHeaderView)
    }
    
    /// `UINib(name: "MyAwardTableViewCell", in: bundle)`
    static func myAwardTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myAwardTableViewCell)
    }
    
    /// `UINib(name: "MyCollectionTableViewCell", in: bundle)`
    static func myCollectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectionTableViewCell)
    }
    
    /// `UINib(name: "MyCouponSectionHeaderView", in: bundle)`
    static func myCouponSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCouponSectionHeaderView)
    }
    
    /// `UINib(name: "MyCouponTableViewCell", in: bundle)`
    static func myCouponTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCouponTableViewCell)
    }
    
    /// `UINib(name: "MyMemberTableViewCell", in: bundle)`
    static func myMemberTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myMemberTableViewCell)
    }
    
    /// `UINib(name: "MyOrderSectionFooterView", in: bundle)`
    static func myOrderSectionFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myOrderSectionFooterView)
    }
    
    /// `UINib(name: "MyOrderSectionFooterView_SE", in: bundle)`
    static func myOrderSectionFooterView_SE(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myOrderSectionFooterView_SE)
    }
    
    /// `UINib(name: "MyOrderSectionHeaderView", in: bundle)`
    static func myOrderSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myOrderSectionHeaderView)
    }
    
    /// `UINib(name: "MyOrderTableViewCell", in: bundle)`
    static func myOrderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myOrderTableViewCell)
    }
    
    /// `UINib(name: "MyPrizeTableViewCell", in: bundle)`
    static func myPrizeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myPrizeTableViewCell)
    }
    
    /// `UINib(name: "MyReservationTableViewCell", in: bundle)`
    static func myReservationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myReservationTableViewCell)
    }
    
    /// `UINib(name: "NewsTableViewCell", in: bundle)`
    static func newsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsTableViewCell)
    }
    
    /// `UINib(name: "NoneBackgroundView", in: bundle)`
    static func noneBackgroundView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noneBackgroundView)
    }
    
    /// `UINib(name: "NoneBindUserView", in: bundle)`
    static func noneBindUserView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noneBindUserView)
    }
    
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    
    /// `UINib(name: "OfflineEventTableViewCell", in: bundle)`
    static func offlineEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offlineEventTableViewCell)
    }
    
    /// `UINib(name: "OfflineEventTableViewCell_SE", in: bundle)`
    static func offlineEventTableViewCell_SE(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offlineEventTableViewCell_SE)
    }
    
    /// `UINib(name: "OnlineEventTableViewCell", in: bundle)`
    static func onlineEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onlineEventTableViewCell)
    }
    
    /// `UINib(name: "OrderAddressTableViewCell", in: bundle)`
    static func orderAddressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderAddressTableViewCell)
    }
    
    /// `UINib(name: "OrderConsumeTableViewCell", in: bundle)`
    static func orderConsumeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderConsumeTableViewCell)
    }
    
    /// `UINib(name: "OrderDeliveryTableViewCell", in: bundle)`
    static func orderDeliveryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDeliveryTableViewCell)
    }
    
    /// `UINib(name: "OrderGoodsSectionFooterView", in: bundle)`
    static func orderGoodsSectionFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderGoodsSectionFooterView)
    }
    
    /// `UINib(name: "OrderGoodsSectionHeaderView", in: bundle)`
    static func orderGoodsSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderGoodsSectionHeaderView)
    }
    
    /// `UINib(name: "OrderGoodsTableViewCell", in: bundle)`
    static func orderGoodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderGoodsTableViewCell)
    }
    
    /// `UINib(name: "OrderInfoTableViewCell", in: bundle)`
    static func orderInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderInfoTableViewCell)
    }
    
    /// `UINib(name: "OrderSubmitSuccessTableViewCell", in: bundle)`
    static func orderSubmitSuccessTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSubmitSuccessTableViewCell)
    }
    
    /// `UINib(name: "PrizeGoodsView", in: bundle)`
    static func prizeGoodsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prizeGoodsView)
    }
    
    /// `UINib(name: "PrizePoolView", in: bundle)`
    static func prizePoolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prizePoolView)
    }
    
    /// `UINib(name: "PrizeTableViewCell", in: bundle)`
    static func prizeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.prizeTableViewCell)
    }
    
    /// `UINib(name: "RankListTableViewCell", in: bundle)`
    static func rankListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rankListTableViewCell)
    }
    
    /// `UINib(name: "RefundFlowView", in: bundle)`
    static func refundFlowView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.refundFlowView)
    }
    
    /// `UINib(name: "RegionChoiceToolView", in: bundle)`
    static func regionChoiceToolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.regionChoiceToolView)
    }
    
    /// `UINib(name: "SaleGoodsView", in: bundle)`
    static func saleGoodsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saleGoodsView)
    }
    
    /// `UINib(name: "ShopAddressTableViewCell", in: bundle)`
    static func shopAddressTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopAddressTableViewCell)
    }
    
    /// `UINib(name: "ShopAuthTableViewCell", in: bundle)`
    static func shopAuthTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopAuthTableViewCell)
    }
    
    /// `UINib(name: "ShopDetailSectionHeaderView", in: bundle)`
    static func shopDetailSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopDetailSectionHeaderView)
    }
    
    /// `UINib(name: "ShopDetailTableViewCell", in: bundle)`
    static func shopDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopDetailTableViewCell)
    }
    
    /// `UINib(name: "ShoppingCatGoodsView", in: bundle)`
    static func shoppingCatGoodsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shoppingCatGoodsView)
    }
    
    /// `UINib(name: "ShoppingGoodsEventTableViewCell", in: bundle)`
    static func shoppingGoodsEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shoppingGoodsEventTableViewCell)
    }
    
    /// `UINib(name: "ShoppingGoodsTableViewCell", in: bundle)`
    static func shoppingGoodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shoppingGoodsTableViewCell)
    }
    
    /// `UINib(name: "ShoppingSectionHeaderView", in: bundle)`
    static func shoppingSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shoppingSectionHeaderView)
    }
    
    /// `UINib(name: "ShortcutsTableViewCell", in: bundle)`
    static func shortcutsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shortcutsTableViewCell)
    }
    
    /// `UINib(name: "ShortcutsViewCell", in: bundle)`
    static func shortcutsViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shortcutsViewCell)
    }
    
    /// `UINib(name: "StackButtonView", in: bundle)`
    static func stackButtonView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stackButtonView)
    }
    
    /// `UINib(name: "SubmitOrderSectionFooterView", in: bundle)`
    static func submitOrderSectionFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.submitOrderSectionFooterView)
    }
    
    /// `UINib(name: "SubmitOrderSectionHeaderView", in: bundle)`
    static func submitOrderSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.submitOrderSectionHeaderView)
    }
    
    /// `UINib(name: "SubmitOrderTableViewCell", in: bundle)`
    static func submitOrderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.submitOrderTableViewCell)
    }
    
    /// `UINib(name: "TrendEventGoodsTableViewCell", in: bundle)`
    static func trendEventGoodsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trendEventGoodsTableViewCell)
    }
    
    /// `UINib(name: "TrendEventTableViewCell", in: bundle)`
    static func trendEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.trendEventTableViewCell)
    }
    
    /// `UINib(name: "WinInfoView", in: bundle)`
    static func winInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.winInfoView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 70 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AdvertTableViewCell`.
    static let advertTableViewCell: Rswift.ReuseIdentifier<AdvertTableViewCell> = Rswift.ReuseIdentifier(identifier: "AdvertTableViewCell")
    /// Reuse identifier `AnswerQuestionTableViewCell`.
    static let answerQuestionTableViewCell: Rswift.ReuseIdentifier<AnswerQuestionTableViewCell> = Rswift.ReuseIdentifier(identifier: "AnswerQuestionTableViewCell")
    /// Reuse identifier `AppraiseTableViewCell`.
    static let appraiseTableViewCell: Rswift.ReuseIdentifier<AppraiseTableViewCell> = Rswift.ReuseIdentifier(identifier: "AppraiseTableViewCell")
    /// Reuse identifier `AwardRecordTableViewCell`.
    static let awardRecordTableViewCell: Rswift.ReuseIdentifier<AwardRecordTableViewCell> = Rswift.ReuseIdentifier(identifier: "AwardRecordTableViewCell")
    /// Reuse identifier `Bank.BrandZoneTableViewCell`.
    static let bankBrandZoneTableViewCell: Rswift.ReuseIdentifier<BrandZoneTableViewCell> = Rswift.ReuseIdentifier(identifier: "Bank.BrandZoneTableViewCell")
    /// Reuse identifier `Bank.MallGoodsTableViewCell`.
    static let bankMallGoodsTableViewCell: Rswift.ReuseIdentifier<MallGoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "Bank.MallGoodsTableViewCell")
    /// Reuse identifier `Bank.TrendEventTableViewCell`.
    static let bankTrendEventTableViewCell: Rswift.ReuseIdentifier<TrendEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "Bank.TrendEventTableViewCell")
    /// Reuse identifier `BankCardTableViewCell`.
    static let bankCardTableViewCell: Rswift.ReuseIdentifier<BankCardTableViewCell> = Rswift.ReuseIdentifier(identifier: "BankCardTableViewCell")
    /// Reuse identifier `BrandDetailCollectionReusableView`.
    static let brandDetailCollectionReusableView: Rswift.ReuseIdentifier<BrandDetailCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "BrandDetailCollectionReusableView")
    /// Reuse identifier `BrandDetailMoreTableViewCell`.
    static let brandDetailMoreTableViewCell: Rswift.ReuseIdentifier<BrandDetailMoreTableViewCell> = Rswift.ReuseIdentifier(identifier: "BrandDetailMoreTableViewCell")
    /// Reuse identifier `BrandTableViewCell`.
    static let brandTableViewCell: Rswift.ReuseIdentifier<BrandTableViewCell> = Rswift.ReuseIdentifier(identifier: "BrandTableViewCell")
    /// Reuse identifier `ChooseCardTableViewCell`.
    static let chooseCardTableViewCell: Rswift.ReuseIdentifier<ChooseCardTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChooseCardTableViewCell")
    /// Reuse identifier `ChoosePaymentAddNewCardCell`.
    static let choosePaymentAddNewCardCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ChoosePaymentAddNewCardCell")
    /// Reuse identifier `ChoosePaymentTableViewCell`.
    static let choosePaymentTableViewCell: Rswift.ReuseIdentifier<ChoosePaymentTableViewCell> = Rswift.ReuseIdentifier(identifier: "ChoosePaymentTableViewCell")
    /// Reuse identifier `CityActivityCollectionViewCell`.
    static let cityActivityCollectionViewCell: Rswift.ReuseIdentifier<CityActivityCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CityActivityCollectionViewCell")
    /// Reuse identifier `ClassiftionCollectionViewCell`.
    static let classiftionCollectionViewCell: Rswift.ReuseIdentifier<ClassiftionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ClassiftionCollectionViewCell")
    /// Reuse identifier `CreditTableViewCell`.
    static let creditTableViewCell: Rswift.ReuseIdentifier<CreditTableViewCell> = Rswift.ReuseIdentifier(identifier: "CreditTableViewCell")
    /// Reuse identifier `DetailTableViewCell`.
    static let detailTableViewCell: Rswift.ReuseIdentifier<DetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "DetailTableViewCell")
    /// Reuse identifier `DiscountListTableViewCell`.
    static let discountListTableViewCell: Rswift.ReuseIdentifier<DiscountListTableViewCell> = Rswift.ReuseIdentifier(identifier: "DiscountListTableViewCell")
    /// Reuse identifier `DiscountTableViewCell`.
    static let discountTableViewCell: Rswift.ReuseIdentifier<DiscountTableViewCell> = Rswift.ReuseIdentifier(identifier: "DiscountTableViewCell")
    /// Reuse identifier `ExchangeRecordTableViewCell`.
    static let exchangeRecordTableViewCell: Rswift.ReuseIdentifier<ExchangeRecordTableViewCell> = Rswift.ReuseIdentifier(identifier: "ExchangeRecordTableViewCell")
    /// Reuse identifier `FeatureEventTableViewCellID`.
    static let featureEventTableViewCellID: Rswift.ReuseIdentifier<FeatureEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "FeatureEventTableViewCellID")
    /// Reuse identifier `FeatureGoodsCollectionCell`.
    static let featureGoodsCollectionCell: Rswift.ReuseIdentifier<FeatureGoodsCollectionCell> = Rswift.ReuseIdentifier(identifier: "FeatureGoodsCollectionCell")
    /// Reuse identifier `FeatureGoodsTableViewCellID`.
    static let featureGoodsTableViewCellID: Rswift.ReuseIdentifier<FeatureGoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "FeatureGoodsTableViewCellID")
    /// Reuse identifier `GoodsCollectionViewCell`.
    static let goodsCollectionViewCell: Rswift.ReuseIdentifier<GoodsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsCollectionViewCell")
    /// Reuse identifier `GoodsListCollectionViewCell`.
    static let goodsListCollectionViewCell: Rswift.ReuseIdentifier<GoodsListCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsListCollectionViewCell")
    /// Reuse identifier `GoodsTableViewCell`.
    static let goodsTableViewCell: Rswift.ReuseIdentifier<GoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "GoodsTableViewCell")
    /// Reuse identifier `GroupTableViewCell`.
    static let groupTableViewCell: Rswift.ReuseIdentifier<GroupTableViewCell> = Rswift.ReuseIdentifier(identifier: "GroupTableViewCell")
    /// Reuse identifier `ListViewFirstMenuTableViewCell`.
    static let listViewFirstMenuTableViewCell: Rswift.ReuseIdentifier<ListViewFirstMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListViewFirstMenuTableViewCell")
    /// Reuse identifier `ListViewSecondMenuTableViewCell`.
    static let listViewSecondMenuTableViewCell: Rswift.ReuseIdentifier<ListViewSecondMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListViewSecondMenuTableViewCell")
    /// Reuse identifier `LogisticsTableViewCell`.
    static let logisticsTableViewCell: Rswift.ReuseIdentifier<LogisticsTableViewCell> = Rswift.ReuseIdentifier(identifier: "LogisticsTableViewCell")
    /// Reuse identifier `MyAwardTableViewCell`.
    static let myAwardTableViewCell: Rswift.ReuseIdentifier<MyAwardTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyAwardTableViewCell")
    /// Reuse identifier `MyOrderTableViewCell`.
    static let myOrderTableViewCell: Rswift.ReuseIdentifier<MyOrderTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyOrderTableViewCell")
    /// Reuse identifier `MyPrizeTableViewCell`.
    static let myPrizeTableViewCell: Rswift.ReuseIdentifier<MyPrizeTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyPrizeTableViewCell")
    /// Reuse identifier `NotificationTableViewCell`.
    static let notificationTableViewCell: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "NotificationTableViewCell")
    /// Reuse identifier `OfflineEventTableViewCell`.
    static let offlineEventTableViewCell: Rswift.ReuseIdentifier<OfflineEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "OfflineEventTableViewCell")
    /// Reuse identifier `OnlineEventTableViewCell`.
    static let onlineEventTableViewCell: Rswift.ReuseIdentifier<OnlineEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "OnlineEventTableViewCell")
    /// Reuse identifier `OrderAddressTableViewCell`.
    static let orderAddressTableViewCell: Rswift.ReuseIdentifier<OrderAddressTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderAddressTableViewCell")
    /// Reuse identifier `OrderConsumeTableViewCell`.
    static let orderConsumeTableViewCell: Rswift.ReuseIdentifier<OrderConsumeTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderConsumeTableViewCell")
    /// Reuse identifier `OrderDeliveryTableViewCell`.
    static let orderDeliveryTableViewCell: Rswift.ReuseIdentifier<OrderDeliveryTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderDeliveryTableViewCell")
    /// Reuse identifier `OrderGoodsTableViewCell`.
    static let orderGoodsTableViewCell: Rswift.ReuseIdentifier<OrderGoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderGoodsTableViewCell")
    /// Reuse identifier `OrderInfoTableViewCell`.
    static let orderInfoTableViewCell: Rswift.ReuseIdentifier<OrderInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderInfoTableViewCell")
    /// Reuse identifier `OrderSubmitSuccessTableViewCell`.
    static let orderSubmitSuccessTableViewCell: Rswift.ReuseIdentifier<OrderSubmitSuccessTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderSubmitSuccessTableViewCell")
    /// Reuse identifier `PrizeTableViewCell`.
    static let prizeTableViewCell: Rswift.ReuseIdentifier<PrizeTableViewCell> = Rswift.ReuseIdentifier(identifier: "PrizeTableViewCell")
    /// Reuse identifier `QuickMenuCollectionCell`.
    static let quickMenuCollectionCell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "QuickMenuCollectionCell")
    /// Reuse identifier `RankListTableViewCell`.
    static let rankListTableViewCell: Rswift.ReuseIdentifier<RankListTableViewCell> = Rswift.ReuseIdentifier(identifier: "RankListTableViewCell")
    /// Reuse identifier `SameActivityTableViewCell`.
    static let sameActivityTableViewCell: Rswift.ReuseIdentifier<CityActivityTableViewCell> = Rswift.ReuseIdentifier(identifier: "SameActivityTableViewCell")
    /// Reuse identifier `ShopAuthTableViewCell`.
    static let shopAuthTableViewCell: Rswift.ReuseIdentifier<ShopAuthTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShopAuthTableViewCell")
    /// Reuse identifier `ShoppingGoodsEventTableViewCell`.
    static let shoppingGoodsEventTableViewCell: Rswift.ReuseIdentifier<ShoppingGoodsEventTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShoppingGoodsEventTableViewCell")
    /// Reuse identifier `ShortcutsTableViewCell`.
    static let shortcutsTableViewCell: Rswift.ReuseIdentifier<ShortcutsTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShortcutsTableViewCell")
    /// Reuse identifier `ShortcutsViewCell`.
    static let shortcutsViewCell: Rswift.ReuseIdentifier<ShortcutsViewCell> = Rswift.ReuseIdentifier(identifier: "ShortcutsViewCell")
    /// Reuse identifier `SubmitOrderTableViewCell`.
    static let submitOrderTableViewCell: Rswift.ReuseIdentifier<SubmitOrderTableViewCell> = Rswift.ReuseIdentifier(identifier: "SubmitOrderTableViewCell")
    /// Reuse identifier `aboutUsCellID`.
    static let aboutUsCellID: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "aboutUsCellID")
    /// Reuse identifier `accountCellID`.
    static let accountCellID: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "accountCellID")
    /// Reuse identifier `addressManagementCellID`.
    static let addressManagementCellID: Rswift.ReuseIdentifier<AddressManagementTableViewCell> = Rswift.ReuseIdentifier(identifier: "addressManagementCellID")
    /// Reuse identifier `centerSetCellID`.
    static let centerSetCellID: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "centerSetCellID")
    /// Reuse identifier `collectionHeader`.
    static let collectionHeader: Rswift.ReuseIdentifier<GoodsListCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "collectionHeader")
    /// Reuse identifier `footer`.
    static let footer: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "footer")
    /// Reuse identifier `header`.
    static let header: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "header")
    /// Reuse identifier `integralDetailMenuTableViewCellID`.
    static let integralDetailMenuTableViewCellID: Rswift.ReuseIdentifier<IntegralDetailMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "integralDetailMenuTableViewCellID")
    /// Reuse identifier `myCollectionTableViewCellID`.
    static let myCollectionTableViewCellID: Rswift.ReuseIdentifier<MyCollectionTableViewCell> = Rswift.ReuseIdentifier(identifier: "myCollectionTableViewCellID")
    /// Reuse identifier `myCouponTableViewCellID`.
    static let myCouponTableViewCellID: Rswift.ReuseIdentifier<MyCouponTableViewCell> = Rswift.ReuseIdentifier(identifier: "myCouponTableViewCellID")
    /// Reuse identifier `myMemberCellID`.
    static let myMemberCellID: Rswift.ReuseIdentifier<MyMemberTableViewCell> = Rswift.ReuseIdentifier(identifier: "myMemberCellID")
    /// Reuse identifier `myReservationCellID`.
    static let myReservationCellID: Rswift.ReuseIdentifier<MyReservationTableViewCell> = Rswift.ReuseIdentifier(identifier: "myReservationCellID")
    /// Reuse identifier `newsMenuCellID`.
    static let newsMenuCellID: Rswift.ReuseIdentifier<NewsTableViewCell> = Rswift.ReuseIdentifier(identifier: "newsMenuCellID")
    /// Reuse identifier `sectionHeader`.
    static let sectionHeader: Rswift.ReuseIdentifier<ClassiftionSectionHeaderView> = Rswift.ReuseIdentifier(identifier: "sectionHeader")
    /// Reuse identifier `shopAddressTableViewCellID`.
    static let shopAddressTableViewCellID: Rswift.ReuseIdentifier<ShopAddressTableViewCell> = Rswift.ReuseIdentifier(identifier: "shopAddressTableViewCellID")
    /// Reuse identifier `shopDetailTableViewCellID`.
    static let shopDetailTableViewCellID: Rswift.ReuseIdentifier<ShopDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "shopDetailTableViewCellID")
    /// Reuse identifier `shoppingGoodsTableViewCellID`.
    static let shoppingGoodsTableViewCellID: Rswift.ReuseIdentifier<ShoppingGoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "shoppingGoodsTableViewCellID")
    /// Reuse identifier `trendEventGoodsTableViewCell`.
    static let trendEventGoodsTableViewCell: Rswift.ReuseIdentifier<TrendEventGoodsTableViewCell> = Rswift.ReuseIdentifier(identifier: "trendEventGoodsTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 65 view controllers.
  struct segue {
    /// This struct is generated for `AddMemberViewController`, and contains static references to 1 segues.
    struct addMemberViewController {
      /// Segue identifier `showHelpVC`.
      static let showHelpVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddMemberViewController, HelpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHelpVC")
      
      /// Optionally returns a typed version of segue `showHelpVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHelpVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddMemberViewController, HelpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addMemberViewController.showHelpVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddressManagementTableViewController`, and contains static references to 2 segues.
    struct addressManagementTableViewController {
      /// Segue identifier `showAddNewAddressVC`.
      static let showAddNewAddressVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddressManagementTableViewController, AddNewAddressTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAddNewAddressVC")
      /// Segue identifier `showEditAddressVC`.
      static let showEditAddressVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddressManagementTableViewController, EditAddressTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEditAddressVC")
      
      /// Optionally returns a typed version of segue `showAddNewAddressVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddNewAddressVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddressManagementTableViewController, AddNewAddressTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addressManagementTableViewController.showAddNewAddressVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showEditAddressVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEditAddressVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddressManagementTableViewController, EditAddressTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addressManagementTableViewController.showEditAddressVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AdvertDetailViewController`, and contains static references to 1 segues.
    struct advertDetailViewController {
      /// Segue identifier `showQuestionVC`.
      static let showQuestionVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AdvertDetailViewController, AnswerQuestionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showQuestionVC")
      
      /// Optionally returns a typed version of segue `showQuestionVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showQuestionVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AdvertDetailViewController, AnswerQuestionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.advertDetailViewController.showQuestionVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AdvertViewController`, and contains static references to 1 segues.
    struct advertViewController {
      /// Segue identifier `showAdvertDetailVC`.
      static let showAdvertDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AdvertViewController, AdvertDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAdvertDetailVC")
      
      /// Optionally returns a typed version of segue `showAdvertDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAdvertDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AdvertViewController, AdvertDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.advertViewController.showAdvertDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AllClassificationViewController`, and contains static references to 1 segues.
    struct allClassificationViewController {
      /// Segue identifier `showGoodsListVC`.
      static let showGoodsListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AllClassificationViewController, GoodsListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsListVC")
      
      /// Optionally returns a typed version of segue `showGoodsListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AllClassificationViewController, GoodsListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.allClassificationViewController.showGoodsListVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AnswerQuestionViewController`, and contains static references to 2 segues.
    struct answerQuestionViewController {
      /// Segue identifier `unwindAnswerSuccess`.
      static let unwindAnswerSuccess: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AnswerQuestionViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindAnswerSuccess")
      /// Segue identifier `unwindFromAnswer`.
      static let unwindFromAnswer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AnswerQuestionViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindFromAnswer")
      
      /// Optionally returns a typed version of segue `unwindAnswerSuccess`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindAnswerSuccess(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AnswerQuestionViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.answerQuestionViewController.unwindAnswerSuccess, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindFromAnswer`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindFromAnswer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AnswerQuestionViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.answerQuestionViewController.unwindFromAnswer, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `BindCardViewController`, and contains static references to 2 segues.
    struct bindCardViewController {
      /// Segue identifier `showCardsListVC`.
      static let showCardsListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BindCardViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCardsListVC")
      /// Segue identifier `showPayViewVC`.
      static let showPayViewVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BindCardViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPayViewVC")
      
      /// Optionally returns a typed version of segue `showCardsListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCardsListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BindCardViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bindCardViewController.showCardsListVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showPayViewVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPayViewVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BindCardViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.bindCardViewController.showPayViewVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `BrandDetailViewController`, and contains static references to 3 segues.
    struct brandDetailViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BrandDetailViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showSearchVC`.
      static let showSearchVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BrandDetailViewController, SearchGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSearchVC")
      /// Segue identifier `showShopDetailVC`.
      static let showShopDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BrandDetailViewController, ShopDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showShopDetailVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BrandDetailViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.brandDetailViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSearchVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSearchVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BrandDetailViewController, SearchGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.brandDetailViewController.showSearchVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showShopDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showShopDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BrandDetailViewController, ShopDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.brandDetailViewController.showShopDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CardLogoutViewController`, and contains static references to 1 segues.
    struct cardLogoutViewController {
      /// Segue identifier `showCardListVC`.
      static let showCardListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CardLogoutViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCardListVC")
      
      /// Optionally returns a typed version of segue `showCardListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCardListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CardLogoutViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cardLogoutViewController.showCardListVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CardsListViewController`, and contains static references to 1 segues.
    struct cardsListViewController {
      /// Segue identifier `showBindCardVC`.
      static let showBindCardVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CardsListViewController, BindCardViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBindCardVC")
      
      /// Optionally returns a typed version of segue `showBindCardVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBindCardVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CardsListViewController, BindCardViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cardsListViewController.showBindCardVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ChoosePaymentViewController`, and contains static references to 1 segues.
    struct choosePaymentViewController {
      /// Segue identifier `unwindOrderSuccessFromPay:`.
      static let unwindOrderSuccessFromPay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ChoosePaymentViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindOrderSuccessFromPay:")
      
      /// Optionally returns a typed version of segue `unwindOrderSuccessFromPay:`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindOrderSuccessFromPay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ChoosePaymentViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.choosePaymentViewController.unwindOrderSuccessFromPay, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ContributePointViewController`, and contains static references to 1 segues.
    struct contributePointViewController {
      /// Segue identifier `showApplyUserVC`.
      static let showApplyUserVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ContributePointViewController, ApplyUserViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showApplyUserVC")
      
      /// Optionally returns a typed version of segue `showApplyUserVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showApplyUserVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ContributePointViewController, ApplyUserViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.contributePointViewController.showApplyUserVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CouponDetailViewController`, and contains static references to 2 segues.
    struct couponDetailViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CouponDetailViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showRefundVC`.
      static let showRefundVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CouponDetailViewController, RefundServiceTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CouponDetailViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.couponDetailViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CouponDetailViewController, RefundServiceTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.couponDetailViewController.showRefundVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DailyTaskViewController`, and contains static references to 1 segues.
    struct dailyTaskViewController {
      /// Segue identifier `showTaskDetailVC`.
      static let showTaskDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DailyTaskViewController, DailyTaskDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showTaskDetailVC")
      
      /// Optionally returns a typed version of segue `showTaskDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTaskDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DailyTaskViewController, DailyTaskDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.dailyTaskViewController.showTaskDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DebtDetailViewController`, and contains static references to 1 segues.
    struct debtDetailViewController {
      /// Segue identifier `showRecordFilterVC`.
      static let showRecordFilterVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DebtDetailViewController, RecordFilterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRecordFilterVC")
      
      /// Optionally returns a typed version of segue `showRecordFilterVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRecordFilterVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DebtDetailViewController, RecordFilterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.debtDetailViewController.showRecordFilterVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ExchangeRecordViewController`, and contains static references to 1 segues.
    struct exchangeRecordViewController {
      /// Segue identifier `showExchangeDetailVC`.
      static let showExchangeDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ExchangeRecordViewController, ExchangeDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showExchangeDetailVC")
      
      /// Optionally returns a typed version of segue `showExchangeDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showExchangeDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ExchangeRecordViewController, ExchangeDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.exchangeRecordViewController.showExchangeDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FeedbackViewController`, and contains static references to 1 segues.
    struct feedbackViewController {
      /// Segue identifier `showPickerView`.
      static let showPickerView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FeedbackViewController, PickerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPickerView")
      
      /// Optionally returns a typed version of segue `showPickerView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPickerView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FeedbackViewController, PickerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.feedbackViewController.showPickerView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FindPayPasswordCheckTableViewController`, and contains static references to 1 segues.
    struct findPayPasswordCheckTableViewController {
      /// Segue identifier `showFindPayPasswordSetVC`.
      static let showFindPayPasswordSetVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FindPayPasswordCheckTableViewController, FindPayPasswordSetTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showFindPayPasswordSetVC")
      
      /// Optionally returns a typed version of segue `showFindPayPasswordSetVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFindPayPasswordSetVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FindPayPasswordCheckTableViewController, FindPayPasswordSetTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.findPayPasswordCheckTableViewController.showFindPayPasswordSetVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FindPayPasswordSetTableViewController`, and contains static references to 1 segues.
    struct findPayPasswordSetTableViewController {
      /// Segue identifier `showSettingVC`.
      static let showSettingVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FindPayPasswordSetTableViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettingVC")
      
      /// Optionally returns a typed version of segue `showSettingVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettingVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FindPayPasswordSetTableViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.findPayPasswordSetTableViewController.showSettingVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `GoodsDetailViewController`, and contains static references to 4 segues.
    struct goodsDetailViewController {
      /// Segue identifier `showSaleGoodsVC`.
      static let showSaleGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsDetailViewController, SalesGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSaleGoodsVC")
      /// Segue identifier `showShopListVC`.
      static let showShopListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsDetailViewController, ShopListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showShopListVC")
      /// Segue identifier `showShoppingCartVC`.
      static let showShoppingCartVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsDetailViewController, ShoppingCartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showShoppingCartVC")
      /// Segue identifier `showSubmitOrderVC`.
      static let showSubmitOrderVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsDetailViewController, SubmitOrderViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSubmitOrderVC")
      
      /// Optionally returns a typed version of segue `showSaleGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSaleGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsDetailViewController, SalesGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsDetailViewController.showSaleGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showShopListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showShopListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsDetailViewController, ShopListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsDetailViewController.showShopListVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showShoppingCartVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showShoppingCartVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsDetailViewController, ShoppingCartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsDetailViewController.showShoppingCartVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSubmitOrderVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubmitOrderVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsDetailViewController, SubmitOrderViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsDetailViewController.showSubmitOrderVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `GoodsListViewController`, and contains static references to 3 segues.
    struct goodsListViewController {
      /// Segue identifier `showCartVC`.
      static let showCartVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsListViewController, ShoppingCartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCartVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsListViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showSearcheGoodsVC`.
      static let showSearcheGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GoodsListViewController, SearchGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSearcheGoodsVC")
      
      /// Optionally returns a typed version of segue `showCartVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCartVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsListViewController, ShoppingCartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsListViewController.showCartVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsListViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsListViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSearcheGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSearcheGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GoodsListViewController, SearchGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.goodsListViewController.showSearcheGoodsVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HotGoodsViewController`, and contains static references to 1 segues.
    struct hotGoodsViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HotGoodsViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HotGoodsViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.hotGoodsViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `IntegralTableViewController`, and contains static references to 5 segues.
    struct integralTableViewController {
      /// Segue identifier `showExchangeVC`.
      static let showExchangeVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntegralTableViewController, ExchangeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showExchangeVC")
      /// Segue identifier `showIntegralDetailVC`.
      static let showIntegralDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntegralTableViewController, IntegralDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showIntegralDetailVC")
      /// Segue identifier `showLotteryVC`.
      static let showLotteryVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntegralTableViewController, LotteryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showLotteryVC")
      /// Segue identifier `showMyEventVC`.
      static let showMyEventVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntegralTableViewController, MyEventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMyEventVC")
      /// Segue identifier `showMyTaskVC`.
      static let showMyTaskVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, IntegralTableViewController, MyTaskViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMyTaskVC")
      
      /// Optionally returns a typed version of segue `showExchangeVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showExchangeVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntegralTableViewController, ExchangeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.integralTableViewController.showExchangeVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showIntegralDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showIntegralDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntegralTableViewController, IntegralDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.integralTableViewController.showIntegralDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showLotteryVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLotteryVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntegralTableViewController, LotteryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.integralTableViewController.showLotteryVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showMyEventVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMyEventVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntegralTableViewController, MyEventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.integralTableViewController.showMyEventVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showMyTaskVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMyTaskVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, IntegralTableViewController, MyTaskViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.integralTableViewController.showMyTaskVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LifeHomeViewController`, and contains static references to 2 segues.
    struct lifeHomeViewController {
      /// Segue identifier `showNotificationVC`.
      static let showNotificationVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LifeHomeViewController, NotificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showNotificationVC")
      /// Segue identifier `showScanVC`.
      static let showScanVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LifeHomeViewController, ScanQRViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showScanVC")
      
      /// Optionally returns a typed version of segue `showNotificationVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotificationVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LifeHomeViewController, NotificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.lifeHomeViewController.showNotificationVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showScanVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showScanVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LifeHomeViewController, ScanQRViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.lifeHomeViewController.showScanVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 3 segues.
    struct loginViewController {
      /// Segue identifier `showHelpVC`.
      static let showHelpVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, HelpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHelpVC")
      /// Segue identifier `showPayPassVC`.
      static let showPayPassVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showPayPassVC")
      /// Segue identifier `showRegisterVC`.
      static let showRegisterVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRegisterVC")
      
      /// Optionally returns a typed version of segue `showHelpVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHelpVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, HelpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.showHelpVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showPayPassVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPayPassVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.showPayPassVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRegisterVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRegisterVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, RegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.showRegisterVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LotteryViewController`, and contains static references to 1 segues.
    struct lotteryViewController {
      /// Segue identifier `showPrizeDetailVC`.
      static let showPrizeDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LotteryViewController, PrizeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPrizeDetailVC")
      
      /// Optionally returns a typed version of segue `showPrizeDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPrizeDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LotteryViewController, PrizeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.lotteryViewController.showPrizeDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MallHomeViewController`, and contains static references to 14 segues.
    struct mallHomeViewController {
      /// Segue identifier `showAllClassificationVC`.
      static let showAllClassificationVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, AllClassificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAllClassificationVC")
      /// Segue identifier `showBrandDetialVC`.
      static let showBrandDetialVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, BrandDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBrandDetialVC")
      /// Segue identifier `showCartVC`.
      static let showCartVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, ShoppingCartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCartVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showGoodsListVC`.
      static let showGoodsListVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, GoodsListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsListVC")
      /// Segue identifier `showHotGoodsVC`.
      static let showHotGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, HotGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHotGoodsVC")
      /// Segue identifier `showLotteryVC`.
      static let showLotteryVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, LotteryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showLotteryVC")
      /// Segue identifier `showMoreBrandVC`.
      static let showMoreBrandVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, MoreBrandsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMoreBrandVC")
      /// Segue identifier `showNewsHomeVC`.
      static let showNewsHomeVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, NewsHomeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showNewsHomeVC")
      /// Segue identifier `showOfflineEventDetailVC`.
      static let showOfflineEventDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, OfflineEventDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOfflineEventDetailVC")
      /// Segue identifier `showOfflineEvent`.
      static let showOfflineEvent: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, OfflineEventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOfflineEvent")
      /// Segue identifier `showSalesGoodsVC`.
      static let showSalesGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, SalesGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSalesGoodsVC")
      /// Segue identifier `showSearchGoodsVC`.
      static let showSearchGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, SearchGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSearchGoodsVC")
      /// Segue identifier `showTrendEvent`.
      static let showTrendEvent: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MallHomeViewController, TrendEventViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showTrendEvent")
      
      /// Optionally returns a typed version of segue `showAllClassificationVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAllClassificationVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, AllClassificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showAllClassificationVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showBrandDetialVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBrandDetialVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, BrandDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showBrandDetialVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showCartVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCartVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, ShoppingCartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showCartVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsListVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsListVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, GoodsListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showGoodsListVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHotGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHotGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, HotGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showHotGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showLotteryVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLotteryVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, LotteryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showLotteryVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showMoreBrandVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMoreBrandVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, MoreBrandsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showMoreBrandVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showNewsHomeVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNewsHomeVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, NewsHomeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showNewsHomeVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOfflineEventDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOfflineEventDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, OfflineEventDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showOfflineEventDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOfflineEvent`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOfflineEvent(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, OfflineEventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showOfflineEvent, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSalesGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSalesGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, SalesGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showSalesGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSearchGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSearchGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, SearchGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showSearchGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showTrendEvent`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTrendEvent(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MallHomeViewController, TrendEventViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mallHomeViewController.showTrendEvent, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MoreBrandsViewController`, and contains static references to 2 segues.
    struct moreBrandsViewController {
      /// Segue identifier `showBrandDetialVC`.
      static let showBrandDetialVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MoreBrandsViewController, BrandDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBrandDetialVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MoreBrandsViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showBrandDetialVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBrandDetialVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MoreBrandsViewController, BrandDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.moreBrandsViewController.showBrandDetialVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MoreBrandsViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.moreBrandsViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MoreTableViewController`, and contains static references to 1 segues.
    struct moreTableViewController {
      /// Segue identifier `showHelpVC`.
      static let showHelpVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MoreTableViewController, HelpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHelpVC")
      
      /// Optionally returns a typed version of segue `showHelpVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHelpVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MoreTableViewController, HelpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.moreTableViewController.showHelpVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyAwardViewController`, and contains static references to 2 segues.
    struct myAwardViewController {
      /// Segue identifier `showRewardDetailVC`.
      static let showRewardDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyAwardViewController, RewardDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRewardDetailVC")
      /// Segue identifier `showRewardVC`.
      static let showRewardVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyAwardViewController, RewardViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRewardVC")
      
      /// Optionally returns a typed version of segue `showRewardDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRewardDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyAwardViewController, RewardDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myAwardViewController.showRewardDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRewardVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRewardVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyAwardViewController, RewardViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myAwardViewController.showRewardVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyCollectionViewController`, and contains static references to 1 segues.
    struct myCollectionViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyCollectionViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyCollectionViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myCollectionViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyCouponViewController`, and contains static references to 1 segues.
    struct myCouponViewController {
      /// Segue identifier `showCouponDetailVC`.
      static let showCouponDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyCouponViewController, CouponDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCouponDetailVC")
      
      /// Optionally returns a typed version of segue `showCouponDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCouponDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyCouponViewController, CouponDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myCouponViewController.showCouponDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyCreditViewController`, and contains static references to 3 segues.
    struct myCreditViewController {
      /// Segue identifier `showCashPayVC`.
      static let showCashPayVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyCreditViewController, CashPayViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCashPayVC")
      /// Segue identifier `showDebtDetailVC`.
      static let showDebtDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyCreditViewController, DebtDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showDebtDetailVC")
      /// Segue identifier `showIntegralVC`.
      static let showIntegralVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyCreditViewController, IntegralPayController> = Rswift.StoryboardSegueIdentifier(identifier: "showIntegralVC")
      
      /// Optionally returns a typed version of segue `showCashPayVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCashPayVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyCreditViewController, CashPayViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myCreditViewController.showCashPayVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showDebtDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDebtDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyCreditViewController, DebtDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myCreditViewController.showDebtDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showIntegralVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showIntegralVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyCreditViewController, IntegralPayController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myCreditViewController.showIntegralVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyEventDetailViewController`, and contains static references to 1 segues.
    struct myEventDetailViewController {
      /// Segue identifier `showEventDetailVC`.
      static let showEventDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyEventDetailViewController, OfflineEventDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEventDetailVC")
      
      /// Optionally returns a typed version of segue `showEventDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyEventDetailViewController, OfflineEventDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myEventDetailViewController.showEventDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyEventViewController`, and contains static references to 1 segues.
    struct myEventViewController {
      /// Segue identifier `showMyEventDetailVC`.
      static let showMyEventDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyEventViewController, MyEventDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMyEventDetailVC")
      
      /// Optionally returns a typed version of segue `showMyEventDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMyEventDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyEventViewController, MyEventDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myEventViewController.showMyEventDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyMemberViewController`, and contains static references to 2 segues.
    struct myMemberViewController {
      /// Segue identifier `memberDetailsSegueID`.
      static let memberDetailsSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyMemberViewController, MemberDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "memberDetailsSegueID")
      /// Segue identifier `showAddNewMembeVC`.
      static let showAddNewMembeVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyMemberViewController, AddMemberViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAddNewMembeVC")
      
      /// Optionally returns a typed version of segue `memberDetailsSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func memberDetailsSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyMemberViewController, MemberDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myMemberViewController.memberDetailsSegueID, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showAddNewMembeVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddNewMembeVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyMemberViewController, AddMemberViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myMemberViewController.showAddNewMembeVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyOrderViewController`, and contains static references to 8 segues.
    struct myOrderViewController {
      /// Segue identifier `orderDetailsSegue`.
      static let orderDetailsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, OrderDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "orderDetailsSegue")
      /// Segue identifier `showAppraiseVC`.
      static let showAppraiseVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, AppraiseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAppraiseVC")
      /// Segue identifier `showRefundDetailVC`.
      static let showRefundDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, RefundDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundDetailVC")
      /// Segue identifier `showRefundGoodsVC`.
      static let showRefundGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, RefundGoodsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundGoodsVC")
      /// Segue identifier `showRefundServiceVC`.
      static let showRefundServiceVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, RefundServiceTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundServiceVC")
      /// Segue identifier `showServiceRefundDetailVC`.
      static let showServiceRefundDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, ServiceRefundDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showServiceRefundDetailVC")
      /// Segue identifier `unwindFromGoodsDetail`.
      static let unwindFromGoodsDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindFromGoodsDetail")
      /// Segue identifier `unwindFromShoppingCart`.
      static let unwindFromShoppingCart: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrderViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindFromShoppingCart")
      
      /// Optionally returns a typed version of segue `orderDetailsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderDetailsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, OrderDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.orderDetailsSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showAppraiseVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAppraiseVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, AppraiseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.showAppraiseVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, RefundDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.showRefundDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, RefundGoodsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.showRefundGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundServiceVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundServiceVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, RefundServiceTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.showRefundServiceVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showServiceRefundDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showServiceRefundDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, ServiceRefundDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.showServiceRefundDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindFromGoodsDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindFromGoodsDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.unwindFromGoodsDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindFromShoppingCart`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindFromShoppingCart(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrderViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrderViewController.unwindFromShoppingCart, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyPrizeDetailViewController`, and contains static references to 1 segues.
    struct myPrizeDetailViewController {
      /// Segue identifier `showPrizeDetailVC`.
      static let showPrizeDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyPrizeDetailViewController, PrizeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPrizeDetailVC")
      
      /// Optionally returns a typed version of segue `showPrizeDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPrizeDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyPrizeDetailViewController, PrizeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myPrizeDetailViewController.showPrizeDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyPrizeViewController`, and contains static references to 2 segues.
    struct myPrizeViewController {
      /// Segue identifier `showMyPrizeDetailVC`.
      static let showMyPrizeDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyPrizeViewController, MyPrizeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMyPrizeDetailVC")
      /// Segue identifier `showPointVC`.
      static let showPointVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyPrizeViewController, IntegralTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPointVC")
      
      /// Optionally returns a typed version of segue `showMyPrizeDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMyPrizeDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyPrizeViewController, MyPrizeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myPrizeViewController.showMyPrizeDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showPointVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPointVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyPrizeViewController, IntegralTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myPrizeViewController.showPointVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyTaskViewController`, and contains static references to 1 segues.
    struct myTaskViewController {
      /// Segue identifier `showTaskDetailVC`.
      static let showTaskDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyTaskViewController, DailyTaskDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showTaskDetailVC")
      
      /// Optionally returns a typed version of segue `showTaskDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTaskDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyTaskViewController, DailyTaskDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myTaskViewController.showTaskDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NewPasswordSetupViewController`, and contains static references to 1 segues.
    struct newPasswordSetupViewController {
      /// Segue identifier `showSettingVC`.
      static let showSettingVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewPasswordSetupViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettingVC")
      
      /// Optionally returns a typed version of segue `showSettingVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettingVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewPasswordSetupViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newPasswordSetupViewController.showSettingVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NewsHomeViewController`, and contains static references to 1 segues.
    struct newsHomeViewController {
      /// Segue identifier `newsMenuSegueID`.
      static let newsMenuSegueID: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewsHomeViewController, NewsDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "newsMenuSegueID")
      
      /// Optionally returns a typed version of segue `newsMenuSegueID`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func newsMenuSegueID(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewsHomeViewController, NewsDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newsHomeViewController.newsMenuSegueID, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NotificationViewController`, and contains static references to 1 segues.
    struct notificationViewController {
      /// Segue identifier `showMemberLinkVC`.
      static let showMemberLinkVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NotificationViewController, InviteFromMemberViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showMemberLinkVC")
      
      /// Optionally returns a typed version of segue `showMemberLinkVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMemberLinkVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NotificationViewController, InviteFromMemberViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.notificationViewController.showMemberLinkVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OfflineEventViewController`, and contains static references to 1 segues.
    struct offlineEventViewController {
      /// Segue identifier `showEventDetailVC`.
      static let showEventDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OfflineEventViewController, OfflineEventDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEventDetailVC")
      
      /// Optionally returns a typed version of segue `showEventDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEventDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OfflineEventViewController, OfflineEventDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.offlineEventViewController.showEventDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderDetailsViewController`, and contains static references to 4 segues.
    struct orderDetailsViewController {
      /// Segue identifier `showAppraiseVC`.
      static let showAppraiseVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDetailsViewController, AppraiseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAppraiseVC")
      /// Segue identifier `showCouponDetailVC`.
      static let showCouponDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDetailsViewController, CouponDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCouponDetailVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDetailsViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showGoodsRefundVC`.
      static let showGoodsRefundVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDetailsViewController, RefundGoodsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsRefundVC")
      
      /// Optionally returns a typed version of segue `showAppraiseVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAppraiseVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDetailsViewController, AppraiseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDetailsViewController.showAppraiseVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showCouponDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCouponDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDetailsViewController, CouponDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDetailsViewController.showCouponDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDetailsViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDetailsViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsRefundVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsRefundVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDetailsViewController, RefundGoodsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDetailsViewController.showGoodsRefundVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderSubmitSuccessViewController`, and contains static references to 5 segues.
    struct orderSubmitSuccessViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showOrderDetailVC`.
      static let showOrderDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, OrderDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOrderDetailVC")
      /// Segue identifier `showPaymentVC`.
      static let showPaymentVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, ChoosePaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPaymentVC")
      /// Segue identifier `showShoppingCartVC`.
      static let showShoppingCartVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showShoppingCartVC")
      /// Segue identifier `showVerityPayVC`.
      static let showVerityPayVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, VerifyPayPassViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerityPayVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderSubmitSuccessViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOrderDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOrderDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, OrderDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderSubmitSuccessViewController.showOrderDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showPaymentVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPaymentVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, ChoosePaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderSubmitSuccessViewController.showPaymentVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showShoppingCartVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showShoppingCartVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderSubmitSuccessViewController.showShoppingCartVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showVerityPayVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerityPayVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderSubmitSuccessViewController, VerifyPayPassViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderSubmitSuccessViewController.showVerityPayVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PasswordSetupViewController`, and contains static references to 1 segues.
    struct passwordSetupViewController {
      /// Segue identifier `showSetNewPasswordVC`.
      static let showSetNewPasswordVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PasswordSetupViewController, NewPasswordSetupViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSetNewPasswordVC")
      
      /// Optionally returns a typed version of segue `showSetNewPasswordVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSetNewPasswordVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PasswordSetupViewController, NewPasswordSetupViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.passwordSetupViewController.showSetNewPasswordVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PickerViewController`, and contains static references to 5 segues.
    struct pickerViewController {
      /// Segue identifier `unwindApplyUserFromPicker`.
      static let unwindApplyUserFromPicker: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindApplyUserFromPicker")
      /// Segue identifier `unwindFeedbackFromPicker`.
      static let unwindFeedbackFromPicker: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindFeedbackFromPicker")
      /// Segue identifier `unwindRefundGoodsFromPicker`.
      static let unwindRefundGoodsFromPicker: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindRefundGoodsFromPicker")
      /// Segue identifier `unwindRefundServiceFromPicker`.
      static let unwindRefundServiceFromPicker: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindRefundServiceFromPicker")
      /// Segue identifier `unwindScreenFromPicker`.
      static let unwindScreenFromPicker: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindScreenFromPicker")
      
      /// Optionally returns a typed version of segue `unwindApplyUserFromPicker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindApplyUserFromPicker(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pickerViewController.unwindApplyUserFromPicker, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindFeedbackFromPicker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindFeedbackFromPicker(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pickerViewController.unwindFeedbackFromPicker, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindRefundGoodsFromPicker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindRefundGoodsFromPicker(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pickerViewController.unwindRefundGoodsFromPicker, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindRefundServiceFromPicker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindRefundServiceFromPicker(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pickerViewController.unwindRefundServiceFromPicker, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindScreenFromPicker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindScreenFromPicker(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PickerViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.pickerViewController.unwindScreenFromPicker, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PrizeDetailViewController`, and contains static references to 2 segues.
    struct prizeDetailViewController {
      /// Segue identifier `showBrandDetailVC`.
      static let showBrandDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PrizeDetailViewController, BrandDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBrandDetailVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PrizeDetailViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showBrandDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBrandDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PrizeDetailViewController, BrandDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.prizeDetailViewController.showBrandDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PrizeDetailViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.prizeDetailViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PrizePoolViewController`, and contains static references to 1 segues.
    struct prizePoolViewController {
      /// Segue identifier `showPrizeDetailVC`.
      static let showPrizeDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PrizePoolViewController, PrizeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPrizeDetailVC")
      
      /// Optionally returns a typed version of segue `showPrizeDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPrizeDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PrizePoolViewController, PrizeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.prizePoolViewController.showPrizeDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProfileViewController`, and contains static references to 2 segues.
    struct profileViewController {
      /// Segue identifier `showDateVC`.
      static let showDateVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, PickerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showDateVC")
      /// Segue identifier `showEditNameVC`.
      static let showEditNameVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, UpdateNameViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEditNameVC")
      
      /// Optionally returns a typed version of segue `showDateVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDateVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, PickerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.showDateVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showEditNameVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEditNameVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, UpdateNameViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.showEditNameVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RefundGoodsTableViewController`, and contains static references to 2 segues.
    struct refundGoodsTableViewController {
      /// Segue identifier `showPickerView`.
      static let showPickerView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RefundGoodsTableViewController, PickerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPickerView")
      /// Segue identifier `showRefundDetailVC`.
      static let showRefundDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RefundGoodsTableViewController, RefundDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundDetailVC")
      
      /// Optionally returns a typed version of segue `showPickerView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPickerView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RefundGoodsTableViewController, PickerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.refundGoodsTableViewController.showPickerView, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RefundGoodsTableViewController, RefundDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.refundGoodsTableViewController.showRefundDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RefundServiceTableViewController`, and contains static references to 1 segues.
    struct refundServiceTableViewController {
      /// Segue identifier `showPickerView`.
      static let showPickerView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RefundServiceTableViewController, PickerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showPickerView")
      
      /// Optionally returns a typed version of segue `showPickerView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPickerView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RefundServiceTableViewController, PickerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.refundServiceTableViewController.showPickerView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegisterViewController`, and contains static references to 1 segues.
    struct registerViewController {
      /// Segue identifier `showPayPassVC`.
      static let showPayPassVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showPayPassVC")
      
      /// Optionally returns a typed version of segue `showPayPassVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPayPassVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.showPayPassVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SalesGoodsViewController`, and contains static references to 2 segues.
    struct salesGoodsViewController {
      /// Segue identifier `showDesVC`.
      static let showDesVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SalesGoodsViewController, EventDescribeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showDesVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SalesGoodsViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showDesVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDesVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SalesGoodsViewController, EventDescribeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.salesGoodsViewController.showDesVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SalesGoodsViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.salesGoodsViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchGoodsViewController`, and contains static references to 1 segues.
    struct searchGoodsViewController {
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchGoodsViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchGoodsViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchGoodsViewController.showGoodsDetailVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchOrderViewController`, and contains static references to 5 segues.
    struct searchOrderViewController {
      /// Segue identifier `showAppraiseVC`.
      static let showAppraiseVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchOrderViewController, AppraiseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAppraiseVC")
      /// Segue identifier `showOrderDetailVC`.
      static let showOrderDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchOrderViewController, OrderDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOrderDetailVC")
      /// Segue identifier `showRefundDetailVC`.
      static let showRefundDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundDetailVC")
      /// Segue identifier `showRefundGoodsVC`.
      static let showRefundGoodsVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundGoodsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundGoodsVC")
      /// Segue identifier `showRefundServiceVC`.
      static let showRefundServiceVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundServiceTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRefundServiceVC")
      
      /// Optionally returns a typed version of segue `showAppraiseVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAppraiseVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchOrderViewController, AppraiseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchOrderViewController.showAppraiseVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOrderDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOrderDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchOrderViewController, OrderDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchOrderViewController.showOrderDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchOrderViewController.showRefundDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundGoodsVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundGoodsVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundGoodsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchOrderViewController.showRefundGoodsVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRefundServiceVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRefundServiceVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchOrderViewController, RefundServiceTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchOrderViewController.showRefundServiceVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ShoppingCartViewController`, and contains static references to 4 segues.
    struct shoppingCartViewController {
      /// Segue identifier `showBrandDetailVC`.
      static let showBrandDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShoppingCartViewController, BrandDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBrandDetailVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShoppingCartViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showSaleVC`.
      static let showSaleVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShoppingCartViewController, SalesGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSaleVC")
      /// Segue identifier `showSubmitOrderVC`.
      static let showSubmitOrderVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShoppingCartViewController, SubmitOrderViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSubmitOrderVC")
      
      /// Optionally returns a typed version of segue `showBrandDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBrandDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShoppingCartViewController, BrandDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shoppingCartViewController.showBrandDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShoppingCartViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shoppingCartViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSaleVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSaleVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShoppingCartViewController, SalesGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shoppingCartViewController.showSaleVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSubmitOrderVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubmitOrderVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShoppingCartViewController, SubmitOrderViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shoppingCartViewController.showSubmitOrderVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SubmitOrderViewController`, and contains static references to 4 segues.
    struct submitOrderViewController {
      /// Segue identifier `showAddressVC`.
      static let showAddressVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubmitOrderViewController, AddressManagementTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showAddressVC")
      /// Segue identifier `showBrandDetailVC`.
      static let showBrandDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubmitOrderViewController, BrandDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showBrandDetailVC")
      /// Segue identifier `showGoodsDetailVC`.
      static let showGoodsDetailVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubmitOrderViewController, GoodsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGoodsDetailVC")
      /// Segue identifier `showOrderSuccessVC`.
      static let showOrderSuccessVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SubmitOrderViewController, OrderSubmitSuccessViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOrderSuccessVC")
      
      /// Optionally returns a typed version of segue `showAddressVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAddressVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubmitOrderViewController, AddressManagementTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.submitOrderViewController.showAddressVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showBrandDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBrandDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubmitOrderViewController, BrandDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.submitOrderViewController.showBrandDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showGoodsDetailVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGoodsDetailVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubmitOrderViewController, GoodsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.submitOrderViewController.showGoodsDetailVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOrderSuccessVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOrderSuccessVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SubmitOrderViewController, OrderSubmitSuccessViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.submitOrderViewController.showOrderSuccessVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TrendEventViewController`, and contains static references to 1 segues.
    struct trendEventViewController {
      /// Segue identifier `showSalesVC`.
      static let showSalesVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TrendEventViewController, SalesGoodsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSalesVC")
      
      /// Optionally returns a typed version of segue `showSalesVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSalesVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TrendEventViewController, SalesGoodsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.trendEventViewController.showSalesVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UpdatePayPasswordCheckViewController`, and contains static references to 2 segues.
    struct updatePayPasswordCheckViewController {
      /// Segue identifier `showFindPayPasswordVC`.
      static let showFindPayPasswordVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UpdatePayPasswordCheckViewController, FindPayPasswordCheckTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showFindPayPasswordVC")
      /// Segue identifier `showUpdatePayPasswordSetVC`.
      static let showUpdatePayPasswordSetVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UpdatePayPasswordCheckViewController, UpdatePayPasswordSetTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showUpdatePayPasswordSetVC")
      
      /// Optionally returns a typed version of segue `showFindPayPasswordVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFindPayPasswordVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UpdatePayPasswordCheckViewController, FindPayPasswordCheckTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.updatePayPasswordCheckViewController.showFindPayPasswordVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showUpdatePayPasswordSetVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUpdatePayPasswordSetVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UpdatePayPasswordCheckViewController, UpdatePayPasswordSetTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.updatePayPasswordCheckViewController.showUpdatePayPasswordSetVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UpdatePayPasswordSetTableViewController`, and contains static references to 1 segues.
    struct updatePayPasswordSetTableViewController {
      /// Segue identifier `showSettingVC`.
      static let showSettingVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UpdatePayPasswordSetTableViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettingVC")
      
      /// Optionally returns a typed version of segue `showSettingVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettingVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UpdatePayPasswordSetTableViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.updatePayPasswordSetTableViewController.showSettingVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VerifyMobileViewController`, and contains static references to 2 segues.
    struct verifyMobileViewController {
      /// Segue identifier `showSetNewPassVC`.
      static let showSetNewPassVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyMobileViewController, SetNewLoginPassViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSetNewPassVC")
      /// Segue identifier `showVerifyPayVC`.
      static let showVerifyPayVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyMobileViewController, VerifyPayPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerifyPayVC")
      
      /// Optionally returns a typed version of segue `showSetNewPassVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSetNewPassVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyMobileViewController, SetNewLoginPassViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyMobileViewController.showSetNewPassVC, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showVerifyPayVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerifyPayVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyMobileViewController, VerifyPayPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyMobileViewController.showVerifyPayVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VerifyPayPassViewController`, and contains static references to 1 segues.
    struct verifyPayPassViewController {
      /// Segue identifier `unwindOrderSuccessFromPay`.
      static let unwindOrderSuccessFromPay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyPayPassViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindOrderSuccessFromPay")
      
      /// Optionally returns a typed version of segue `unwindOrderSuccessFromPay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindOrderSuccessFromPay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyPayPassViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyPayPassViewController.unwindOrderSuccessFromPay, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VerifyPayPasswordViewController`, and contains static references to 1 segues.
    struct verifyPayPasswordViewController {
      /// Segue identifier `showSetNewLoginPassVC`.
      static let showSetNewLoginPassVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyPayPasswordViewController, SetNewLoginPassViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSetNewLoginPassVC")
      
      /// Optionally returns a typed version of segue `showSetNewLoginPassVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSetNewLoginPassVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyPayPasswordViewController, SetNewLoginPassViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyPayPasswordViewController.showSetNewLoginPassVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 21 storyboards.
  struct storyboard {
    /// Storyboard `Address`.
    static let address = _R.storyboard.address()
    /// Storyboard `Bank`.
    static let bank = _R.storyboard.bank()
    /// Storyboard `Center`.
    static let center = _R.storyboard.center()
    /// Storyboard `Container`.
    static let container = _R.storyboard.container()
    /// Storyboard `Credit`.
    static let credit = _R.storyboard.credit()
    /// Storyboard `Discount`.
    static let discount = _R.storyboard.discount()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Life`.
    static let life = _R.storyboard.life()
    /// Storyboard `Lottery`.
    static let lottery = _R.storyboard.lottery()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Mall`.
    static let mall = _R.storyboard.mall()
    /// Storyboard `More`.
    static let more = _R.storyboard.more()
    /// Storyboard `MyAward`.
    static let myAward = _R.storyboard.myAward()
    /// Storyboard `MyLife`.
    static let myLife = _R.storyboard.myLife()
    /// Storyboard `MyMember`.
    static let myMember = _R.storyboard.myMember()
    /// Storyboard `MyOrder`.
    static let myOrder = _R.storyboard.myOrder()
    /// Storyboard `MyShop`.
    static let myShop = _R.storyboard.myShop()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    /// Storyboard `Point`.
    static let point = _R.storyboard.point()
    /// Storyboard `Session`.
    static let session = _R.storyboard.session()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    
    /// `UIStoryboard(name: "Address", bundle: ...)`
    static func address(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.address)
    }
    
    /// `UIStoryboard(name: "Bank", bundle: ...)`
    static func bank(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bank)
    }
    
    /// `UIStoryboard(name: "Center", bundle: ...)`
    static func center(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.center)
    }
    
    /// `UIStoryboard(name: "Container", bundle: ...)`
    static func container(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.container)
    }
    
    /// `UIStoryboard(name: "Credit", bundle: ...)`
    static func credit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.credit)
    }
    
    /// `UIStoryboard(name: "Discount", bundle: ...)`
    static func discount(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discount)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Life", bundle: ...)`
    static func life(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.life)
    }
    
    /// `UIStoryboard(name: "Lottery", bundle: ...)`
    static func lottery(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lottery)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Mall", bundle: ...)`
    static func mall(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mall)
    }
    
    /// `UIStoryboard(name: "More", bundle: ...)`
    static func more(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.more)
    }
    
    /// `UIStoryboard(name: "MyAward", bundle: ...)`
    static func myAward(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myAward)
    }
    
    /// `UIStoryboard(name: "MyLife", bundle: ...)`
    static func myLife(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myLife)
    }
    
    /// `UIStoryboard(name: "MyMember", bundle: ...)`
    static func myMember(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myMember)
    }
    
    /// `UIStoryboard(name: "MyOrder", bundle: ...)`
    static func myOrder(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myOrder)
    }
    
    /// `UIStoryboard(name: "MyShop", bundle: ...)`
    static func myShop(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myShop)
    }
    
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    
    /// `UIStoryboard(name: "Point", bundle: ...)`
    static func point(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.point)
    }
    
    /// `UIStoryboard(name: "Session", bundle: ...)`
    static func session(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.session)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 381 localization keys.
    struct localizable {
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static let alertTitle_nil = Rswift.StringResource(key: "alertTitle_nil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static let withdraw_amount_placeholder = Rswift.StringResource(key: "withdraw_amount_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:   网络断开连接，请检查手机。 
      /// 
      /// Locales: zh-Hans
      static let hud_disconnect = Rswift.StringResource(key: "hud_disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:  加载中 
      /// 
      /// Locales: zh-Hans
      static let hud_loading = Rswift.StringResource(key: "hud_loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:  请求失败，服务器维护中 
      /// 
      /// Locales: zh-Hans
      static let hud_request_failed = Rswift.StringResource(key: "hud_request_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:  请求超时，请稍后再试。 
      /// 
      /// Locales: zh-Hans
      static let hud_request_timeout = Rswift.StringResource(key: "hud_request_timeout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:  返回
      /// 
      /// Locales: zh-Hans
      static let button_title_null_back = Rswift.StringResource(key: "button_title_null_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: %.2f元
      /// 
      /// Locales: zh-Hans
      static let mall_price1 = Rswift.StringResource(key: "mall_price1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: %@(%@)
      /// 
      /// Locales: zh-Hans
      static let bank_payment_name = Rswift.StringResource(key: "bank_payment_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: %@打赏
      /// 
      /// Locales: zh-Hans
      static let center_myward_userAward = Rswift.StringResource(key: "center_myward_userAward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: %d天%d时%d分
      /// 
      /// Locales: zh-Hans
      static let product_instock_title = Rswift.StringResource(key: "product_instock_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: %d天%d时%d分起售
      /// 
      /// Locales: zh-Hans
      static let product_coming_sub_title = Rswift.StringResource(key: "product_coming_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: Error
      /// 
      /// Locales: zh-Hans
      static let alertTitle_error = Rswift.StringResource(key: "alertTitle_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: OK
      /// 
      /// Locales: zh-Hans
      static let alertTitle_ok = Rswift.StringResource(key: "alertTitle_ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: Sorry, 未砸中奖品！
      /// 
      /// Locales: zh-Hans
      static let label_title_sorry = Rswift.StringResource(key: "label_title_sorry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: balance
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_balance_tag = Rswift.StringResource(key: "eureka_textrow_title_balance_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: bank
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_bank_tag = Rswift.StringResource(key: "eureka_textrow_title_bank_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: card
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_card_tag = Rswift.StringResource(key: "eureka_textrow_title_card_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: idcard
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_id_tag = Rswift.StringResource(key: "eureka_textrow_title_id_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: mobile
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_phone_tag = Rswift.StringResource(key: "eureka_textrow_title_phone_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: money
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_money_tag = Rswift.StringResource(key: "eureka_textrow_title_money_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: name
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_name_tag = Rswift.StringResource(key: "eureka_textrow_title_name_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: number
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_number_tag = Rswift.StringResource(key: "eureka_textrow_title_number_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: receiver_info
      /// 
      /// Locales: zh-Hans
      static let eureka_section_receiver_info_tag = Rswift.StringResource(key: "eureka_section_receiver_info_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: remark
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_remark_tag = Rswift.StringResource(key: "eureka_textrow_title_remark_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: to_mobile
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_mobile_tag = Rswift.StringResource(key: "eureka_textrow_title_to_mobile_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: to_name
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_name_tag = Rswift.StringResource(key: "eureka_textrow_title_to_name_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: to_number
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_number_tag = Rswift.StringResource(key: "eureka_textrow_title_to_number_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: verify_code
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_verify_code_tag = Rswift.StringResource(key: "eureka_textrow_title_verify_code_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ¥%.2f
      /// 
      /// Locales: zh-Hans
      static let mall_price2 = Rswift.StringResource(key: "mall_price2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市中医大学的学费
      /// 
      /// Locales: zh-Hans
      static let life_service_tip_tuition = Rswift.StringResource(key: "life_service_tip_tuition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市燃气公司的燃气费
      /// 
      /// Locales: zh-Hans
      static let life_service_tip_gas = Rswift.StringResource(key: "life_service_tip_gas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市自来水公司的水费
      /// 
      /// Locales: zh-Hans
      static let life_service_tip_water = Rswift.StringResource(key: "life_service_tip_water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ●可以使用任何银行借记卡转入金额。每次可转入的最多金额依照各银行网上交易签约标准而定，请注意限额。
      /// 
      /// Locales: zh-Hans
      static let charge_bottom_tips = Rswift.StringResource(key: "charge_bottom_tips", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ●提现仅支持提到您的绵阳市商业银行卡里，支持5万元额度最快2小时到账。
      /// 
      /// Locales: zh-Hans
      static let withdraw_bottom_tips = Rswift.StringResource(key: "withdraw_bottom_tips", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 上传失败
      /// 
      /// Locales: zh-Hans
      static let error_title_uploa_failure = Rswift.StringResource(key: "error_title_uploa_failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 下架
      /// 
      /// Locales: zh-Hans
      static let label_title_undercarriage = Rswift.StringResource(key: "label_title_undercarriage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 不看了
      /// 
      /// Locales: zh-Hans
      static let alertTitle_dont_look = Rswift.StringResource(key: "alertTitle_dont_look", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 不能识别二维码
      /// 
      /// Locales: zh-Hans
      static let scan_qr_unknown = Rswift.StringResource(key: "scan_qr_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 两次密码不一致
      /// 
      /// Locales: zh-Hans
      static let center_setting_paypassNotFit = Rswift.StringResource(key: "center_setting_paypassNotFit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 两次输入密码的不匹配
      /// 
      /// Locales: zh-Hans
      static let input_notmatch = Rswift.StringResource(key: "input_notmatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 为了您的账号安全，请重新登录
      /// 
      /// Locales: zh-Hans
      static let alertTitle_force_logout = Rswift.StringResource(key: "alertTitle_force_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 二维码
      /// 
      /// Locales: zh-Hans
      static let scan_qr_title = Rswift.StringResource(key: "scan_qr_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 产品规模：2000万元  到期时间：2016-02-24  说明：投资于本理财计划的收益的应纳税款由投资人自行缴纳。但若根据法令的规定或税务等国家机关的命令或要求，银行有义务代扣代缴客户承担的税费时，银行将进行代扣代缴。   风险提示：本理财计划是高风险投资产品，您的本金可能会因市场变动而蒙受重大损失，您应充分认识投资风险，谨慎投资。
      /// 
      /// Locales: zh-Hans
      static let invest_detail_caption = Rswift.StringResource(key: "invest_detail_caption", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 人报名
      /// 
      /// Locales: zh-Hans
      static let alertTitle_sign = Rswift.StringResource(key: "alertTitle_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 人气最高
      /// 
      /// Locales: zh-Hans
      static let string_title_most_popular = Rswift.StringResource(key: "string_title_most_popular", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 今天已经签到了
      /// 
      /// Locales: zh-Hans
      static let alertTitle_register_today_success = Rswift.StringResource(key: "alertTitle_register_today_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 今天次数已用完，明天再来吧~
      /// 
      /// Locales: zh-Hans
      static let label_title_end_answer = Rswift.StringResource(key: "label_title_end_answer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 今日机会已用完，明天再接再厉!
      /// 
      /// Locales: zh-Hans
      static let label_title_use_chance = Rswift.StringResource(key: "label_title_use_chance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 付款
      /// 
      /// Locales: zh-Hans
      static let button_title_pay = Rswift.StringResource(key: "button_title_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 付款账号
      /// 
      /// Locales: zh-Hans
      static let eureka_section_pay_account_title = Rswift.StringResource(key: "eureka_section_pay_account_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 优惠
      /// 
      /// Locales: zh-Hans
      static let label_title_privilege = Rswift.StringResource(key: "label_title_privilege", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 优惠买单列表
      /// 
      /// Locales: zh-Hans
      static let center_discount_list_title = Rswift.StringResource(key: "center_discount_list_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 优惠买单商户名
      /// 
      /// Locales: zh-Hans
      static let center_discount_detail_title = Rswift.StringResource(key: "center_discount_detail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 余额
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_balance_title = Rswift.StringResource(key: "eureka_textrow_title_balance_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 你正在解除与店铺的雇佣关系，解除后相关权限将不能使用，确定解除？
      /// 
      /// Locales: zh-Hans
      static let alertTitle_myshop_unwrap = Rswift.StringResource(key: "alertTitle_myshop_unwrap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 便民支付
      /// 
      /// Locales: zh-Hans
      static let shortcut_convenient_pay = Rswift.StringResource(key: "shortcut_convenient_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 信用账户与已绑定银行卡身份信息需一致，如不一致请前往“我的银行卡”注销
      /// 
      /// Locales: zh-Hans
      static let alertTitle_card_logout = Rswift.StringResource(key: "alertTitle_card_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 修改密码成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_revise_password_success = Rswift.StringResource(key: "alertTitle_revise_password_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 修改成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_revise_success = Rswift.StringResource(key: "alertTitle_revise_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 停售
      /// 
      /// Locales: zh-Hans
      static let product_instock_sub_title = Rswift.StringResource(key: "product_instock_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 充值
      /// 
      /// Locales: zh-Hans
      static let view_title_charge = Rswift.StringResource(key: "view_title_charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 充值方式
      /// 
      /// Locales: zh-Hans
      static let charge_chooseBank = Rswift.StringResource(key: "charge_choose.bank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 充值金额
      /// 
      /// Locales: zh-Hans
      static let charge_amount_desc = Rswift.StringResource(key: "charge_amount_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 兑换积分
      /// 
      /// Locales: zh-Hans
      static let point_home_button_exchange = Rswift.StringResource(key: "point_home_button_exchange", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 全部
      /// 
      /// Locales: zh-Hans
      static let label_title_all = Rswift.StringResource(key: "label_title_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 全部分类
      /// 
      /// Locales: zh-Hans
      static let string_title_all_cats = Rswift.StringResource(key: "string_title_all_cats", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 公告详情
      /// 
      /// Locales: zh-Hans
      static let controller_title_public_details = Rswift.StringResource(key: "controller_title_public_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 关于我们
      /// 
      /// Locales: zh-Hans
      static let controller_title_about_us = Rswift.StringResource(key: "controller_title_about_us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 关联信用账户
      /// 
      /// Locales: zh-Hans
      static let controller_title_associated_credit = Rswift.StringResource(key: "controller_title_associated_credit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 关闭
      /// 
      /// Locales: zh-Hans
      static let alertTitle_close = Rswift.StringResource(key: "alertTitle_close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 关闭
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_close = Rswift.StringResource(key: "barButtonItem_title_close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 再看一遍
      /// 
      /// Locales: zh-Hans
      static let alertTitle_look_agin = Rswift.StringResource(key: "alertTitle_look_agin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 分享
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_share = Rswift.StringResource(key: "barButtonItem_title_share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 分享成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_share_success = Rswift.StringResource(key: "alertTitle_share_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 分享领取免费机会
      /// 
      /// Locales: zh-Hans
      static let label_title_share_agin = Rswift.StringResource(key: "label_title_share_agin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 列表
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_list = Rswift.StringResource(key: "barButtonItem_title_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 删除成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_delete_sucess = Rswift.StringResource(key: "alertTitle_delete_sucess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 加入购物车
      /// 
      /// Locales: zh-Hans
      static let button_title_join_shop_car = Rswift.StringResource(key: "button_title_join_shop_car", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 加入购物车成功
      /// 
      /// Locales: zh-Hans
      static let label_title_add_shop_car_success = Rswift.StringResource(key: "label_title_add_shop_car_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 单选
      /// 
      /// Locales: zh-Hans
      static let titleLabel_title_one_select = Rswift.StringResource(key: "titleLabel_title_one_select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 卡号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_number_title = Rswift.StringResource(key: "eureka_textrow_title_number_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 卡号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_number_title = Rswift.StringResource(key: "eureka_textrow_title_to_number_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 即将发售
      /// 
      /// Locales: zh-Hans
      static let product_coming_title = Rswift.StringResource(key: "product_coming_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 去设置
      /// 
      /// Locales: zh-Hans
      static let alertTitle_set = Rswift.StringResource(key: "alertTitle_set", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 发现新版本
      /// 
      /// Locales: zh-Hans
      static let alertTitle_found_new_version = Rswift.StringResource(key: "alertTitle_found_new_version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 发表评价
      /// 
      /// Locales: zh-Hans
      static let center_myorder_appraise_title1 = Rswift.StringResource(key: "center_myorder_appraise_title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cancel = Rswift.StringResource(key: "alertTitle_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static let image_picker_button_cancel = Rswift.StringResource(key: "image_picker_button_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cancelSuccess = Rswift.StringResource(key: "alertTitle_cancelSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cancel_success = Rswift.StringResource(key: "alertTitle_cancel_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消报名
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cancel_sign = Rswift.StringResource(key: "alertTitle_cancel_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 取消订单
      /// 
      /// Locales: zh-Hans
      static let button_title_cancel_order = Rswift.StringResource(key: "button_title_cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 同城活动
      /// 
      /// Locales: zh-Hans
      static let section_city_activity = Rswift.StringResource(key: "section_city_activity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 同行转账
      /// 
      /// Locales: zh-Hans
      static let controller_title_transfer_same = Rswift.StringResource(key: "controller_title_transfer_same", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 向他行转账
      /// 
      /// Locales: zh-Hans
      static let controller_title_transfer_other = Rswift.StringResource(key: "controller_title_transfer_other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 呼叫
      /// 
      /// Locales: zh-Hans
      static let alertTitle_call = Rswift.StringResource(key: "alertTitle_call", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 品牌专区
      /// 
      /// Locales: zh-Hans
      static let label_title_brand = Rswift.StringResource(key: "label_title_brand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 品牌专区
      /// 
      /// Locales: zh-Hans
      static let section_brand_zone = Rswift.StringResource(key: "section_brand_zone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 商品详情
      /// 
      /// Locales: zh-Hans
      static let controller_title_good_details = Rswift.StringResource(key: "controller_title_good_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 回答不对喔!
      /// 
      /// Locales: zh-Hans
      static let alertTitle_wrong = Rswift.StringResource(key: "alertTitle_wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 地图
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_map = Rswift.StringResource(key: "barButtonItem_title_map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 地址管理
      /// 
      /// Locales: zh-Hans
      static let page_add_manage = Rswift.StringResource(key: "page_add_manage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 备注
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_remark_title = Rswift.StringResource(key: "eureka_textrow_title_remark_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 多选
      /// 
      /// Locales: zh-Hans
      static let titleLabel_title_multi_select = Rswift.StringResource(key: "titleLabel_title_multi_select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 大额取款
      /// 
      /// Locales: zh-Hans
      static let shortcut_withdraw_large = Rswift.StringResource(key: "shortcut_withdraw_large", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 好的
      /// 
      /// Locales: zh-Hans
      static let alertTitle_okay = Rswift.StringResource(key: "alertTitle_okay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 姓名
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_name_title = Rswift.StringResource(key: "eureka_textrow_title_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 姓名
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_name_title = Rswift.StringResource(key: "eureka_textrow_title_to_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 姓名不能包含特殊字符
      /// 
      /// Locales: zh-Hans
      static let alertTitle_name_invalid_format = Rswift.StringResource(key: "alertTitle_name_invalid_format", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 安全确认
      /// 
      /// Locales: zh-Hans
      static let eureka_section_confirm_safe = Rswift.StringResource(key: "eureka_section_confirm_safe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 完成
      /// 
      /// Locales: zh-Hans
      static let button_title_finish = Rswift.StringResource(key: "button_title_finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 完成
      /// 
      /// Locales: zh-Hans
      static let image_picker_button_done = Rswift.StringResource(key: "image_picker_button_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 密码不能为空
      /// 
      /// Locales: zh-Hans
      static let input_empty_password = Rswift.StringResource(key: "input_empty_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 密码应为6-16位英文字母、数字、字符
      /// 
      /// Locales: zh-Hans
      static let alertTitle_password_input_error = Rswift.StringResource(key: "alertTitle_password_input_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 对准二维码到框内即可扫描
      /// 
      /// Locales: zh-Hans
      static let scan_qr_tips = Rswift.StringResource(key: "scan_qr_tips", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 导航到网点
      /// 
      /// Locales: zh-Hans
      static let alertTitle_navigation = Rswift.StringResource(key: "alertTitle_navigation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 尚未设置支付密码，点击确定前去设置。
      /// 
      /// Locales: zh-Hans
      static let alertTitle_not_set_paypass = Rswift.StringResource(key: "alertTitle_not_set_paypass", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已参加
      /// 
      /// Locales: zh-Hans
      static let label_title_joined = Rswift.StringResource(key: "label_title_joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已参加
      /// 
      /// Locales: zh-Hans
      static let point_collect_joined = Rswift.StringResource(key: "point_collect_joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已同意
      /// 
      /// Locales: zh-Hans
      static let label_title_agree = Rswift.StringResource(key: "label_title_agree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已售完
      /// 
      /// Locales: zh-Hans
      static let label_title_sold_out = Rswift.StringResource(key: "label_title_sold_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已售罄
      /// 
      /// Locales: zh-Hans
      static let product_soldout_title = Rswift.StringResource(key: "product_soldout_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已忽略
      /// 
      /// Locales: zh-Hans
      static let label_title_igone = Rswift.StringResource(key: "label_title_igone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已成功收藏！可以在个人中心-我的收藏里查看
      /// 
      /// Locales: zh-Hans
      static let alertTitle_receive_sucess_check_in_collection = Rswift.StringResource(key: "alertTitle_receive_sucess_check_in_collection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已拒绝
      /// 
      /// Locales: zh-Hans
      static let label_title_refuse = Rswift.StringResource(key: "label_title_refuse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已收藏
      /// 
      /// Locales: zh-Hans
      static let button_title_collected = Rswift.StringResource(key: "button_title_collected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已有%d人参加
      /// 
      /// Locales: zh-Hans
      static let point_collect_join_number = Rswift.StringResource(key: "point_collect_join_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已签到
      /// 
      /// Locales: zh-Hans
      static let string_title_registered = Rswift.StringResource(key: "string_title_registered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已过期
      /// 
      /// Locales: zh-Hans
      static let butotn_title_overdue = Rswift.StringResource(key: "butotn_title_overdue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 已过期
      /// 
      /// Locales: zh-Hans
      static let label_title_overdue = Rswift.StringResource(key: "label_title_overdue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 帐号不能为空
      /// 
      /// Locales: zh-Hans
      static let input_empty_account = Rswift.StringResource(key: "input_empty_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 帮助
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_help = Rswift.StringResource(key: "barButtonItem_title_help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 帮助中心
      /// 
      /// Locales: zh-Hans
      static let controller_title_help_center = Rswift.StringResource(key: "controller_title_help_center", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 广告无法查看
      /// 
      /// Locales: zh-Hans
      static let none_advert_title = Rswift.StringResource(key: "none_advert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 店铺评分：
      /// 
      /// Locales: zh-Hans
      static let label_title_star_shop_grade = Rswift.StringResource(key: "label_title_star_shop_grade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 建议转入100元以上金额
      /// 
      /// Locales: zh-Hans
      static let charge_amount_placeholder = Rswift.StringResource(key: "charge_amount_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开启后可以使用TouchID验证指纹快速完成登录
      /// 
      /// Locales: zh-Hans
      static let alertTitle_open_touchID = Rswift.StringResource(key: "alertTitle_open_touchID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开启成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_open_success = Rswift.StringResource(key: "alertTitle_open_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开启指纹登录
      /// 
      /// Locales: zh-Hans
      static let alertTitle_open_finger_load = Rswift.StringResource(key: "alertTitle_open_finger_load", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开始时间不能晚于结束时间
      /// 
      /// Locales: zh-Hans
      static let button_title_end_later_than_begin = Rswift.StringResource(key: "button_title_end_later_than_begin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开始答题
      /// 
      /// Locales: zh-Hans
      static let label_title_begin_answer = Rswift.StringResource(key: "label_title_begin_answer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 开店时间: 
      /// 
      /// Locales: zh-Hans
      static let label_title_star_shop_time = Rswift.StringResource(key: "label_title_star_shop_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 当前服务已经结束，请对此次服务进行
      /// 
      /// Locales: zh-Hans
      static let bank_chat_With_Butler_chat_end = Rswift.StringResource(key: "bank_chat_With_Butler_chat_end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 当前设备Touch ID不可用
      /// 
      /// Locales: zh-Hans
      static let alertTitle_equipment_no_user_touchID = Rswift.StringResource(key: "alertTitle_equipment_no_user_touchID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 当日积分已发放完毕，明天请早些来答题哦
      /// 
      /// Locales: zh-Hans
      static let alertTitle_advert_pointout = Rswift.StringResource(key: "alertTitle_advert_pointout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 恭喜你! 签到
      /// 
      /// Locales: zh-Hans
      static let string_title_register = Rswift.StringResource(key: "string_title_register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 恭喜你获得%@积分!
      /// 
      /// Locales: zh-Hans
      static let scan_qr_tips_success = Rswift.StringResource(key: "scan_qr_tips_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 恭喜！%@积分兑换成功，请在积分宝里查看！
      /// 
      /// Locales: zh-Hans
      static let integral_exchangepoint_success = Rswift.StringResource(key: "integral_exchangepoint_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您可以打赏该店的任意一名服务员,只要将二维码给服务员扫一扫即可！
      /// 
      /// Locales: zh-Hans
      static let center_myward_messagelabel_string = Rswift.StringResource(key: "center_myward_messagelabel_string", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您当前不可进行积分提现，请先还款！
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cant_rerlect = Rswift.StringResource(key: "alertTitle_cant_rerlect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您当前是2G/3G/4G网络，会产生流量费用，是否继续？
      /// 
      /// Locales: zh-Hans
      static let alertTitle_cant_integral_deposit = Rswift.StringResource(key: "alertTitle_cant_integral_deposit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您的申请已记录，请等待银行工作人员联系您。或者您也可以前往绵阳市商业银行网点了解
      /// 
      /// Locales: zh-Hans
      static let alertTitle_apply_user_waiting_contact = Rswift.StringResource(key: "alertTitle_apply_user_waiting_contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还未绑定银行卡
      /// 
      /// Locales: zh-Hans
      static let alertTitle_not_bind_card = Rswift.StringResource(key: "alertTitle_not_bind_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没任务
      /// 
      /// Locales: zh-Hans
      static let none_task_title = Rswift.StringResource(key: "none_task_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没优惠买单
      /// 
      /// Locales: zh-Hans
      static let none_discount_title = Rswift.StringResource(key: "none_discount_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没商品
      /// 
      /// Locales: zh-Hans
      static let none_goods_title = Rswift.StringResource(key: "none_goods_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没地址
      /// 
      /// Locales: zh-Hans
      static let none_address_title = Rswift.StringResource(key: "none_address_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没奖品
      /// 
      /// Locales: zh-Hans
      static let none_prize_title = Rswift.StringResource(key: "none_prize_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没打赏
      /// 
      /// Locales: zh-Hans
      static let none_reward_title = Rswift.StringResource(key: "none_reward_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没收藏商品
      /// 
      /// Locales: zh-Hans
      static let none_collection_title = Rswift.StringResource(key: "none_collection_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没消息
      /// 
      /// Locales: zh-Hans
      static let none_message_title = Rswift.StringResource(key: "none_message_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没消费券
      /// 
      /// Locales: zh-Hans
      static let none_coupon_title = Rswift.StringResource(key: "none_coupon_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没现场活动
      /// 
      /// Locales: zh-Hans
      static let none_offlineEvent_title = Rswift.StringResource(key: "none_offlineEvent_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没订单
      /// 
      /// Locales: zh-Hans
      static let none_order_title = Rswift.StringResource(key: "none_order_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 您还没银行卡
      /// 
      /// Locales: zh-Hans
      static let none_card_title = Rswift.StringResource(key: "none_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 成功拒绝该邀请
      /// 
      /// Locales: zh-Hans
      static let alertTitle_refuse_success = Rswift.StringResource(key: "alertTitle_refuse_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 成功接受邀请
      /// 
      /// Locales: zh-Hans
      static let alertTitle_accept_success = Rswift.StringResource(key: "alertTitle_accept_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 成功绑定信用账户，您已升级为信用会员
      /// 
      /// Locales: zh-Hans
      static let alertTitle_bind_credit_sucess = Rswift.StringResource(key: "alertTitle_bind_credit_sucess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我们需要验证一下你的人类身份
      /// 
      /// Locales: zh-Hans
      static let input_captcha_tip = Rswift.StringResource(key: "input_captcha_tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我的店铺
      /// 
      /// Locales: zh-Hans
      static let center_myshop_title = Rswift.StringResource(key: "center_myshop_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我的打赏
      /// 
      /// Locales: zh-Hans
      static let center_myaward_title = Rswift.StringResource(key: "center_myaward_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我要打赏
      /// 
      /// Locales: zh-Hans
      static let butotn_title_ogratuity = Rswift.StringResource(key: "butotn_title_ogratuity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 手机号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_phone_title = Rswift.StringResource(key: "eureka_textrow_title_phone_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 手机号码
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_mobile_title = Rswift.StringResource(key: "eureka_textrow_title_to_mobile_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 手续费
      /// 
      /// Locales: zh-Hans
      static let eureka_decimalrow_title_factorage = Rswift.StringResource(key: "eureka_decimalrow_title_factorage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 打赏
      /// 
      /// Locales: zh-Hans
      static let center_myaward_reward_title = Rswift.StringResource(key: "center_myaward_reward_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 打赏排行榜
      /// 
      /// Locales: zh-Hans
      static let center_myaward_ranklist_title = Rswift.StringResource(key: "center_myaward_ranklist_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 投资与本理财计划的收益的应纳税款，由投资人自行缴纳，但若银行根据法令的规定或税务等国家机关的命令或要求，银行有义务代缴客户承担的税费时，银行将进行代扣代缴。
      /// 
      /// Locales: zh-Hans
      static let product_detail_instruction = Rswift.StringResource(key: "product_detail_instruction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 投资理财
      /// 
      /// Locales: zh-Hans
      static let section_invest = Rswift.StringResource(key: "section_invest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 报名即将截止
      /// 
      /// Locales: zh-Hans
      static let string_title_end_sign = Rswift.StringResource(key: "string_title_end_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 报名成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_sign_success = Rswift.StringResource(key: "alertTitle_sign_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 抽奖未开始
      /// 
      /// Locales: zh-Hans
      static let controller_title_not_star = Rswift.StringResource(key: "controller_title_not_star", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 拨打
      /// 
      /// Locales: zh-Hans
      static let alertTitle_dials = Rswift.StringResource(key: "alertTitle_dials", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 拨打客户服务热线?
      /// 
      /// Locales: zh-Hans
      static let alertTitle_call_service_phone = Rswift.StringResource(key: "alertTitle_call_service_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 拨打电话
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_callup = Rswift.StringResource(key: "barButtonItem_title_callup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 持卡人
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_card_name_title = Rswift.StringResource(key: "eureka_textrow_title_card_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 指纹不匹配
      /// 
      /// Locales: zh-Hans
      static let alertTitle_finger_no_match = Rswift.StringResource(key: "alertTitle_finger_no_match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 提现
      /// 
      /// Locales: zh-Hans
      static let view_title_withdraw = Rswift.StringResource(key: "view_title_withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 提现金额
      /// 
      /// Locales: zh-Hans
      static let withdraw_amount_desc = Rswift.StringResource(key: "withdraw_amount_desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans
      static let alertTitle_tip = Rswift.StringResource(key: "alertTitle_tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 搜索
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_search = Rswift.StringResource(key: "barButtonItem_title_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 搜索无结果
      /// 
      /// Locales: zh-Hans
      static let none_search_title = Rswift.StringResource(key: "none_search_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 支付密码应为6位数字
      /// 
      /// Locales: zh-Hans
      static let alertTitle_password_count_error = Rswift.StringResource(key: "alertTitle_password_count_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 支付密码应为6位数字
      /// 
      /// Locales: zh-Hans
      static let center_setting_paypassLengthError = Rswift.StringResource(key: "center_setting_paypassLengthError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 支付密码设置成功！
      /// 
      /// Locales: zh-Hans
      static let alertTitle_pay_password_set_success = Rswift.StringResource(key: "alertTitle_pay_password_set_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收款人信息
      /// 
      /// Locales: zh-Hans
      static let eureka_section_receiver_info_title = Rswift.StringResource(key: "eureka_section_receiver_info_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收藏
      /// 
      /// Locales: zh-Hans
      static let button_title_collect = Rswift.StringResource(key: "button_title_collect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收货人地址不能为空
      /// 
      /// Locales: zh-Hans
      static let center_address_addressEmpty = Rswift.StringResource(key: "center_address_addressEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收货人姓名不能为空
      /// 
      /// Locales: zh-Hans
      static let center_address_nameEmpty = Rswift.StringResource(key: "center_address_nameEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收货人电话不能为空
      /// 
      /// Locales: zh-Hans
      static let center_address_phoneEmpty = Rswift.StringResource(key: "center_address_phoneEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收货成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_receive_success = Rswift.StringResource(key: "alertTitle_receive_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 收银员
      /// 
      /// Locales: zh-Hans
      static let store_permission_cash = Rswift.StringResource(key: "store_permission_cash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 敬请期待!
      /// 
      /// Locales: zh-Hans
      static let label_title_expect = Rswift.StringResource(key: "label_title_expect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 新一期的抽奖尚未开始
      /// 
      /// Locales: zh-Hans
      static let label_title_new_lottery = Rswift.StringResource(key: "label_title_new_lottery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 是否关闭指纹解锁
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_close_finger = Rswift.StringResource(key: "alertTitle_is_close_finger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 是否呼叫管家
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_call_butler = Rswift.StringResource(key: "alertTitle_is_call_butler", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 是否呼叫网点服务电话
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_call_Service = Rswift.StringResource(key: "alertTitle_is_call_Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 是否清理缓存
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_clean_cache = Rswift.StringResource(key: "alertTitle_is_clean_cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 更多
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_more = Rswift.StringResource(key: "barButtonItem_title_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 更改登录手机号
      /// 
      /// Locales: zh-Hans
      static let controller_title_update_mobile = Rswift.StringResource(key: "controller_title_update_mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 更改设置
      /// 
      /// Locales: zh-Hans
      static let alertTitle_setting = Rswift.StringResource(key: "alertTitle_setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 最多添加四张图片
      /// 
      /// Locales: zh-Hans
      static let alertTitle_max_add_image = Rswift.StringResource(key: "alertTitle_max_add_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 最新入驻
      /// 
      /// Locales: zh-Hans
      static let string_title_latest_in = Rswift.StringResource(key: "string_title_latest_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 最新发布
      /// 
      /// Locales: zh-Hans
      static let string_title_latest_release = Rswift.StringResource(key: "string_title_latest_release", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 最高评分
      /// 
      /// Locales: zh-Hans
      static let string_title_highest_score = Rswift.StringResource(key: "string_title_highest_score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 服务员
      /// 
      /// Locales: zh-Hans
      static let store_permission_waiter = Rswift.StringResource(key: "store_permission_waiter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 未获得有效图片
      /// 
      /// Locales: zh-Hans
      static let input_image_notfound = Rswift.StringResource(key: "input_image_notfound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 查看物流
      /// 
      /// Locales: zh-Hans
      static let button_title_logistics = Rswift.StringResource(key: "button_title_logistics", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 查看评价
      /// 
      /// Locales: zh-Hans
      static let button_title_see_evaluation = Rswift.StringResource(key: "button_title_see_evaluation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 查看评价
      /// 
      /// Locales: zh-Hans
      static let center_myorder_appraise_title2 = Rswift.StringResource(key: "center_myorder_appraise_title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 查看详情
      /// 
      /// Locales: zh-Hans
      static let butotn_title_look_details = Rswift.StringResource(key: "butotn_title_look_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 汇款转账
      /// 
      /// Locales: zh-Hans
      static let shortcut_transfer_account = Rswift.StringResource(key: "shortcut_transfer_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 没有可以选择的照片
      /// 
      /// Locales: zh-Hans
      static let image_picker_button_no_available_photo = Rswift.StringResource(key: "image_picker_button_no_available_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 没有相关数据
      /// 
      /// Locales: zh-Hans
      static let none_data_title = Rswift.StringResource(key: "none_data_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 注销
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_logout = Rswift.StringResource(key: "barButtonItem_title_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 活动无法查看
      /// 
      /// Locales: zh-Hans
      static let none_event_title = Rswift.StringResource(key: "none_event_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 消息失效
      /// 
      /// Locales: zh-Hans
      static let label_title_lose_message = Rswift.StringResource(key: "label_title_lose_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 添加
      /// 
      /// Locales: zh-Hans
      static let shortcut_add_new = Rswift.StringResource(key: "shortcut_add_new", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 添加新地址
      /// 
      /// Locales: zh-Hans
      static let none_address_button_title = Rswift.StringResource(key: "none_address_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 添加银行卡
      /// 
      /// Locales: zh-Hans
      static let none_card_button_title = Rswift.StringResource(key: "none_card_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 清理成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_clean_success = Rswift.StringResource(key: "alertTitle_clean_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 清理缓存
      /// 
      /// Locales: zh-Hans
      static let alertTitle_clean_cache = Rswift.StringResource(key: "alertTitle_clean_cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static let controller_title_hot_goods = Rswift.StringResource(key: "controller_title_hot_goods", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static let label_title_hot_good = Rswift.StringResource(key: "label_title_hot_good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static let section_goods = Rswift.StringResource(key: "section_goods", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 爱吃爱玩
      /// 
      /// Locales: zh-Hans
      static let controller_title_love_food = Rswift.StringResource(key: "controller_title_love_food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 爱逛爱买
      /// 
      /// Locales: zh-Hans
      static let controller_title_love_buy = Rswift.StringResource(key: "controller_title_love_buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 物流信息
      /// 
      /// Locales: zh-Hans
      static let center_myorder_logistics_title = Rswift.StringResource(key: "center_myorder_logistics_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 物流跟踪
      /// 
      /// Locales: zh-Hans
      static let label_title_logistics_tracking = Rswift.StringResource(key: "label_title_logistics_tracking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 现场活动
      /// 
      /// Locales: zh-Hans
      static let label_title_live_event = Rswift.StringResource(key: "label_title_live_event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 现金还款
      /// 
      /// Locales: zh-Hans
      static let controller_title_money_repayment = Rswift.StringResource(key: "controller_title_money_repayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 理财e账户
      /// 
      /// Locales: zh-Hans
      static let shortcut_eaccount = Rswift.StringResource(key: "shortcut_eaccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 理财产品期末收益=投资本金x理财产品预期年化净收益率/365x实际理财天数
      /// 
      /// Locales: zh-Hans
      static let product_profit_estimated_func = Rswift.StringResource(key: "product_profit_estimated_func", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 用户名应为英文字母或汉字开头的4-16位字符中英文、数字组成
      /// 
      /// Locales: zh-Hans
      static let alertTitle_userName_format_error = Rswift.StringResource(key: "alertTitle_userName_format_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 由于商家修改价格，当前订单金额和付款金额不一致无法付款，请联系商家核对后再付款
      /// 
      /// Locales: zh-Hans
      static let alertTitle_order_price_update = Rswift.StringResource(key: "alertTitle_order_price_update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 申请成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_apply_success = Rswift.StringResource(key: "alertTitle_apply_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 申请退款
      /// 
      /// Locales: zh-Hans
      static let button_title_apply_drawback = Rswift.StringResource(key: "button_title_apply_drawback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 申请退款
      /// 
      /// Locales: zh-Hans
      static let button_title_drawback = Rswift.StringResource(key: "button_title_drawback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 界面5分钟没有操作，退出登录
      /// 
      /// Locales: zh-Hans
      static let alertTitle_logout = Rswift.StringResource(key: "alertTitle_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 登录
      /// 
      /// Locales: zh-Hans
      static let controller_title_load = Rswift.StringResource(key: "controller_title_load", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 登录密码设置成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_load_password_set_success = Rswift.StringResource(key: "alertTitle_load_password_set_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 百度地图
      /// 
      /// Locales: zh-Hans
      static let alertTitle_baidu_map = Rswift.StringResource(key: "alertTitle_baidu_map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 看广告
      /// 
      /// Locales: zh-Hans
      static let section_watch_advertisement = Rswift.StringResource(key: "section_watch_advertisement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 砸金蛋 抽大奖
      /// 
      /// Locales: zh-Hans
      static let controller_title_lottery = Rswift.StringResource(key: "controller_title_lottery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static let alertTitle_confirm = Rswift.StringResource(key: "alertTitle_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static let button_title_confirm = Rswift.StringResource(key: "button_title_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定删除宝贝? 
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_delete_goods = Rswift.StringResource(key: "alertTitle_is_delete_goods", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定取消报名? 
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_cancel_sign = Rswift.StringResource(key: "alertTitle_is_cancel_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定取消订单? 
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_cancel_order = Rswift.StringResource(key: "alertTitle_is_cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认买单%.2f元
      /// 
      /// Locales: zh-Hans
      static let mall_discount_confirm_title = Rswift.StringResource(key: "mall_discount_confirm_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认充值
      /// 
      /// Locales: zh-Hans
      static let charge_button_confirm = Rswift.StringResource(key: "charge_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认删除地址? 
      /// 
      /// Locales: zh-Hans
      static let alertTitle_is_delete_address = Rswift.StringResource(key: "alertTitle_is_delete_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认提现
      /// 
      /// Locales: zh-Hans
      static let withdraw_button_confirm = Rswift.StringResource(key: "withdraw_button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认支付%@元
      /// 
      /// Locales: zh-Hans
      static let bank_payment_confirm_pay = Rswift.StringResource(key: "bank_payment_confirm_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认收货
      /// 
      /// Locales: zh-Hans
      static let button_title_confirm_received = Rswift.StringResource(key: "button_title_confirm_received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确认收货成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_confirm_receive_success = Rswift.StringResource(key: "alertTitle_confirm_receive_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans
      static let label_title_integral = Rswift.StringResource(key: "label_title_integral", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans
      static let string_title_integral = Rswift.StringResource(key: "string_title_integral", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分宝
      /// 
      /// Locales: zh-Hans
      static let shortcut_point_mall = Rswift.StringResource(key: "shortcut_point_mall", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分明细
      /// 
      /// Locales: zh-Hans
      static let controller_title_point_detail = Rswift.StringResource(key: "controller_title_point_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分最多
      /// 
      /// Locales: zh-Hans
      static let string_title_most_points = Rswift.StringResource(key: "string_title_most_points", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分贡献成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_contribution_score_success = Rswift.StringResource(key: "alertTitle_contribution_score_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分超限，请重新输入
      /// 
      /// Locales: zh-Hans
      static let input_point_limit = Rswift.StringResource(key: "input_point_limit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分超额,请重新输入
      /// 
      /// Locales: zh-Hans
      static let integral_exchangepoint_warningText2 = Rswift.StringResource(key: "integral_exchangepoint_warningText2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分超额,请重新输入
      /// 
      /// Locales: zh-Hans
      static let label_title_integral_excess = Rswift.StringResource(key: "label_title_integral_excess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分还款
      /// 
      /// Locales: zh-Hans
      static let controller_title_integral_repayment = Rswift.StringResource(key: "controller_title_integral_repayment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 积分还款成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_integral_pay_success = Rswift.StringResource(key: "alertTitle_integral_pay_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 稍后更新
      /// 
      /// Locales: zh-Hans
      static let alertTitle_update_later = Rswift.StringResource(key: "alertTitle_update_later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 立刻购买
      /// 
      /// Locales: zh-Hans
      static let button_title_buy_now = Rswift.StringResource(key: "button_title_buy_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 立即参加
      /// 
      /// Locales: zh-Hans
      static let label_title_join_now = Rswift.StringResource(key: "label_title_join_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 立即报名
      /// 
      /// Locales: zh-Hans
      static let alertTitle_now_sign = Rswift.StringResource(key: "alertTitle_now_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 立即登录
      /// 
      /// Locales: zh-Hans
      static let point_home_button_login = Rswift.StringResource(key: "point_home_button_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 签到
      /// 
      /// Locales: zh-Hans
      static let string_title_sign = Rswift.StringResource(key: "string_title_sign", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 精选促销
      /// 
      /// Locales: zh-Hans
      static let label_title_sales_promotion = Rswift.StringResource(key: "label_title_sales_promotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 精选促销
      /// 
      /// Locales: zh-Hans
      static let section_promotion = Rswift.StringResource(key: "section_promotion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 系统默认快捷菜单不可修改！
      /// 
      /// Locales: zh-Hans
      static let alertTitle_quickmenu_cannotfix = Rswift.StringResource(key: "alertTitle_quickmenu_cannotfix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 绑定他行银行卡
      /// 
      /// Locales: zh-Hans
      static let bank_bind_other_card_title = Rswift.StringResource(key: "bank_bind_other_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 绑定本行银行卡
      /// 
      /// Locales: zh-Hans
      static let bank_bind_card_title = Rswift.StringResource(key: "bank_bind_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 结束时间不能早于开始时间
      /// 
      /// Locales: zh-Hans
      static let button_title_end_early_as_begin = Rswift.StringResource(key: "button_title_end_early_as_begin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 美食
      /// 
      /// Locales: zh-Hans
      static let string_title_food = Rswift.StringResource(key: "string_title_food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 联系管家
      /// 
      /// Locales: zh-Hans
      static let controller_title_contact_butler = Rswift.StringResource(key: "controller_title_contact_butler", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 联系管家
      /// 
      /// Locales: zh-Hans
      static let shortcut_contact_butler = Rswift.StringResource(key: "shortcut_contact_butler", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 苹果地图
      /// 
      /// Locales: zh-Hans
      static let alertTitle_apple_map = Rswift.StringResource(key: "alertTitle_apple_map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 获取验证码
      /// 
      /// Locales: zh-Hans
      static let button_title_get_code = Rswift.StringResource(key: "button_title_get_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 解除绑定
      /// 
      /// Locales: zh-Hans
      static let alertTitle_remove_binding = Rswift.StringResource(key: "alertTitle_remove_binding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 解除绑定
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_unbind = Rswift.StringResource(key: "barButtonItem_title_unbind", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 订单取消成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_order_cancel_success = Rswift.StringResource(key: "alertTitle_order_cancel_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 订单已经评价过了
      /// 
      /// Locales: zh-Hans
      static let alertTitle_order_evaluated = Rswift.StringResource(key: "alertTitle_order_evaluated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 订单编号:%@
      /// 
      /// Locales: zh-Hans
      static let mall_ordernumber = Rswift.StringResource(key: "mall_ordernumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 评价
      /// 
      /// Locales: zh-Hans
      static let button_title_evaluate = Rswift.StringResource(key: "button_title_evaluate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 评价
      /// 
      /// Locales: zh-Hans
      static let button_title_evaluation = Rswift.StringResource(key: "button_title_evaluation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 评价成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_evaluation_sucess = Rswift.StringResource(key: "alertTitle_evaluation_sucess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 评价至少为1星
      /// 
      /// Locales: zh-Hans
      static let mbprogressHud_have_commented_service = Rswift.StringResource(key: "mbprogressHud_have_commented_service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 该消息已被撤销
      /// 
      /// Locales: zh-Hans
      static let titleLabel_title_revoke_message = Rswift.StringResource(key: "titleLabel_title_revoke_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请允许读取您的照片
      /// 
      /// Locales: zh-Hans
      static let alertTitle_permission_photos = Rswift.StringResource(key: "alertTitle_permission_photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请勾选同意银行协议
      /// 
      /// Locales: zh-Hans
      static let input_not_accept_tos = Rswift.StringResource(key: "input_not_accept_tos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请在iPhone的“设置－隐私－相机”选项中，允许本应用访问你的相机。
      /// 
      /// Locales: zh-Hans
      static let alertTitle_permission_camera = Rswift.StringResource(key: "alertTitle_permission_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请填写备注(非必需)
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_remark_paceholder = Rswift.StringResource(key: "eureka_textrow_title_remark_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请您先评分
      /// 
      /// Locales: zh-Hans
      static let mbprogressHud_please_score = Rswift.StringResource(key: "mbprogressHud_please_score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请收到货后，再确认收货，否则您可能财物两空！
      /// 
      /// Locales: zh-Hans
      static let alertTitle_confirm_receive = Rswift.StringResource(key: "alertTitle_confirm_receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请正确填写所有必填项
      /// 
      /// Locales: zh-Hans
      static let input_empty = Rswift.StringResource(key: "input_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请补充退款说明
      /// 
      /// Locales: zh-Hans
      static let placeHoder_title_refund_explain = Rswift.StringResource(key: "placeHoder_title_refund_explain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入100的倍数,1000积分起兑
      /// 
      /// Locales: zh-Hans
      static let integral_exchangepoint_warningText1 = Rswift.StringResource(key: "integral_exchangepoint_warningText1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入100的倍数,1000积分起还
      /// 
      /// Locales: zh-Hans
      static let label_title_100_integer = Rswift.StringResource(key: "label_title_100_integer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入你的问题
      /// 
      /// Locales: zh-Hans
      static let placeHoder_title_enter_question = Rswift.StringResource(key: "placeHoder_title_enter_question", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入姓名
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_write_name = Rswift.StringResource(key: "alertTitle_please_write_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入手机号
      /// 
      /// Locales: zh-Hans
      static let error_title_input_mobile = Rswift.StringResource(key: "error_title_input_mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入持卡人姓名
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_name_placeholder = Rswift.StringResource(key: "eureka_textrow_title_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入持卡人身份证号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_id_placeholder = Rswift.StringResource(key: "eureka_textrow_title_id_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入搜索关键字
      /// 
      /// Locales: zh-Hans
      static let placeHoder_title_enter_search_keywords = Rswift.StringResource(key: "placeHoder_title_enter_search_keywords", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入收款人卡号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_number_paceholder = Rswift.StringResource(key: "eureka_textrow_title_to_number_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入收款人姓名
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_name_paceholder = Rswift.StringResource(key: "eureka_textrow_title_to_name_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入收款人手机号(非必须)
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_to_mobile_paceholder = Rswift.StringResource(key: "eureka_textrow_title_to_mobile_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的姓名
      /// 
      /// Locales: zh-Hans
      static let alertTitle_name_error = Rswift.StringResource(key: "alertTitle_name_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的格式，不能包括小数点
      /// 
      /// Locales: zh-Hans
      static let input_point_invalid_input = Rswift.StringResource(key: "input_point_invalid_input", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的绵商银行卡号
      /// 
      /// Locales: zh-Hans
      static let bank_bind_card_InPutRightBankCard = Rswift.StringResource(key: "bank_bind_card_InPutRightBankCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的身份证号
      /// 
      /// Locales: zh-Hans
      static let bank_bind_card_idcardLengthError = Rswift.StringResource(key: "bank_bind_card_idcardLengthError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的身份证号码
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_write_correct_idcard = Rswift.StringResource(key: "alertTitle_please_write_correct_idcard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入正确的邮政编码
      /// 
      /// Locales: zh-Hans
      static let alertTitle_postCode_error = Rswift.StringResource(key: "alertTitle_postCode_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入登录密码
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_input_password = Rswift.StringResource(key: "alertTitle_please_input_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入短信验证码
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_write_code = Rswift.StringResource(key: "alertTitle_please_write_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入短信验证码
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_verify_code_paceholder = Rswift.StringResource(key: "eureka_textrow_title_verify_code_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入绵商行银行卡号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_number_paceholder = Rswift.StringResource(key: "eureka_textrow_title_number_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入身份证号码
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_write_idcard = Rswift.StringResource(key: "alertTitle_please_write_idcard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入转账金额
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_money_paceholder = Rswift.StringResource(key: "eureka_textrow_title_money_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入银行预留手机号
      /// 
      /// Locales: zh-Hans
      static let bank_bind_card_InPutReservedPhoneNumber = Rswift.StringResource(key: "bank_bind_card_InPutReservedPhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入银行预留手机号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_phone_paceholder = Rswift.StringResource(key: "eureka_textrow_title_phone_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请输入预留手机号
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_write_mobile = Rswift.StringResource(key: "alertTitle_please_write_mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static let button_title_choose_begin_time = Rswift.StringResource(key: "button_title_choose_begin_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static let button_title_choose_end_time = Rswift.StringResource(key: "button_title_choose_end_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static let placeHoder_title_choose_begin_time = Rswift.StringResource(key: "placeHoder_title_choose_begin_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择答案
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_select_answer = Rswift.StringResource(key: "alertTitle_please_select_answer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择终止日
      /// 
      /// Locales: zh-Hans
      static let placeHoder_title_choose_end_time = Rswift.StringResource(key: "placeHoder_title_choose_end_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择要删除的宝贝
      /// 
      /// Locales: zh-Hans
      static let alertTitle_choose_delete_goods = Rswift.StringResource(key: "alertTitle_choose_delete_goods", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择退款原因
      /// 
      /// Locales: zh-Hans
      static let alertTitle_please_choose_reason = Rswift.StringResource(key: "alertTitle_please_choose_reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择银行
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_bank_paceholder = Rswift.StringResource(key: "eureka_textrow_title_bank_paceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 请选择银行卡
      /// 
      /// Locales: zh-Hans
      static let alertTitle_choose_bank = Rswift.StringResource(key: "alertTitle_choose_bank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 账单为0, 不需要付款
      /// 
      /// Locales: zh-Hans
      static let alertTtile_no_pay = Rswift.StringResource(key: "alertTtile_no_pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 账号
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_card_title = Rswift.StringResource(key: "eureka_textrow_title_card_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 身份证
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_id_title = Rswift.StringResource(key: "eureka_textrow_title_id_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 转账进额
      /// 
      /// Locales: zh-Hans
      static let eureka_section_pay_money = Rswift.StringResource(key: "eureka_section_pay_money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 返回
      /// 
      /// Locales: zh-Hans
      static let barButtonItem_title_back = Rswift.StringResource(key: "barButtonItem_title_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 返回
      /// 
      /// Locales: zh-Hans
      static let button_title_back = Rswift.StringResource(key: "button_title_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 还有商品未评价
      /// 
      /// Locales: zh-Hans
      static let alertTitle_evaluate_at_least_one_star = Rswift.StringResource(key: "alertTitle_evaluate_at_least_one_star", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 还款明细
      /// 
      /// Locales: zh-Hans
      static let controller_title_repayment_details = Rswift.StringResource(key: "controller_title_repayment_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 退款详情
      /// 
      /// Locales: zh-Hans
      static let center_myorder_refundDetail_title = Rswift.StringResource(key: "center_myorder_refundDetail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 选择银行卡
      /// 
      /// Locales: zh-Hans
      static let withdraw_chooseBank = Rswift.StringResource(key: "withdraw_choose.bank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 通过Home键验证已有的手机指纹
      /// 
      /// Locales: zh-Hans
      static let titleLabel_title_test_home_id = Rswift.StringResource(key: "titleLabel_title_test_home_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 邀请成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_invite_success = Rswift.StringResource(key: "alertTitle_invite_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 金额
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_money_title = Rswift.StringResource(key: "eureka_textrow_title_money_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_bank_title = Rswift.StringResource(key: "eureka_textrow_title_bank_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行卡
      /// 
      /// Locales: zh-Hans
      static let shortcut_bank_account = Rswift.StringResource(key: "shortcut_bank_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行卡信息
      /// 
      /// Locales: zh-Hans
      static let eureka_section_title = Rswift.StringResource(key: "eureka_section_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行卡明细
      /// 
      /// Locales: zh-Hans
      static let controller_title_bankcard_detail = Rswift.StringResource(key: "controller_title_bankcard_detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行卡预留手机不符，请核对后再试，若银行卡预留手机号已变更，请更新手机号
      /// 
      /// Locales: zh-Hans
      static let bank_bind_card_InPutRightPhoneNumber = Rswift.StringResource(key: "bank_bind_card_InPutRightPhoneNumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 银行预约
      /// 
      /// Locales: zh-Hans
      static let center_reservation_title = Rswift.StringResource(key: "center_reservation_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 销量最高
      /// 
      /// Locales: zh-Hans
      static let string_title_highest_sales = Rswift.StringResource(key: "string_title_highest_sales", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 错误次数已达上限，请于3小时候再试
      /// 
      /// Locales: zh-Hans
      static let alertTitle_paypass_lock = Rswift.StringResource(key: "alertTitle_paypass_lock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 随便逛逛
      /// 
      /// Locales: zh-Hans
      static let none_order_button_title = Rswift.StringResource(key: "none_order_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 领取任务成功
      /// 
      /// Locales: zh-Hans
      static let alertTitle_receive_job_success = Rswift.StringResource(key: "alertTitle_receive_job_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 马上去参加
      /// 
      /// Locales: zh-Hans
      static let none_offloneEvent_button_title = Rswift.StringResource(key: "none_offloneEvent_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 马上去更新
      /// 
      /// Locales: zh-Hans
      static let alertTitle_update_now = Rswift.StringResource(key: "alertTitle_update_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 马上去逛逛
      /// 
      /// Locales: zh-Hans
      static let none_collection_button_title = Rswift.StringResource(key: "none_collection_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 马上去逛逛
      /// 
      /// Locales: zh-Hans
      static let none_coupon_button_title = Rswift.StringResource(key: "none_coupon_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 马上去领取
      /// 
      /// Locales: zh-Hans
      static let none_task_button_title = Rswift.StringResource(key: "none_task_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 验证码
      /// 
      /// Locales: zh-Hans
      static let eureka_textrow_title_verify_code_title = Rswift.StringResource(key: "eureka_textrow_title_verify_code_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 验证码输入错误，请重新输入
      /// 
      /// Locales: zh-Hans
      static let input_captcha_error = Rswift.StringResource(key: "input_captcha_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 高德地图
      /// 
      /// Locales: zh-Hans
      static let alertTitle_gaode_map = Rswift.StringResource(key: "alertTitle_gaode_map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 默认排序
      /// 
      /// Locales: zh-Hans
      static let string_title_default = Rswift.StringResource(key: "string_title_default", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: （支持绑定所有银联储蓄卡）
      /// 
      /// Locales: zh-Hans
      static let eureka_section_footer_title = Rswift.StringResource(key: "eureka_section_footer_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static func alertTitle_nil(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_nil", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 
      /// 
      /// Locales: zh-Hans
      static func withdraw_amount_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("withdraw_amount_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:   网络断开连接，请检查手机。 
      /// 
      /// Locales: zh-Hans
      static func hud_disconnect(_: Void = ()) -> String {
        return NSLocalizedString("hud_disconnect", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:  加载中 
      /// 
      /// Locales: zh-Hans
      static func hud_loading(_: Void = ()) -> String {
        return NSLocalizedString("hud_loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:  请求失败，服务器维护中 
      /// 
      /// Locales: zh-Hans
      static func hud_request_failed(_: Void = ()) -> String {
        return NSLocalizedString("hud_request_failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:  请求超时，请稍后再试。 
      /// 
      /// Locales: zh-Hans
      static func hud_request_timeout(_: Void = ()) -> String {
        return NSLocalizedString("hud_request_timeout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:  返回
      /// 
      /// Locales: zh-Hans
      static func button_title_null_back(_: Void = ()) -> String {
        return NSLocalizedString("button_title_null_back", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: %.2f元
      /// 
      /// Locales: zh-Hans
      static func mall_price1(_ value1: Double) -> String {
        return String(format: NSLocalizedString("mall_price1", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: %@(%@)
      /// 
      /// Locales: zh-Hans
      static func bank_payment_name(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("bank_payment_name", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// zh-Hans translation: %@打赏
      /// 
      /// Locales: zh-Hans
      static func center_myward_userAward(_ value1: String) -> String {
        return String(format: NSLocalizedString("center_myward_userAward", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: %d天%d时%d分
      /// 
      /// Locales: zh-Hans
      static func product_instock_title(_ value1: Int, _ value2: Int, _ value3: Int) -> String {
        return String(format: NSLocalizedString("product_instock_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// zh-Hans translation: %d天%d时%d分起售
      /// 
      /// Locales: zh-Hans
      static func product_coming_sub_title(_ value1: Int, _ value2: Int, _ value3: Int) -> String {
        return String(format: NSLocalizedString("product_coming_sub_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// zh-Hans translation: Error
      /// 
      /// Locales: zh-Hans
      static func alertTitle_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: OK
      /// 
      /// Locales: zh-Hans
      static func alertTitle_ok(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: Sorry, 未砸中奖品！
      /// 
      /// Locales: zh-Hans
      static func label_title_sorry(_: Void = ()) -> String {
        return NSLocalizedString("label_title_sorry", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: balance
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_balance_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_balance_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: bank
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_bank_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_bank_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: card
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_card_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_card_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: idcard
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_id_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_id_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: mobile
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_phone_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_phone_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: money
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_money_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_money_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: name
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_name_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_name_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: number
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_number_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_number_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: receiver_info
      /// 
      /// Locales: zh-Hans
      static func eureka_section_receiver_info_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_receiver_info_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: remark
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_remark_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_remark_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: to_mobile
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_mobile_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_mobile_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: to_name
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_name_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_name_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: to_number
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_number_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_number_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: verify_code
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_verify_code_tag(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_verify_code_tag", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ¥%.2f
      /// 
      /// Locales: zh-Hans
      static func mall_price2(_ value1: Double) -> String {
        return String(format: NSLocalizedString("mall_price2", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市中医大学的学费
      /// 
      /// Locales: zh-Hans
      static func life_service_tip_tuition(_: Void = ()) -> String {
        return NSLocalizedString("life_service_tip_tuition", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市燃气公司的燃气费
      /// 
      /// Locales: zh-Hans
      static func life_service_tip_gas(_: Void = ()) -> String {
        return NSLocalizedString("life_service_tip_gas", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ● 目前只支持缴纳绵阳市自来水公司的水费
      /// 
      /// Locales: zh-Hans
      static func life_service_tip_water(_: Void = ()) -> String {
        return NSLocalizedString("life_service_tip_water", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ●可以使用任何银行借记卡转入金额。每次可转入的最多金额依照各银行网上交易签约标准而定，请注意限额。
      /// 
      /// Locales: zh-Hans
      static func charge_bottom_tips(_: Void = ()) -> String {
        return NSLocalizedString("charge_bottom_tips", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ●提现仅支持提到您的绵阳市商业银行卡里，支持5万元额度最快2小时到账。
      /// 
      /// Locales: zh-Hans
      static func withdraw_bottom_tips(_: Void = ()) -> String {
        return NSLocalizedString("withdraw_bottom_tips", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 上传失败
      /// 
      /// Locales: zh-Hans
      static func error_title_uploa_failure(_: Void = ()) -> String {
        return NSLocalizedString("error_title_uploa_failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 下架
      /// 
      /// Locales: zh-Hans
      static func label_title_undercarriage(_: Void = ()) -> String {
        return NSLocalizedString("label_title_undercarriage", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 不看了
      /// 
      /// Locales: zh-Hans
      static func alertTitle_dont_look(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_dont_look", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 不能识别二维码
      /// 
      /// Locales: zh-Hans
      static func scan_qr_unknown(_: Void = ()) -> String {
        return NSLocalizedString("scan_qr_unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 两次密码不一致
      /// 
      /// Locales: zh-Hans
      static func center_setting_paypassNotFit(_: Void = ()) -> String {
        return NSLocalizedString("center_setting_paypassNotFit", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 两次输入密码的不匹配
      /// 
      /// Locales: zh-Hans
      static func input_notmatch(_: Void = ()) -> String {
        return NSLocalizedString("input_notmatch", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 为了您的账号安全，请重新登录
      /// 
      /// Locales: zh-Hans
      static func alertTitle_force_logout(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_force_logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 二维码
      /// 
      /// Locales: zh-Hans
      static func scan_qr_title(_: Void = ()) -> String {
        return NSLocalizedString("scan_qr_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 产品规模：2000万元  到期时间：2016-02-24  说明：投资于本理财计划的收益的应纳税款由投资人自行缴纳。但若根据法令的规定或税务等国家机关的命令或要求，银行有义务代扣代缴客户承担的税费时，银行将进行代扣代缴。   风险提示：本理财计划是高风险投资产品，您的本金可能会因市场变动而蒙受重大损失，您应充分认识投资风险，谨慎投资。
      /// 
      /// Locales: zh-Hans
      static func invest_detail_caption(_: Void = ()) -> String {
        return NSLocalizedString("invest_detail_caption", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 人报名
      /// 
      /// Locales: zh-Hans
      static func alertTitle_sign(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 人气最高
      /// 
      /// Locales: zh-Hans
      static func string_title_most_popular(_: Void = ()) -> String {
        return NSLocalizedString("string_title_most_popular", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 今天已经签到了
      /// 
      /// Locales: zh-Hans
      static func alertTitle_register_today_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_register_today_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 今天次数已用完，明天再来吧~
      /// 
      /// Locales: zh-Hans
      static func label_title_end_answer(_: Void = ()) -> String {
        return NSLocalizedString("label_title_end_answer", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 今日机会已用完，明天再接再厉!
      /// 
      /// Locales: zh-Hans
      static func label_title_use_chance(_: Void = ()) -> String {
        return NSLocalizedString("label_title_use_chance", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 付款
      /// 
      /// Locales: zh-Hans
      static func button_title_pay(_: Void = ()) -> String {
        return NSLocalizedString("button_title_pay", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 付款账号
      /// 
      /// Locales: zh-Hans
      static func eureka_section_pay_account_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_pay_account_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 优惠
      /// 
      /// Locales: zh-Hans
      static func label_title_privilege(_: Void = ()) -> String {
        return NSLocalizedString("label_title_privilege", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 优惠买单列表
      /// 
      /// Locales: zh-Hans
      static func center_discount_list_title(_: Void = ()) -> String {
        return NSLocalizedString("center_discount_list_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 优惠买单商户名
      /// 
      /// Locales: zh-Hans
      static func center_discount_detail_title(_: Void = ()) -> String {
        return NSLocalizedString("center_discount_detail_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 余额
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_balance_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_balance_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 你正在解除与店铺的雇佣关系，解除后相关权限将不能使用，确定解除？
      /// 
      /// Locales: zh-Hans
      static func alertTitle_myshop_unwrap(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_myshop_unwrap", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 便民支付
      /// 
      /// Locales: zh-Hans
      static func shortcut_convenient_pay(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_convenient_pay", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 信用账户与已绑定银行卡身份信息需一致，如不一致请前往“我的银行卡”注销
      /// 
      /// Locales: zh-Hans
      static func alertTitle_card_logout(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_card_logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 修改密码成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_revise_password_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_revise_password_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 修改成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_revise_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_revise_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 停售
      /// 
      /// Locales: zh-Hans
      static func product_instock_sub_title(_: Void = ()) -> String {
        return NSLocalizedString("product_instock_sub_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 充值
      /// 
      /// Locales: zh-Hans
      static func view_title_charge(_: Void = ()) -> String {
        return NSLocalizedString("view_title_charge", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 充值方式
      /// 
      /// Locales: zh-Hans
      static func charge_chooseBank(_: Void = ()) -> String {
        return NSLocalizedString("charge_choose.bank", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 充值金额
      /// 
      /// Locales: zh-Hans
      static func charge_amount_desc(_: Void = ()) -> String {
        return NSLocalizedString("charge_amount_desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 兑换积分
      /// 
      /// Locales: zh-Hans
      static func point_home_button_exchange(_: Void = ()) -> String {
        return NSLocalizedString("point_home_button_exchange", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 全部
      /// 
      /// Locales: zh-Hans
      static func label_title_all(_: Void = ()) -> String {
        return NSLocalizedString("label_title_all", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 全部分类
      /// 
      /// Locales: zh-Hans
      static func string_title_all_cats(_: Void = ()) -> String {
        return NSLocalizedString("string_title_all_cats", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 公告详情
      /// 
      /// Locales: zh-Hans
      static func controller_title_public_details(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_public_details", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关于我们
      /// 
      /// Locales: zh-Hans
      static func controller_title_about_us(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_about_us", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关联信用账户
      /// 
      /// Locales: zh-Hans
      static func controller_title_associated_credit(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_associated_credit", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关闭
      /// 
      /// Locales: zh-Hans
      static func alertTitle_close(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_close", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 关闭
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_close(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_close", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 再看一遍
      /// 
      /// Locales: zh-Hans
      static func alertTitle_look_agin(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_look_agin", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分享
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_share(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_share", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分享成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_share_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_share_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分享领取免费机会
      /// 
      /// Locales: zh-Hans
      static func label_title_share_agin(_: Void = ()) -> String {
        return NSLocalizedString("label_title_share_agin", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 列表
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_list(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_list", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_delete_sucess(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_delete_sucess", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 加入购物车
      /// 
      /// Locales: zh-Hans
      static func button_title_join_shop_car(_: Void = ()) -> String {
        return NSLocalizedString("button_title_join_shop_car", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 加入购物车成功
      /// 
      /// Locales: zh-Hans
      static func label_title_add_shop_car_success(_: Void = ()) -> String {
        return NSLocalizedString("label_title_add_shop_car_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 单选
      /// 
      /// Locales: zh-Hans
      static func titleLabel_title_one_select(_: Void = ()) -> String {
        return NSLocalizedString("titleLabel_title_one_select", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 卡号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_number_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_number_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 卡号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_number_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_number_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 即将发售
      /// 
      /// Locales: zh-Hans
      static func product_coming_title(_: Void = ()) -> String {
        return NSLocalizedString("product_coming_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 去设置
      /// 
      /// Locales: zh-Hans
      static func alertTitle_set(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_set", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 发现新版本
      /// 
      /// Locales: zh-Hans
      static func alertTitle_found_new_version(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_found_new_version", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 发表评价
      /// 
      /// Locales: zh-Hans
      static func center_myorder_appraise_title1(_: Void = ()) -> String {
        return NSLocalizedString("center_myorder_appraise_title1", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cancel(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans
      static func image_picker_button_cancel(_: Void = ()) -> String {
        return NSLocalizedString("image_picker_button_cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cancelSuccess(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cancelSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cancel_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cancel_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消报名
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cancel_sign(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cancel_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消订单
      /// 
      /// Locales: zh-Hans
      static func button_title_cancel_order(_: Void = ()) -> String {
        return NSLocalizedString("button_title_cancel_order", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 同城活动
      /// 
      /// Locales: zh-Hans
      static func section_city_activity(_: Void = ()) -> String {
        return NSLocalizedString("section_city_activity", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 同行转账
      /// 
      /// Locales: zh-Hans
      static func controller_title_transfer_same(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_transfer_same", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 向他行转账
      /// 
      /// Locales: zh-Hans
      static func controller_title_transfer_other(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_transfer_other", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 呼叫
      /// 
      /// Locales: zh-Hans
      static func alertTitle_call(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_call", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 品牌专区
      /// 
      /// Locales: zh-Hans
      static func label_title_brand(_: Void = ()) -> String {
        return NSLocalizedString("label_title_brand", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 品牌专区
      /// 
      /// Locales: zh-Hans
      static func section_brand_zone(_: Void = ()) -> String {
        return NSLocalizedString("section_brand_zone", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 商品详情
      /// 
      /// Locales: zh-Hans
      static func controller_title_good_details(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_good_details", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 回答不对喔!
      /// 
      /// Locales: zh-Hans
      static func alertTitle_wrong(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 地图
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_map(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_map", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 地址管理
      /// 
      /// Locales: zh-Hans
      static func page_add_manage(_: Void = ()) -> String {
        return NSLocalizedString("page_add_manage", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 备注
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_remark_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_remark_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 多选
      /// 
      /// Locales: zh-Hans
      static func titleLabel_title_multi_select(_: Void = ()) -> String {
        return NSLocalizedString("titleLabel_title_multi_select", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 大额取款
      /// 
      /// Locales: zh-Hans
      static func shortcut_withdraw_large(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_withdraw_large", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 好的
      /// 
      /// Locales: zh-Hans
      static func alertTitle_okay(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_okay", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 姓名
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_name_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_name_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 姓名
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_name_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_name_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 姓名不能包含特殊字符
      /// 
      /// Locales: zh-Hans
      static func alertTitle_name_invalid_format(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_name_invalid_format", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 安全确认
      /// 
      /// Locales: zh-Hans
      static func eureka_section_confirm_safe(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_confirm_safe", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 完成
      /// 
      /// Locales: zh-Hans
      static func button_title_finish(_: Void = ()) -> String {
        return NSLocalizedString("button_title_finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 完成
      /// 
      /// Locales: zh-Hans
      static func image_picker_button_done(_: Void = ()) -> String {
        return NSLocalizedString("image_picker_button_done", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 密码不能为空
      /// 
      /// Locales: zh-Hans
      static func input_empty_password(_: Void = ()) -> String {
        return NSLocalizedString("input_empty_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 密码应为6-16位英文字母、数字、字符
      /// 
      /// Locales: zh-Hans
      static func alertTitle_password_input_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_password_input_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 对准二维码到框内即可扫描
      /// 
      /// Locales: zh-Hans
      static func scan_qr_tips(_: Void = ()) -> String {
        return NSLocalizedString("scan_qr_tips", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 导航到网点
      /// 
      /// Locales: zh-Hans
      static func alertTitle_navigation(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_navigation", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 尚未设置支付密码，点击确定前去设置。
      /// 
      /// Locales: zh-Hans
      static func alertTitle_not_set_paypass(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_not_set_paypass", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已参加
      /// 
      /// Locales: zh-Hans
      static func label_title_joined(_: Void = ()) -> String {
        return NSLocalizedString("label_title_joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已参加
      /// 
      /// Locales: zh-Hans
      static func point_collect_joined(_: Void = ()) -> String {
        return NSLocalizedString("point_collect_joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已同意
      /// 
      /// Locales: zh-Hans
      static func label_title_agree(_: Void = ()) -> String {
        return NSLocalizedString("label_title_agree", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已售完
      /// 
      /// Locales: zh-Hans
      static func label_title_sold_out(_: Void = ()) -> String {
        return NSLocalizedString("label_title_sold_out", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已售罄
      /// 
      /// Locales: zh-Hans
      static func product_soldout_title(_: Void = ()) -> String {
        return NSLocalizedString("product_soldout_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已忽略
      /// 
      /// Locales: zh-Hans
      static func label_title_igone(_: Void = ()) -> String {
        return NSLocalizedString("label_title_igone", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已成功收藏！可以在个人中心-我的收藏里查看
      /// 
      /// Locales: zh-Hans
      static func alertTitle_receive_sucess_check_in_collection(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_receive_sucess_check_in_collection", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已拒绝
      /// 
      /// Locales: zh-Hans
      static func label_title_refuse(_: Void = ()) -> String {
        return NSLocalizedString("label_title_refuse", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已收藏
      /// 
      /// Locales: zh-Hans
      static func button_title_collected(_: Void = ()) -> String {
        return NSLocalizedString("button_title_collected", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已有%d人参加
      /// 
      /// Locales: zh-Hans
      static func point_collect_join_number(_ value1: Int) -> String {
        return String(format: NSLocalizedString("point_collect_join_number", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 已签到
      /// 
      /// Locales: zh-Hans
      static func string_title_registered(_: Void = ()) -> String {
        return NSLocalizedString("string_title_registered", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已过期
      /// 
      /// Locales: zh-Hans
      static func butotn_title_overdue(_: Void = ()) -> String {
        return NSLocalizedString("butotn_title_overdue", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已过期
      /// 
      /// Locales: zh-Hans
      static func label_title_overdue(_: Void = ()) -> String {
        return NSLocalizedString("label_title_overdue", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 帐号不能为空
      /// 
      /// Locales: zh-Hans
      static func input_empty_account(_: Void = ()) -> String {
        return NSLocalizedString("input_empty_account", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 帮助
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_help(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_help", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 帮助中心
      /// 
      /// Locales: zh-Hans
      static func controller_title_help_center(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_help_center", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 广告无法查看
      /// 
      /// Locales: zh-Hans
      static func none_advert_title(_: Void = ()) -> String {
        return NSLocalizedString("none_advert_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 店铺评分：
      /// 
      /// Locales: zh-Hans
      static func label_title_star_shop_grade(_: Void = ()) -> String {
        return NSLocalizedString("label_title_star_shop_grade", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 建议转入100元以上金额
      /// 
      /// Locales: zh-Hans
      static func charge_amount_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("charge_amount_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开启后可以使用TouchID验证指纹快速完成登录
      /// 
      /// Locales: zh-Hans
      static func alertTitle_open_touchID(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_open_touchID", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开启成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_open_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_open_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开启指纹登录
      /// 
      /// Locales: zh-Hans
      static func alertTitle_open_finger_load(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_open_finger_load", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开始时间不能晚于结束时间
      /// 
      /// Locales: zh-Hans
      static func button_title_end_later_than_begin(_: Void = ()) -> String {
        return NSLocalizedString("button_title_end_later_than_begin", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开始答题
      /// 
      /// Locales: zh-Hans
      static func label_title_begin_answer(_: Void = ()) -> String {
        return NSLocalizedString("label_title_begin_answer", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开店时间: 
      /// 
      /// Locales: zh-Hans
      static func label_title_star_shop_time(_: Void = ()) -> String {
        return NSLocalizedString("label_title_star_shop_time", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 当前服务已经结束，请对此次服务进行
      /// 
      /// Locales: zh-Hans
      static func bank_chat_With_Butler_chat_end(_: Void = ()) -> String {
        return NSLocalizedString("bank_chat_With_Butler_chat_end", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 当前设备Touch ID不可用
      /// 
      /// Locales: zh-Hans
      static func alertTitle_equipment_no_user_touchID(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_equipment_no_user_touchID", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 当日积分已发放完毕，明天请早些来答题哦
      /// 
      /// Locales: zh-Hans
      static func alertTitle_advert_pointout(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_advert_pointout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 恭喜你! 签到
      /// 
      /// Locales: zh-Hans
      static func string_title_register(_: Void = ()) -> String {
        return NSLocalizedString("string_title_register", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 恭喜你获得%@积分!
      /// 
      /// Locales: zh-Hans
      static func scan_qr_tips_success(_ value1: String) -> String {
        return String(format: NSLocalizedString("scan_qr_tips_success", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 恭喜！%@积分兑换成功，请在积分宝里查看！
      /// 
      /// Locales: zh-Hans
      static func integral_exchangepoint_success(_ value1: String) -> String {
        return String(format: NSLocalizedString("integral_exchangepoint_success", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 您可以打赏该店的任意一名服务员,只要将二维码给服务员扫一扫即可！
      /// 
      /// Locales: zh-Hans
      static func center_myward_messagelabel_string(_: Void = ()) -> String {
        return NSLocalizedString("center_myward_messagelabel_string", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您当前不可进行积分提现，请先还款！
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cant_rerlect(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cant_rerlect", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您当前是2G/3G/4G网络，会产生流量费用，是否继续？
      /// 
      /// Locales: zh-Hans
      static func alertTitle_cant_integral_deposit(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_cant_integral_deposit", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您的申请已记录，请等待银行工作人员联系您。或者您也可以前往绵阳市商业银行网点了解
      /// 
      /// Locales: zh-Hans
      static func alertTitle_apply_user_waiting_contact(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_apply_user_waiting_contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还未绑定银行卡
      /// 
      /// Locales: zh-Hans
      static func alertTitle_not_bind_card(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_not_bind_card", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没任务
      /// 
      /// Locales: zh-Hans
      static func none_task_title(_: Void = ()) -> String {
        return NSLocalizedString("none_task_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没优惠买单
      /// 
      /// Locales: zh-Hans
      static func none_discount_title(_: Void = ()) -> String {
        return NSLocalizedString("none_discount_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没商品
      /// 
      /// Locales: zh-Hans
      static func none_goods_title(_: Void = ()) -> String {
        return NSLocalizedString("none_goods_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没地址
      /// 
      /// Locales: zh-Hans
      static func none_address_title(_: Void = ()) -> String {
        return NSLocalizedString("none_address_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没奖品
      /// 
      /// Locales: zh-Hans
      static func none_prize_title(_: Void = ()) -> String {
        return NSLocalizedString("none_prize_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没打赏
      /// 
      /// Locales: zh-Hans
      static func none_reward_title(_: Void = ()) -> String {
        return NSLocalizedString("none_reward_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没收藏商品
      /// 
      /// Locales: zh-Hans
      static func none_collection_title(_: Void = ()) -> String {
        return NSLocalizedString("none_collection_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没消息
      /// 
      /// Locales: zh-Hans
      static func none_message_title(_: Void = ()) -> String {
        return NSLocalizedString("none_message_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没消费券
      /// 
      /// Locales: zh-Hans
      static func none_coupon_title(_: Void = ()) -> String {
        return NSLocalizedString("none_coupon_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没现场活动
      /// 
      /// Locales: zh-Hans
      static func none_offlineEvent_title(_: Void = ()) -> String {
        return NSLocalizedString("none_offlineEvent_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没订单
      /// 
      /// Locales: zh-Hans
      static func none_order_title(_: Void = ()) -> String {
        return NSLocalizedString("none_order_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没银行卡
      /// 
      /// Locales: zh-Hans
      static func none_card_title(_: Void = ()) -> String {
        return NSLocalizedString("none_card_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 成功拒绝该邀请
      /// 
      /// Locales: zh-Hans
      static func alertTitle_refuse_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_refuse_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 成功接受邀请
      /// 
      /// Locales: zh-Hans
      static func alertTitle_accept_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_accept_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 成功绑定信用账户，您已升级为信用会员
      /// 
      /// Locales: zh-Hans
      static func alertTitle_bind_credit_sucess(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_bind_credit_sucess", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我们需要验证一下你的人类身份
      /// 
      /// Locales: zh-Hans
      static func input_captcha_tip(_: Void = ()) -> String {
        return NSLocalizedString("input_captcha_tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的店铺
      /// 
      /// Locales: zh-Hans
      static func center_myshop_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myshop_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的打赏
      /// 
      /// Locales: zh-Hans
      static func center_myaward_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myaward_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我要打赏
      /// 
      /// Locales: zh-Hans
      static func butotn_title_ogratuity(_: Void = ()) -> String {
        return NSLocalizedString("butotn_title_ogratuity", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 手机号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_phone_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_phone_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 手机号码
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_mobile_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_mobile_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 手续费
      /// 
      /// Locales: zh-Hans
      static func eureka_decimalrow_title_factorage(_: Void = ()) -> String {
        return NSLocalizedString("eureka_decimalrow_title_factorage", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 打赏
      /// 
      /// Locales: zh-Hans
      static func center_myaward_reward_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myaward_reward_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 打赏排行榜
      /// 
      /// Locales: zh-Hans
      static func center_myaward_ranklist_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myaward_ranklist_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 投资与本理财计划的收益的应纳税款，由投资人自行缴纳，但若银行根据法令的规定或税务等国家机关的命令或要求，银行有义务代缴客户承担的税费时，银行将进行代扣代缴。
      /// 
      /// Locales: zh-Hans
      static func product_detail_instruction(_: Void = ()) -> String {
        return NSLocalizedString("product_detail_instruction", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 投资理财
      /// 
      /// Locales: zh-Hans
      static func section_invest(_: Void = ()) -> String {
        return NSLocalizedString("section_invest", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 报名即将截止
      /// 
      /// Locales: zh-Hans
      static func string_title_end_sign(_: Void = ()) -> String {
        return NSLocalizedString("string_title_end_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 报名成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_sign_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_sign_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 抽奖未开始
      /// 
      /// Locales: zh-Hans
      static func controller_title_not_star(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_not_star", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 拨打
      /// 
      /// Locales: zh-Hans
      static func alertTitle_dials(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_dials", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 拨打客户服务热线?
      /// 
      /// Locales: zh-Hans
      static func alertTitle_call_service_phone(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_call_service_phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 拨打电话
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_callup(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_callup", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 持卡人
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_card_name_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_card_name_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 指纹不匹配
      /// 
      /// Locales: zh-Hans
      static func alertTitle_finger_no_match(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_finger_no_match", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 提现
      /// 
      /// Locales: zh-Hans
      static func view_title_withdraw(_: Void = ()) -> String {
        return NSLocalizedString("view_title_withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 提现金额
      /// 
      /// Locales: zh-Hans
      static func withdraw_amount_desc(_: Void = ()) -> String {
        return NSLocalizedString("withdraw_amount_desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 提示
      /// 
      /// Locales: zh-Hans
      static func alertTitle_tip(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 搜索
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_search(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_search", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 搜索无结果
      /// 
      /// Locales: zh-Hans
      static func none_search_title(_: Void = ()) -> String {
        return NSLocalizedString("none_search_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 支付密码应为6位数字
      /// 
      /// Locales: zh-Hans
      static func alertTitle_password_count_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_password_count_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 支付密码应为6位数字
      /// 
      /// Locales: zh-Hans
      static func center_setting_paypassLengthError(_: Void = ()) -> String {
        return NSLocalizedString("center_setting_paypassLengthError", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 支付密码设置成功！
      /// 
      /// Locales: zh-Hans
      static func alertTitle_pay_password_set_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_pay_password_set_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收款人信息
      /// 
      /// Locales: zh-Hans
      static func eureka_section_receiver_info_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_receiver_info_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收藏
      /// 
      /// Locales: zh-Hans
      static func button_title_collect(_: Void = ()) -> String {
        return NSLocalizedString("button_title_collect", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收货人地址不能为空
      /// 
      /// Locales: zh-Hans
      static func center_address_addressEmpty(_: Void = ()) -> String {
        return NSLocalizedString("center_address_addressEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收货人姓名不能为空
      /// 
      /// Locales: zh-Hans
      static func center_address_nameEmpty(_: Void = ()) -> String {
        return NSLocalizedString("center_address_nameEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收货人电话不能为空
      /// 
      /// Locales: zh-Hans
      static func center_address_phoneEmpty(_: Void = ()) -> String {
        return NSLocalizedString("center_address_phoneEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收货成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_receive_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_receive_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收银员
      /// 
      /// Locales: zh-Hans
      static func store_permission_cash(_: Void = ()) -> String {
        return NSLocalizedString("store_permission_cash", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 敬请期待!
      /// 
      /// Locales: zh-Hans
      static func label_title_expect(_: Void = ()) -> String {
        return NSLocalizedString("label_title_expect", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 新一期的抽奖尚未开始
      /// 
      /// Locales: zh-Hans
      static func label_title_new_lottery(_: Void = ()) -> String {
        return NSLocalizedString("label_title_new_lottery", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 是否关闭指纹解锁
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_close_finger(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_close_finger", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 是否呼叫管家
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_call_butler(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_call_butler", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 是否呼叫网点服务电话
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_call_Service(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_call_Service", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 是否清理缓存
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_clean_cache(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_clean_cache", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更多
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_more(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_more", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改登录手机号
      /// 
      /// Locales: zh-Hans
      static func controller_title_update_mobile(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_update_mobile", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 更改设置
      /// 
      /// Locales: zh-Hans
      static func alertTitle_setting(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最多添加四张图片
      /// 
      /// Locales: zh-Hans
      static func alertTitle_max_add_image(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_max_add_image", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最新入驻
      /// 
      /// Locales: zh-Hans
      static func string_title_latest_in(_: Void = ()) -> String {
        return NSLocalizedString("string_title_latest_in", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最新发布
      /// 
      /// Locales: zh-Hans
      static func string_title_latest_release(_: Void = ()) -> String {
        return NSLocalizedString("string_title_latest_release", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 最高评分
      /// 
      /// Locales: zh-Hans
      static func string_title_highest_score(_: Void = ()) -> String {
        return NSLocalizedString("string_title_highest_score", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 服务员
      /// 
      /// Locales: zh-Hans
      static func store_permission_waiter(_: Void = ()) -> String {
        return NSLocalizedString("store_permission_waiter", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 未获得有效图片
      /// 
      /// Locales: zh-Hans
      static func input_image_notfound(_: Void = ()) -> String {
        return NSLocalizedString("input_image_notfound", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 查看物流
      /// 
      /// Locales: zh-Hans
      static func button_title_logistics(_: Void = ()) -> String {
        return NSLocalizedString("button_title_logistics", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 查看评价
      /// 
      /// Locales: zh-Hans
      static func button_title_see_evaluation(_: Void = ()) -> String {
        return NSLocalizedString("button_title_see_evaluation", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 查看评价
      /// 
      /// Locales: zh-Hans
      static func center_myorder_appraise_title2(_: Void = ()) -> String {
        return NSLocalizedString("center_myorder_appraise_title2", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 查看详情
      /// 
      /// Locales: zh-Hans
      static func butotn_title_look_details(_: Void = ()) -> String {
        return NSLocalizedString("butotn_title_look_details", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 汇款转账
      /// 
      /// Locales: zh-Hans
      static func shortcut_transfer_account(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_transfer_account", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 没有可以选择的照片
      /// 
      /// Locales: zh-Hans
      static func image_picker_button_no_available_photo(_: Void = ()) -> String {
        return NSLocalizedString("image_picker_button_no_available_photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 没有相关数据
      /// 
      /// Locales: zh-Hans
      static func none_data_title(_: Void = ()) -> String {
        return NSLocalizedString("none_data_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 注销
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_logout(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 活动无法查看
      /// 
      /// Locales: zh-Hans
      static func none_event_title(_: Void = ()) -> String {
        return NSLocalizedString("none_event_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 消息失效
      /// 
      /// Locales: zh-Hans
      static func label_title_lose_message(_: Void = ()) -> String {
        return NSLocalizedString("label_title_lose_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 添加
      /// 
      /// Locales: zh-Hans
      static func shortcut_add_new(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_add_new", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 添加新地址
      /// 
      /// Locales: zh-Hans
      static func none_address_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_address_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 添加银行卡
      /// 
      /// Locales: zh-Hans
      static func none_card_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_card_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清理成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_clean_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_clean_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 清理缓存
      /// 
      /// Locales: zh-Hans
      static func alertTitle_clean_cache(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_clean_cache", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static func controller_title_hot_goods(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_hot_goods", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static func label_title_hot_good(_: Void = ()) -> String {
        return NSLocalizedString("label_title_hot_good", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 热门商品
      /// 
      /// Locales: zh-Hans
      static func section_goods(_: Void = ()) -> String {
        return NSLocalizedString("section_goods", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 爱吃爱玩
      /// 
      /// Locales: zh-Hans
      static func controller_title_love_food(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_love_food", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 爱逛爱买
      /// 
      /// Locales: zh-Hans
      static func controller_title_love_buy(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_love_buy", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 物流信息
      /// 
      /// Locales: zh-Hans
      static func center_myorder_logistics_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myorder_logistics_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 物流跟踪
      /// 
      /// Locales: zh-Hans
      static func label_title_logistics_tracking(_: Void = ()) -> String {
        return NSLocalizedString("label_title_logistics_tracking", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 现场活动
      /// 
      /// Locales: zh-Hans
      static func label_title_live_event(_: Void = ()) -> String {
        return NSLocalizedString("label_title_live_event", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 现金还款
      /// 
      /// Locales: zh-Hans
      static func controller_title_money_repayment(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_money_repayment", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 理财e账户
      /// 
      /// Locales: zh-Hans
      static func shortcut_eaccount(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_eaccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 理财产品期末收益=投资本金x理财产品预期年化净收益率/365x实际理财天数
      /// 
      /// Locales: zh-Hans
      static func product_profit_estimated_func(_: Void = ()) -> String {
        return NSLocalizedString("product_profit_estimated_func", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 用户名应为英文字母或汉字开头的4-16位字符中英文、数字组成
      /// 
      /// Locales: zh-Hans
      static func alertTitle_userName_format_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_userName_format_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 由于商家修改价格，当前订单金额和付款金额不一致无法付款，请联系商家核对后再付款
      /// 
      /// Locales: zh-Hans
      static func alertTitle_order_price_update(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_order_price_update", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 申请成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_apply_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_apply_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 申请退款
      /// 
      /// Locales: zh-Hans
      static func button_title_apply_drawback(_: Void = ()) -> String {
        return NSLocalizedString("button_title_apply_drawback", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 申请退款
      /// 
      /// Locales: zh-Hans
      static func button_title_drawback(_: Void = ()) -> String {
        return NSLocalizedString("button_title_drawback", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 界面5分钟没有操作，退出登录
      /// 
      /// Locales: zh-Hans
      static func alertTitle_logout(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 登录
      /// 
      /// Locales: zh-Hans
      static func controller_title_load(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_load", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 登录密码设置成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_load_password_set_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_load_password_set_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 百度地图
      /// 
      /// Locales: zh-Hans
      static func alertTitle_baidu_map(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_baidu_map", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 看广告
      /// 
      /// Locales: zh-Hans
      static func section_watch_advertisement(_: Void = ()) -> String {
        return NSLocalizedString("section_watch_advertisement", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 砸金蛋 抽大奖
      /// 
      /// Locales: zh-Hans
      static func controller_title_lottery(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_lottery", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static func alertTitle_confirm(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static func button_title_confirm(_: Void = ()) -> String {
        return NSLocalizedString("button_title_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定删除宝贝? 
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_delete_goods(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_delete_goods", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定取消报名? 
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_cancel_sign(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_cancel_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定取消订单? 
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_cancel_order(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_cancel_order", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认买单%.2f元
      /// 
      /// Locales: zh-Hans
      static func mall_discount_confirm_title(_ value1: Double) -> String {
        return String(format: NSLocalizedString("mall_discount_confirm_title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 确认充值
      /// 
      /// Locales: zh-Hans
      static func charge_button_confirm(_: Void = ()) -> String {
        return NSLocalizedString("charge_button_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认删除地址? 
      /// 
      /// Locales: zh-Hans
      static func alertTitle_is_delete_address(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_is_delete_address", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认提现
      /// 
      /// Locales: zh-Hans
      static func withdraw_button_confirm(_: Void = ()) -> String {
        return NSLocalizedString("withdraw_button_confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认支付%@元
      /// 
      /// Locales: zh-Hans
      static func bank_payment_confirm_pay(_ value1: String) -> String {
        return String(format: NSLocalizedString("bank_payment_confirm_pay", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 确认收货
      /// 
      /// Locales: zh-Hans
      static func button_title_confirm_received(_: Void = ()) -> String {
        return NSLocalizedString("button_title_confirm_received", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确认收货成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_confirm_receive_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_confirm_receive_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans
      static func label_title_integral(_: Void = ()) -> String {
        return NSLocalizedString("label_title_integral", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分
      /// 
      /// Locales: zh-Hans
      static func string_title_integral(_: Void = ()) -> String {
        return NSLocalizedString("string_title_integral", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分宝
      /// 
      /// Locales: zh-Hans
      static func shortcut_point_mall(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_point_mall", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分明细
      /// 
      /// Locales: zh-Hans
      static func controller_title_point_detail(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_point_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分最多
      /// 
      /// Locales: zh-Hans
      static func string_title_most_points(_: Void = ()) -> String {
        return NSLocalizedString("string_title_most_points", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分贡献成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_contribution_score_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_contribution_score_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分超限，请重新输入
      /// 
      /// Locales: zh-Hans
      static func input_point_limit(_: Void = ()) -> String {
        return NSLocalizedString("input_point_limit", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分超额,请重新输入
      /// 
      /// Locales: zh-Hans
      static func integral_exchangepoint_warningText2(_: Void = ()) -> String {
        return NSLocalizedString("integral_exchangepoint_warningText2", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分超额,请重新输入
      /// 
      /// Locales: zh-Hans
      static func label_title_integral_excess(_: Void = ()) -> String {
        return NSLocalizedString("label_title_integral_excess", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分还款
      /// 
      /// Locales: zh-Hans
      static func controller_title_integral_repayment(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_integral_repayment", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 积分还款成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_integral_pay_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_integral_pay_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 稍后更新
      /// 
      /// Locales: zh-Hans
      static func alertTitle_update_later(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_update_later", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 立刻购买
      /// 
      /// Locales: zh-Hans
      static func button_title_buy_now(_: Void = ()) -> String {
        return NSLocalizedString("button_title_buy_now", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 立即参加
      /// 
      /// Locales: zh-Hans
      static func label_title_join_now(_: Void = ()) -> String {
        return NSLocalizedString("label_title_join_now", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 立即报名
      /// 
      /// Locales: zh-Hans
      static func alertTitle_now_sign(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_now_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 立即登录
      /// 
      /// Locales: zh-Hans
      static func point_home_button_login(_: Void = ()) -> String {
        return NSLocalizedString("point_home_button_login", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 签到
      /// 
      /// Locales: zh-Hans
      static func string_title_sign(_: Void = ()) -> String {
        return NSLocalizedString("string_title_sign", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 精选促销
      /// 
      /// Locales: zh-Hans
      static func label_title_sales_promotion(_: Void = ()) -> String {
        return NSLocalizedString("label_title_sales_promotion", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 精选促销
      /// 
      /// Locales: zh-Hans
      static func section_promotion(_: Void = ()) -> String {
        return NSLocalizedString("section_promotion", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 系统默认快捷菜单不可修改！
      /// 
      /// Locales: zh-Hans
      static func alertTitle_quickmenu_cannotfix(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_quickmenu_cannotfix", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 绑定他行银行卡
      /// 
      /// Locales: zh-Hans
      static func bank_bind_other_card_title(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_other_card_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 绑定本行银行卡
      /// 
      /// Locales: zh-Hans
      static func bank_bind_card_title(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_card_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 结束时间不能早于开始时间
      /// 
      /// Locales: zh-Hans
      static func button_title_end_early_as_begin(_: Void = ()) -> String {
        return NSLocalizedString("button_title_end_early_as_begin", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 美食
      /// 
      /// Locales: zh-Hans
      static func string_title_food(_: Void = ()) -> String {
        return NSLocalizedString("string_title_food", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 联系管家
      /// 
      /// Locales: zh-Hans
      static func controller_title_contact_butler(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_contact_butler", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 联系管家
      /// 
      /// Locales: zh-Hans
      static func shortcut_contact_butler(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_contact_butler", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 苹果地图
      /// 
      /// Locales: zh-Hans
      static func alertTitle_apple_map(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_apple_map", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 获取验证码
      /// 
      /// Locales: zh-Hans
      static func button_title_get_code(_: Void = ()) -> String {
        return NSLocalizedString("button_title_get_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 解除绑定
      /// 
      /// Locales: zh-Hans
      static func alertTitle_remove_binding(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_remove_binding", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 解除绑定
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_unbind(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_unbind", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 订单取消成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_order_cancel_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_order_cancel_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 订单已经评价过了
      /// 
      /// Locales: zh-Hans
      static func alertTitle_order_evaluated(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_order_evaluated", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 订单编号:%@
      /// 
      /// Locales: zh-Hans
      static func mall_ordernumber(_ value1: String) -> String {
        return String(format: NSLocalizedString("mall_ordernumber", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// zh-Hans translation: 评价
      /// 
      /// Locales: zh-Hans
      static func button_title_evaluate(_: Void = ()) -> String {
        return NSLocalizedString("button_title_evaluate", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 评价
      /// 
      /// Locales: zh-Hans
      static func button_title_evaluation(_: Void = ()) -> String {
        return NSLocalizedString("button_title_evaluation", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 评价成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_evaluation_sucess(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_evaluation_sucess", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 评价至少为1星
      /// 
      /// Locales: zh-Hans
      static func mbprogressHud_have_commented_service(_: Void = ()) -> String {
        return NSLocalizedString("mbprogressHud_have_commented_service", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 该消息已被撤销
      /// 
      /// Locales: zh-Hans
      static func titleLabel_title_revoke_message(_: Void = ()) -> String {
        return NSLocalizedString("titleLabel_title_revoke_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请允许读取您的照片
      /// 
      /// Locales: zh-Hans
      static func alertTitle_permission_photos(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_permission_photos", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请勾选同意银行协议
      /// 
      /// Locales: zh-Hans
      static func input_not_accept_tos(_: Void = ()) -> String {
        return NSLocalizedString("input_not_accept_tos", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请在iPhone的“设置－隐私－相机”选项中，允许本应用访问你的相机。
      /// 
      /// Locales: zh-Hans
      static func alertTitle_permission_camera(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_permission_camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请填写备注(非必需)
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_remark_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_remark_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请您先评分
      /// 
      /// Locales: zh-Hans
      static func mbprogressHud_please_score(_: Void = ()) -> String {
        return NSLocalizedString("mbprogressHud_please_score", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请收到货后，再确认收货，否则您可能财物两空！
      /// 
      /// Locales: zh-Hans
      static func alertTitle_confirm_receive(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_confirm_receive", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请正确填写所有必填项
      /// 
      /// Locales: zh-Hans
      static func input_empty(_: Void = ()) -> String {
        return NSLocalizedString("input_empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请补充退款说明
      /// 
      /// Locales: zh-Hans
      static func placeHoder_title_refund_explain(_: Void = ()) -> String {
        return NSLocalizedString("placeHoder_title_refund_explain", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入100的倍数,1000积分起兑
      /// 
      /// Locales: zh-Hans
      static func integral_exchangepoint_warningText1(_: Void = ()) -> String {
        return NSLocalizedString("integral_exchangepoint_warningText1", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入100的倍数,1000积分起还
      /// 
      /// Locales: zh-Hans
      static func label_title_100_integer(_: Void = ()) -> String {
        return NSLocalizedString("label_title_100_integer", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入你的问题
      /// 
      /// Locales: zh-Hans
      static func placeHoder_title_enter_question(_: Void = ()) -> String {
        return NSLocalizedString("placeHoder_title_enter_question", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入姓名
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_write_name(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_write_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入手机号
      /// 
      /// Locales: zh-Hans
      static func error_title_input_mobile(_: Void = ()) -> String {
        return NSLocalizedString("error_title_input_mobile", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入持卡人姓名
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_name_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_name_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入持卡人身份证号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_id_placeholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_id_placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入搜索关键字
      /// 
      /// Locales: zh-Hans
      static func placeHoder_title_enter_search_keywords(_: Void = ()) -> String {
        return NSLocalizedString("placeHoder_title_enter_search_keywords", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入收款人卡号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_number_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_number_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入收款人姓名
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_name_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_name_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入收款人手机号(非必须)
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_to_mobile_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_to_mobile_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的姓名
      /// 
      /// Locales: zh-Hans
      static func alertTitle_name_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_name_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的格式，不能包括小数点
      /// 
      /// Locales: zh-Hans
      static func input_point_invalid_input(_: Void = ()) -> String {
        return NSLocalizedString("input_point_invalid_input", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的绵商银行卡号
      /// 
      /// Locales: zh-Hans
      static func bank_bind_card_InPutRightBankCard(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_card_InPutRightBankCard", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的身份证号
      /// 
      /// Locales: zh-Hans
      static func bank_bind_card_idcardLengthError(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_card_idcardLengthError", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的身份证号码
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_write_correct_idcard(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_write_correct_idcard", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入正确的邮政编码
      /// 
      /// Locales: zh-Hans
      static func alertTitle_postCode_error(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_postCode_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入登录密码
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_input_password(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_input_password", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入短信验证码
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_write_code(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_write_code", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入短信验证码
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_verify_code_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_verify_code_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入绵商行银行卡号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_number_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_number_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入身份证号码
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_write_idcard(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_write_idcard", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入转账金额
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_money_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_money_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入银行预留手机号
      /// 
      /// Locales: zh-Hans
      static func bank_bind_card_InPutReservedPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_card_InPutReservedPhoneNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入银行预留手机号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_phone_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_phone_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请输入预留手机号
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_write_mobile(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_write_mobile", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static func button_title_choose_begin_time(_: Void = ()) -> String {
        return NSLocalizedString("button_title_choose_begin_time", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static func button_title_choose_end_time(_: Void = ()) -> String {
        return NSLocalizedString("button_title_choose_end_time", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择开始日
      /// 
      /// Locales: zh-Hans
      static func placeHoder_title_choose_begin_time(_: Void = ()) -> String {
        return NSLocalizedString("placeHoder_title_choose_begin_time", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择答案
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_select_answer(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_select_answer", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择终止日
      /// 
      /// Locales: zh-Hans
      static func placeHoder_title_choose_end_time(_: Void = ()) -> String {
        return NSLocalizedString("placeHoder_title_choose_end_time", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择要删除的宝贝
      /// 
      /// Locales: zh-Hans
      static func alertTitle_choose_delete_goods(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_choose_delete_goods", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择退款原因
      /// 
      /// Locales: zh-Hans
      static func alertTitle_please_choose_reason(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_please_choose_reason", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择银行
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_bank_paceholder(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_bank_paceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 请选择银行卡
      /// 
      /// Locales: zh-Hans
      static func alertTitle_choose_bank(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_choose_bank", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 账单为0, 不需要付款
      /// 
      /// Locales: zh-Hans
      static func alertTtile_no_pay(_: Void = ()) -> String {
        return NSLocalizedString("alertTtile_no_pay", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 账号
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_card_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_card_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 身份证
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_id_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_id_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 转账进额
      /// 
      /// Locales: zh-Hans
      static func eureka_section_pay_money(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_pay_money", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 返回
      /// 
      /// Locales: zh-Hans
      static func barButtonItem_title_back(_: Void = ()) -> String {
        return NSLocalizedString("barButtonItem_title_back", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 返回
      /// 
      /// Locales: zh-Hans
      static func button_title_back(_: Void = ()) -> String {
        return NSLocalizedString("button_title_back", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 还有商品未评价
      /// 
      /// Locales: zh-Hans
      static func alertTitle_evaluate_at_least_one_star(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_evaluate_at_least_one_star", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 还款明细
      /// 
      /// Locales: zh-Hans
      static func controller_title_repayment_details(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_repayment_details", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 退款详情
      /// 
      /// Locales: zh-Hans
      static func center_myorder_refundDetail_title(_: Void = ()) -> String {
        return NSLocalizedString("center_myorder_refundDetail_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 选择银行卡
      /// 
      /// Locales: zh-Hans
      static func withdraw_chooseBank(_: Void = ()) -> String {
        return NSLocalizedString("withdraw_choose.bank", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 通过Home键验证已有的手机指纹
      /// 
      /// Locales: zh-Hans
      static func titleLabel_title_test_home_id(_: Void = ()) -> String {
        return NSLocalizedString("titleLabel_title_test_home_id", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 邀请成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_invite_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_invite_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 金额
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_money_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_money_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_bank_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_bank_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行卡
      /// 
      /// Locales: zh-Hans
      static func shortcut_bank_account(_: Void = ()) -> String {
        return NSLocalizedString("shortcut_bank_account", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行卡信息
      /// 
      /// Locales: zh-Hans
      static func eureka_section_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行卡明细
      /// 
      /// Locales: zh-Hans
      static func controller_title_bankcard_detail(_: Void = ()) -> String {
        return NSLocalizedString("controller_title_bankcard_detail", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行卡预留手机不符，请核对后再试，若银行卡预留手机号已变更，请更新手机号
      /// 
      /// Locales: zh-Hans
      static func bank_bind_card_InPutRightPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("bank_bind_card_InPutRightPhoneNumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 银行预约
      /// 
      /// Locales: zh-Hans
      static func center_reservation_title(_: Void = ()) -> String {
        return NSLocalizedString("center_reservation_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 销量最高
      /// 
      /// Locales: zh-Hans
      static func string_title_highest_sales(_: Void = ()) -> String {
        return NSLocalizedString("string_title_highest_sales", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 错误次数已达上限，请于3小时候再试
      /// 
      /// Locales: zh-Hans
      static func alertTitle_paypass_lock(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_paypass_lock", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 随便逛逛
      /// 
      /// Locales: zh-Hans
      static func none_order_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_order_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 领取任务成功
      /// 
      /// Locales: zh-Hans
      static func alertTitle_receive_job_success(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_receive_job_success", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 马上去参加
      /// 
      /// Locales: zh-Hans
      static func none_offloneEvent_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_offloneEvent_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 马上去更新
      /// 
      /// Locales: zh-Hans
      static func alertTitle_update_now(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_update_now", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 马上去逛逛
      /// 
      /// Locales: zh-Hans
      static func none_collection_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_collection_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 马上去逛逛
      /// 
      /// Locales: zh-Hans
      static func none_coupon_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_coupon_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 马上去领取
      /// 
      /// Locales: zh-Hans
      static func none_task_button_title(_: Void = ()) -> String {
        return NSLocalizedString("none_task_button_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 验证码
      /// 
      /// Locales: zh-Hans
      static func eureka_textrow_title_verify_code_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_textrow_title_verify_code_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 验证码输入错误，请重新输入
      /// 
      /// Locales: zh-Hans
      static func input_captcha_error(_: Void = ()) -> String {
        return NSLocalizedString("input_captcha_error", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 高德地图
      /// 
      /// Locales: zh-Hans
      static func alertTitle_gaode_map(_: Void = ()) -> String {
        return NSLocalizedString("alertTitle_gaode_map", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 默认排序
      /// 
      /// Locales: zh-Hans
      static func string_title_default(_: Void = ()) -> String {
        return NSLocalizedString("string_title_default", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: （支持绑定所有银联储蓄卡）
      /// 
      /// Locales: zh-Hans
      static func eureka_section_footer_title(_: Void = ()) -> String {
        return NSLocalizedString("eureka_section_footer_title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AppraiseTableViewCell.validate()
      try _ChoosePaymentAddNewCardCell.validate()
      try _DiscountListTableViewCell.validate()
      try _ListViewSecondMenuTableViewCell.validate()
      try _BrandDetailSectionHeaderView.validate()
      try _ShoppingSectionHeaderView.validate()
      try _HomWatchAdTableSectionHeaderView.validate()
      try _HomeSectionHeaderView.validate()
      try _RankListTableViewCell.validate()
      try _ChangeGoodsEventView.validate()
      try _ShopAddressTableViewCell.validate()
      try _TrendEventGoodsTableViewCell.validate()
      try _ShoppingGoodsEventTableViewCell.validate()
      try _RefundFlowView.validate()
      try _SubmitOrderSectionHeaderView.validate()
      try _ErrorPromptView.validate()
      try _ChooseCardTableViewCell.validate()
      try _BrandDetailCollectionReusableView.validate()
      try _AppraiseSectionHeaderView.validate()
      try _ShortcutsViewCell.validate()
      try _OnlineEventTableViewCell.validate()
      try _ChoosePaymentTableViewCell.validate()
      try _MallHomeHeaderView.validate()
      try _NoneBackgroundView.validate()
      try _MyMemberTableViewCell.validate()
      try _OfflineEventTableViewCell_SE.validate()
      try _ShopDetailSectionHeaderView.validate()
      try _MallHomeCheckInView.validate()
      try _OrderDeliveryTableViewCell.validate()
      try _CityActivityCollectionViewCell.validate()
      try _SubmitOrderTableViewCell.validate()
      try _BrandZoneView.validate()
      try _ShoppingGoodsTableViewCell.validate()
      try _LotteryResultView.validate()
      try _InputView.validate()
      try _DiscountTableViewCell.validate()
      try _OrderSubmitSuccessTableViewCell.validate()
      try _OrderAddressTableViewCell.validate()
      try _OrderConsumeTableViewCell.validate()
      try _ListViewFirstMenuTableViewCell.validate()
      try _AdvertTableViewCell.validate()
      try _ShoppingCatGoodsView.validate()
      try _MyCollectionTableViewCell.validate()
      try _NotificationTableViewCell.validate()
      try _PrizeTableViewCell.validate()
      try _MyPrizeTableViewCell.validate()
      try _DiscountView.validate()
      try _NoneBindUserView.validate()
      try _LogisticsTableViewCell.validate()
      try _OfflineEventTableViewCell.validate()
      try _GroupTableViewCell.validate()
      try _OrderGoodsSectionHeaderView.validate()
      try _BrandTableViewCell.validate()
    }
    
    struct _AccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AccountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "accountCellID"
      let name = "AccountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AddressManagementTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddressManagementTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "addressManagementCellID"
      let name = "AddressManagementTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddressManagementTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressManagementTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AdvertTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AdvertTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AdvertTableViewCell"
      let name = "AdvertTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AdvertTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdvertTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_time4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time4' is used in nib 'AdvertTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_play") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_play' is used in nib 'AdvertTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_people4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_people4' is used in nib 'AdvertTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AnswerQuestionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AnswerQuestionTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AnswerQuestionTableViewCell"
      let name = "AnswerQuestionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AnswerQuestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerQuestionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AppraiseSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppraiseSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppraiseSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppraiseSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_order_ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_order_ico_shop' is used in nib 'AppraiseSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AppraiseTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AppraiseTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AppraiseTableViewCell"
      let name = "AppraiseTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AppraiseTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppraiseTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ico_stars_g") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_stars_g' is used in nib 'AppraiseTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AwardRecordTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AwardRecordTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AwardRecordTableViewCell"
      let name = "AwardRecordTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AwardRecordTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AwardRecordTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BankCardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BankCardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BankCardTableViewCell"
      let name = "BankCardTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BankCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankCardTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BrandDetailCollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BrandDetailCollectionReusableView
      
      let bundle = R.hostingBundle
      let identifier = "BrandDetailCollectionReusableView"
      let name = "BrandDetailCollectionReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandDetailCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandDetailCollectionReusableView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_brandZone_icon_thehot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_icon_thehot' is used in nib 'BrandDetailCollectionReusableView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BrandDetailMoreTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BrandDetailMoreTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BrandDetailMoreTableViewCell"
      let name = "BrandDetailMoreTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandDetailMoreTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandDetailMoreTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BrandDetailSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BrandDetailSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandDetailSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandDetailSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_brandZone_icon_thehot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_icon_thehot' is used in nib 'BrandDetailSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BrandTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BrandTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BrandTableViewCell"
      let name = "BrandTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'BrandTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BrandZoneTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BrandZoneTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Bank.BrandZoneTableViewCell"
      let name = "BrandZoneTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandZoneTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandZoneTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BrandZoneView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BrandZoneView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BrandZoneView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrandZoneView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'BrandZoneView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ChangeGoodsEventView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChangeGoodsEventView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChangeGoodsEventView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangeGoodsEventView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "event_btn_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'event_btn_delete' is used in nib 'ChangeGoodsEventView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ChangeGoodsNumberView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChangeGoodsNumberView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChangeGoodsNumberView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangeGoodsNumberView
      }
      
      fileprivate init() {}
    }
    
    struct _ChooseCardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChooseCardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ChooseCardTableViewCell"
      let name = "ChooseCardTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChooseCardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChooseCardTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bank") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bank' is used in nib 'ChooseCardTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ChoosePaymentAddNewCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ChoosePaymentAddNewCardCell"
      let name = "ChoosePaymentAddNewCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'ChoosePaymentAddNewCardCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ChoosePaymentTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ChoosePaymentTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ChoosePaymentTableViewCell"
      let name = "ChoosePaymentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChoosePaymentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChoosePaymentTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "radio_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_selected' is used in nib 'ChoosePaymentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "msh_logo_s") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'msh_logo_s' is used in nib 'ChoosePaymentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_normal' is used in nib 'ChoosePaymentTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CityActivityCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CityActivityCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CityActivityCollectionViewCell"
      let name = "CityActivityCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CityActivityCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityActivityCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_1' is used in nib 'CityActivityCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_people4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_people4' is used in nib 'CityActivityCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CityActivityTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CityActivityTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SameActivityTableViewCell"
      let name = "CityActivityTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CityActivityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityActivityTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ClassiftionCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ClassiftionCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ClassiftionCollectionViewCell"
      let name = "ClassiftionCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClassiftionCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassiftionCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CreditTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CreditTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CreditTableViewCell"
      let name = "CreditTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CreditTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreditTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DetailTableViewCell"
      let name = "DetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DiscountListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DiscountListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DiscountListTableViewCell"
      let name = "DiscountListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DiscountListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscountListTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_order_ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_order_ico_shop' is used in nib 'DiscountListTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DiscountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DiscountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DiscountTableViewCell"
      let name = "DiscountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DiscountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in nib 'DiscountTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_discount_bg1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_discount_bg1' is used in nib 'DiscountTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DiscountView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiscountView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DiscountView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscountView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in nib 'DiscountView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ErrorPromptView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ErrorPromptView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ErrorPromptView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ErrorPromptView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_passerror_btn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_passerror_btn' is used in nib 'ErrorPromptView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_passerror_word") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_passerror_word' is used in nib 'ErrorPromptView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_passerror_pic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_passerror_pic' is used in nib 'ErrorPromptView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ExchangeRecordTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ExchangeRecordTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ExchangeRecordTableViewCell"
      let name = "ExchangeRecordTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ExchangeRecordTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExchangeRecordTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FeatureEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FeatureEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FeatureEventTableViewCellID"
      let name = "FeatureEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeatureEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureEventTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FeatureGoodsCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FeatureGoodsCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "FeatureGoodsCollectionCell"
      let name = "FeatureGoodsCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeatureGoodsCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureGoodsCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _FeatureGoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FeatureGoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FeatureGoodsTableViewCellID"
      let name = "FeatureGoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FeatureGoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeatureGoodsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GoodsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "GoodsCollectionViewCell"
      let name = "GoodsCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GoodsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GoodsListCollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsListCollectionReusableView
      
      let bundle = R.hostingBundle
      let identifier = "collectionHeader"
      let name = "GoodsListCollectionReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GoodsListCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsListCollectionReusableView
      }
      
      fileprivate init() {}
    }
    
    struct _GoodsListCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsListCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "GoodsListCollectionViewCell"
      let name = "GoodsListCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GoodsListCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsListCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "GoodsTableViewCell"
      let name = "GoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GroupTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GroupTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "GroupTableViewCell"
      let name = "GroupTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GroupTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GroupTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bank_arrow_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_arrow_more' is used in nib 'GroupTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomWatchAdTableSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomWatchAdTableSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomWatchAdTableSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomWatchAdTableSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'HomWatchAdTableSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSectionFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeSectionFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeSectionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSectionFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> HomeSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_ok") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_ok' is used in nib 'HomeSectionHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'HomeSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InputAccessoryToolbar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InputAccessoryToolbar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputAccessoryToolbar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputAccessoryToolbar
      }
      
      fileprivate init() {}
    }
    
    struct _InputAlertView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InputAlertView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InputView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_delete1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_delete1' is used in nib 'InputView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IntegralDetailMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IntegralDetailMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "integralDetailMenuTableViewCellID"
      let name = "IntegralDetailMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IntegralDetailMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IntegralDetailMenuTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ListViewFirstMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListViewFirstMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ListViewFirstMenuTableViewCell"
      let name = "ListViewFirstMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ListViewFirstMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListViewFirstMenuTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_goodslist_ic_option_all") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_goodslist_ic_option_all' is used in nib 'ListViewFirstMenuTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ListViewSecondMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListViewSecondMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ListViewSecondMenuTableViewCell"
      let name = "ListViewSecondMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ListViewSecondMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListViewSecondMenuTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_goodslist_ic_option_select") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_goodslist_ic_option_select' is used in nib 'ListViewSecondMenuTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LogisticsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LogisticsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "LogisticsTableViewCell"
      let name = "LogisticsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LogisticsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LogisticsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_spot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_spot' is used in nib 'LogisticsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LotteryResultView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LotteryResultView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LotteryResultView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LotteryResultView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "lottery_btn_share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lottery_btn_share' is used in nib 'LotteryResultView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lottery_btn_back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lottery_btn_back' is used in nib 'LotteryResultView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_close' is used in nib 'LotteryResultView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MallGoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MallGoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Bank.MallGoodsTableViewCell"
      let name = "MallGoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MallGoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MallGoodsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MallHomeCheckInView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MallHomeCheckInView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MallHomeCheckInView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MallHomeCheckInView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mallHome_checkin_success") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mallHome_checkin_success' is used in nib 'MallHomeCheckInView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mallHome_checkin_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mallHome_checkin_bg' is used in nib 'MallHomeCheckInView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MallHomeHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MallHomeHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MallHomeHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MallHomeHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_icon_no1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_icon_no1' is used in nib 'MallHomeHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_activity06") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity06' is used in nib 'MallHomeHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_activity07") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity07' is used in nib 'MallHomeHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MallHomeSectionHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MallHomeSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MallHomeSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MallHomeSectionHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyAwardTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyAwardTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MyAwardTableViewCell"
      let name = "MyAwardTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyAwardTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyAwardTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyCollectionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyCollectionTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "myCollectionTableViewCellID"
      let name = "MyCollectionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyCollectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectionTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'MyCollectionTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingcart_icon_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingcart_icon_delete' is used in nib 'MyCollectionTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyCouponSectionHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyCouponSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyCouponSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCouponSectionHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyCouponTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyCouponTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "myCouponTableViewCellID"
      let name = "MyCouponTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyCouponTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCouponTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyMemberTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyMemberTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "myMemberCellID"
      let name = "MyMemberTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyMemberTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyMemberTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'MyMemberTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_default' is used in nib 'MyMemberTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyOrderSectionFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyOrderSectionFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyOrderSectionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyOrderSectionFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _MyOrderSectionFooterView_SE: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyOrderSectionFooterView_SE"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyOrderSectionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyOrderSectionFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _MyOrderSectionHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyOrderSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyOrderSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyOrderSectionHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _MyOrderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyOrderTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MyOrderTableViewCell"
      let name = "MyOrderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyOrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyOrderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyPrizeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MyPrizeTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MyPrizeTableViewCell"
      let name = "MyPrizeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyPrizeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyPrizeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'MyPrizeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_prize") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_prize' is used in nib 'MyPrizeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_phone1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_phone1' is used in nib 'MyPrizeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyReservationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyReservationTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "myReservationCellID"
      let name = "MyReservationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyReservationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyReservationTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NewsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "newsMenuCellID"
      let name = "NewsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NewsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NoneBackgroundView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoneBackgroundView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NoneBackgroundView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoneBackgroundView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pic_goods_out") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_goods_out' is used in nib 'NoneBackgroundView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pic_goods_words") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_goods_words' is used in nib 'NoneBackgroundView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NoneBindUserView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoneBindUserView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NoneBindUserView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoneBindUserView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pic_words") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_words' is used in nib 'NoneBindUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_contact") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_contact' is used in nib 'NoneBindUserView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pic_noone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_noone' is used in nib 'NoneBindUserView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotificationTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NotificationTableViewCell"
      let name = "NotificationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'NotificationTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OfflineEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfflineEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OfflineEventTableViewCell"
      let name = "OfflineEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OfflineEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfflineEventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_time4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time4' is used in nib 'OfflineEventTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_people4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_people4' is used in nib 'OfflineEventTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OfflineEventTableViewCell_SE: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfflineEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OfflineEventTableViewCell"
      let name = "OfflineEventTableViewCell_SE"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OfflineEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfflineEventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_time4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time4' is used in nib 'OfflineEventTableViewCell_SE', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_people4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_people4' is used in nib 'OfflineEventTableViewCell_SE', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OnlineEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OnlineEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OnlineEventTableViewCell"
      let name = "OnlineEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OnlineEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnlineEventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "image_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image_default' is used in nib 'OnlineEventTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderAddressTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderAddressTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderAddressTableViewCell"
      let name = "OrderAddressTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderAddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderAddressTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_orderDetails_icon_site") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_orderDetails_icon_site' is used in nib 'OrderAddressTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderConsumeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderConsumeTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderConsumeTableViewCell"
      let name = "OrderConsumeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderConsumeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderConsumeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'OrderConsumeTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_qr") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_qr' is used in nib 'OrderConsumeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDeliveryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderDeliveryTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderDeliveryTableViewCell"
      let name = "OrderDeliveryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderDeliveryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDeliveryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in nib 'OrderDeliveryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_orderDetails_icon_site") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_orderDetails_icon_site' is used in nib 'OrderDeliveryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_orderDetails_icon_logistics_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_orderDetails_icon_logistics_01' is used in nib 'OrderDeliveryTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderGoodsSectionFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderGoodsSectionFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderGoodsSectionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderGoodsSectionFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _OrderGoodsSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderGoodsSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderGoodsSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderGoodsSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_list_call") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_list_call' is used in nib 'OrderGoodsSectionHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_order_ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_order_ico_shop' is used in nib 'OrderGoodsSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderGoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderGoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderGoodsTableViewCell"
      let name = "OrderGoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderGoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderGoodsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderInfoTableViewCell"
      let name = "OrderInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSubmitSuccessTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderSubmitSuccessTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderSubmitSuccessTableViewCell"
      let name = "OrderSubmitSuccessTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderSubmitSuccessTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSubmitSuccessTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'OrderSubmitSuccessTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_arrow_tiket") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_arrow_tiket' is used in nib 'OrderSubmitSuccessTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_order_ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_order_ico_shop' is used in nib 'OrderSubmitSuccessTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PrizeGoodsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrizeGoodsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PrizeGoodsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrizeGoodsView
      }
      
      fileprivate init() {}
    }
    
    struct _PrizePoolView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrizePoolView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PrizePoolView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrizePoolView
      }
      
      fileprivate init() {}
    }
    
    struct _PrizeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PrizeTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PrizeTableViewCell"
      let name = "PrizeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PrizeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrizeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_phone1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_phone1' is used in nib 'PrizeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RankListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RankListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RankListTableViewCell"
      let name = "RankListTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RankListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RankListTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_no.1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_no.1' is used in nib 'RankListTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RefundFlowView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RefundFlowView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RefundFlowView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RefundFlowView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_apply") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_apply' is used in nib 'RefundFlowView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RegionChoiceToolView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RegionChoiceToolView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RegionChoiceToolView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RegionChoiceToolView
      }
      
      fileprivate init() {}
    }
    
    struct _SaleGoodsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SaleGoodsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SaleGoodsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaleGoodsView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ShopAddressTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShopAddressTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "shopAddressTableViewCellID"
      let name = "ShopAddressTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopAddressTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopAddressTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_brandZone_btn_shop_call") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_btn_shop_call' is used in nib 'ShopAddressTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShopAuthTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShopAuthTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ShopAuthTableViewCell"
      let name = "ShopAuthTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopAuthTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopAuthTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShopDetailSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShopDetailSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopDetailSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopDetailSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_brandZone_icon_shop_address") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_icon_shop_address' is used in nib 'ShopDetailSectionHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_ic_shop_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_ic_shop_arrow' is used in nib 'ShopDetailSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShopDetailTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShopDetailTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "shopDetailTableViewCellID"
      let name = "ShopDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShoppingCatGoodsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShoppingCatGoodsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShoppingCatGoodsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShoppingCatGoodsView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_shoppingcart_icon_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingcart_icon_delete' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pic_invalid") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_invalid' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingCart_btn_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_minus' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingcart_icon_collection") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingcart_icon_collection' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingCart_btn_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_plus' is used in nib 'ShoppingCatGoodsView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShoppingGoodsEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShoppingGoodsEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ShoppingGoodsEventTableViewCell"
      let name = "ShoppingGoodsEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShoppingGoodsEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShoppingGoodsEventTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'ShoppingGoodsEventTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShoppingGoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShoppingGoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "shoppingGoodsTableViewCellID"
      let name = "ShoppingGoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShoppingGoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShoppingGoodsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_shoppingcart_icon_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingcart_icon_delete' is used in nib 'ShoppingGoodsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'ShoppingGoodsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingCart_btn_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_minus' is used in nib 'ShoppingGoodsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingcart_icon_collection") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingcart_icon_collection' is used in nib 'ShoppingGoodsTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingCart_btn_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_plus' is used in nib 'ShoppingGoodsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShoppingSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShoppingSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShoppingSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShoppingSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in nib 'ShoppingSectionHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_shop' is used in nib 'ShoppingSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShortcutsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ShortcutsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ShortcutsTableViewCell"
      let name = "ShortcutsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShortcutsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShortcutsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShortcutsViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShortcutsViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ShortcutsViewCell"
      let name = "ShortcutsViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShortcutsViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShortcutsViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_icon_hot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_icon_hot' is used in nib 'ShortcutsViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _StackButtonView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StackButtonView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StackButtonView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StackButtonView
      }
      
      fileprivate init() {}
    }
    
    struct _SubmitOrderSectionFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubmitOrderSectionFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SubmitOrderSectionFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubmitOrderSectionFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _SubmitOrderSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SubmitOrderSectionHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SubmitOrderSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubmitOrderSectionHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ico_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_shop' is used in nib 'SubmitOrderSectionHeaderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SubmitOrderTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SubmitOrderTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SubmitOrderTableViewCell"
      let name = "SubmitOrderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SubmitOrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubmitOrderTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_shoppingCart_btn_minus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_minus' is used in nib 'SubmitOrderTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_shoppingCart_btn_plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_shoppingCart_btn_plus' is used in nib 'SubmitOrderTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TrendEventGoodsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TrendEventGoodsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "trendEventGoodsTableViewCell"
      let name = "TrendEventGoodsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TrendEventGoodsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendEventGoodsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_time1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time1' is used in nib 'TrendEventGoodsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TrendEventTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TrendEventTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Bank.TrendEventTableViewCell"
      let name = "TrendEventTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TrendEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TrendEventTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WinInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WinInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WinInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WinInfoView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try myOrder.validate()
      try center.validate()
      try main.validate()
      try lottery.validate()
      try credit.validate()
      try discount.validate()
      try address.validate()
      try setting.validate()
      try mall.validate()
      try container.validate()
      try myLife.validate()
      try myMember.validate()
      try launchScreen.validate()
      try life.validate()
      try news.validate()
      try myAward.validate()
      try more.validate()
      try bank.validate()
      try session.validate()
      try myShop.validate()
      try point.validate()
    }
    
    struct address: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddressManagementTableViewController
      
      let addressManagementTableViewController = StoryboardViewControllerResource<AddressManagementTableViewController>(identifier: "AddressManagementTableViewController")
      let bundle = R.hostingBundle
      let name = "Address"
      
      func addressManagementTableViewController(_: Void = ()) -> AddressManagementTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressManagementTableViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_modifyAddressbtn_default_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_modifyAddressbtn_default_on' is used in storyboard 'Address', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center-myOrder_addressManagement_btn_location") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center-myOrder_addressManagement_btn_location' is used in storyboard 'Address', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_address_btn_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_address_btn_add' is used in storyboard 'Address', but couldn't be loaded.") }
        if _R.storyboard.address().addressManagementTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressManagementTableViewController' could not be loaded from storyboard 'Address' as 'AddressManagementTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct bank: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bindCardViewController = StoryboardViewControllerResource<BindCardViewController>(identifier: "BindCardViewController")
      let bundle = R.hostingBundle
      let cardLogoutViewController = StoryboardViewControllerResource<CardLogoutViewController>(identifier: "CardLogoutViewController")
      let cardsListViewController = StoryboardViewControllerResource<CardsListViewController>(identifier: "CardsListViewController")
      let name = "Bank"
      let recordFilterViewController = StoryboardViewControllerResource<RecordFilterViewController>(identifier: "RecordFilterViewController")
      
      func bindCardViewController(_: Void = ()) -> BindCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bindCardViewController)
      }
      
      func cardLogoutViewController(_: Void = ()) -> CardLogoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardLogoutViewController)
      }
      
      func cardsListViewController(_: Void = ()) -> CardsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardsListViewController)
      }
      
      func recordFilterViewController(_: Void = ()) -> RecordFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recordFilterViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "logout_pic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout_pic' is used in storyboard 'Bank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bank_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_check' is used in storyboard 'Bank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_add_a_bank_card") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add_a_bank_card' is used in storyboard 'Bank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_check1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check1' is used in storyboard 'Bank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_bg' is used in storyboard 'Bank', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_calendar1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_calendar1' is used in storyboard 'Bank', but couldn't be loaded.") }
        if _R.storyboard.bank().cardsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardsListViewController' could not be loaded from storyboard 'Bank' as 'CardsListViewController'.") }
        if _R.storyboard.bank().cardLogoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardLogoutViewController' could not be loaded from storyboard 'Bank' as 'CardLogoutViewController'.") }
        if _R.storyboard.bank().recordFilterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recordFilterViewController' could not be loaded from storyboard 'Bank' as 'RecordFilterViewController'.") }
        if _R.storyboard.bank().bindCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bindCardViewController' could not be loaded from storyboard 'Bank' as 'BindCardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct center: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let clerkDetailsViewController = StoryboardViewControllerResource<ClerkDetailsViewController>(identifier: "ClerkDetailsViewController")
      let helpCenterHomeViewController = StoryboardViewControllerResource<HelpCenterHomeViewController>(identifier: "HelpCenterHomeViewController")
      let name = "Center"
      
      func clerkDetailsViewController(_: Void = ()) -> ClerkDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: clerkDetailsViewController)
      }
      
      func helpCenterHomeViewController(_: Void = ()) -> HelpCenterHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpCenterHomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sweep") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sweep' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_more' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_member") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_member' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_04_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_04_on' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_contributepoint") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_contributepoint' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_credit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_credit' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_bankcard_x") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_bankcard_x' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_receipt_of_goods") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_receipt_of_goods' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_to_be_refunded") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_to_be_refunded' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_more' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_to_be_shipped") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_to_be_shipped' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_left' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_pending_payment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_pending_payment' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "banner_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'banner_user' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_default' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_no_shop_assistant") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_no_shop_assistant' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_04_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_04_off' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_news") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_news' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_all_orders") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_all_orders' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_my_life") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_my_life' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_help") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_help' is used in storyboard 'Center', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clerk_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clerk_bg' is used in storyboard 'Center', but couldn't be loaded.") }
        if _R.storyboard.center().clerkDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'clerkDetailsViewController' could not be loaded from storyboard 'Center' as 'ClerkDetailsViewController'.") }
        if _R.storyboard.center().helpCenterHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpCenterHomeViewController' could not be loaded from storyboard 'Center' as 'HelpCenterHomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct container: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ContainerViewController
      
      let bundle = R.hostingBundle
      let captchaViewController = StoryboardViewControllerResource<CaptchaViewController>(identifier: "CaptchaViewController")
      let name = "Container"
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")
      
      func captchaViewController(_: Void = ()) -> CaptchaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: captchaViewController)
      }
      
      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "startpage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'startpage' is used in storyboard 'Container', but couldn't be loaded.") }
        if _R.storyboard.container().captchaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'captchaViewController' could not be loaded from storyboard 'Container' as 'CaptchaViewController'.") }
        if _R.storyboard.container().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Container' as 'SplashViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct credit: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyCreditViewController
      
      let bundle = R.hostingBundle
      let debtDetailContentViewController = StoryboardViewControllerResource<DebtDetailContentViewController>(identifier: "DebtDetailContentViewController")
      let myCreditViewController = StoryboardViewControllerResource<MyCreditViewController>(identifier: "MyCreditViewController")
      let name = "Credit"
      
      func debtDetailContentViewController(_: Void = ()) -> DebtDetailContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: debtDetailContentViewController)
      }
      
      func myCreditViewController(_: Void = ()) -> MyCreditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCreditViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_calendar' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_credit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_credit' is used in storyboard 'Credit', but couldn't be loaded.") }
        if _R.storyboard.credit().myCreditViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCreditViewController' could not be loaded from storyboard 'Credit' as 'MyCreditViewController'.") }
        if _R.storyboard.credit().debtDetailContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'debtDetailContentViewController' could not be loaded from storyboard 'Credit' as 'DebtDetailContentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct discount: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DiscountListViewController
      
      let bundle = R.hostingBundle
      let discountBillTableViewController = StoryboardViewControllerResource<DiscountBillTableViewController>(identifier: "DiscountBillTableViewController")
      let discountListViewController = StoryboardViewControllerResource<DiscountListViewController>(identifier: "DiscountListViewController")
      let discountViewController = StoryboardViewControllerResource<DiscountViewController>(identifier: "DiscountViewController")
      let name = "Discount"
      let scanQRViewController = StoryboardViewControllerResource<ScanQRViewController>(identifier: "ScanQRViewController")
      
      func discountBillTableViewController(_: Void = ()) -> DiscountBillTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discountBillTableViewController)
      }
      
      func discountListViewController(_: Void = ()) -> DiscountListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discountListViewController)
      }
      
      func discountViewController(_: Void = ()) -> DiscountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: discountViewController)
      }
      
      func scanQRViewController(_: Void = ()) -> ScanQRViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanQRViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in storyboard 'Discount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "event_btn_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'event_btn_delete' is used in storyboard 'Discount', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_discount_bg1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_discount_bg1' is used in storyboard 'Discount', but couldn't be loaded.") }
        if _R.storyboard.discount().discountBillTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discountBillTableViewController' could not be loaded from storyboard 'Discount' as 'DiscountBillTableViewController'.") }
        if _R.storyboard.discount().discountListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discountListViewController' could not be loaded from storyboard 'Discount' as 'DiscountListViewController'.") }
        if _R.storyboard.discount().discountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'discountViewController' could not be loaded from storyboard 'Discount' as 'DiscountViewController'.") }
        if _R.storyboard.discount().scanQRViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanQRViewController' could not be loaded from storyboard 'Discount' as 'ScanQRViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "startpage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'startpage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct life: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Life"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tab_01_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_01_on' is used in storyboard 'Life', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_sweep") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sweep' is used in storyboard 'Life', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_news") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_news' is used in storyboard 'Life', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_01_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_01_off' is used in storyboard 'Life', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct lottery: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LotteryViewController
      
      let bundle = R.hostingBundle
      let lotteryViewController = StoryboardViewControllerResource<LotteryViewController>(identifier: "LotteryViewController")
      let myPrizeDetailViewController = StoryboardViewControllerResource<MyPrizeDetailViewController>(identifier: "MyPrizeDetailViewController")
      let name = "Lottery"
      let prizeDetailViewController = StoryboardViewControllerResource<PrizeDetailViewController>(identifier: "PrizeDetailViewController")
      let prizePoolViewController = StoryboardViewControllerResource<PrizePoolViewController>(identifier: "PrizePoolViewController")
      
      func lotteryViewController(_: Void = ()) -> LotteryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lotteryViewController)
      }
      
      func myPrizeDetailViewController(_: Void = ()) -> MyPrizeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPrizeDetailViewController)
      }
      
      func prizeDetailViewController(_: Void = ()) -> PrizeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: prizeDetailViewController)
      }
      
      func prizePoolViewController(_: Void = ()) -> PrizePoolViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: prizePoolViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "lottery_btn_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lottery_btn_more' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_prize") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_prize' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_2' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_carousel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_carousel' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_1' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "animation_01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'animation_01' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lottery_bg_4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lottery_bg_4' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_prize_pool") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_prize_pool' is used in storyboard 'Lottery', but couldn't be loaded.") }
        if _R.storyboard.lottery().prizeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'prizeDetailViewController' could not be loaded from storyboard 'Lottery' as 'PrizeDetailViewController'.") }
        if _R.storyboard.lottery().lotteryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lotteryViewController' could not be loaded from storyboard 'Lottery' as 'LotteryViewController'.") }
        if _R.storyboard.lottery().prizePoolViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'prizePoolViewController' could not be loaded from storyboard 'Lottery' as 'PrizePoolViewController'.") }
        if _R.storyboard.lottery().myPrizeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPrizeDetailViewController' could not be loaded from storyboard 'Lottery' as 'MyPrizeDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarController
      
      let bundle = R.hostingBundle
      let chooseCardViewController = StoryboardViewControllerResource<ChooseCardViewController>(identifier: "ChooseCardViewController")
      let choosePaymentViewController = StoryboardViewControllerResource<ChoosePaymentViewController>(identifier: "ChoosePaymentViewController")
      let helpViewController = StoryboardViewControllerResource<HelpViewController>(identifier: "HelpViewController")
      let inviteFromButlerViewController = StoryboardViewControllerResource<InviteFromButlerViewController>(identifier: "InviteFromButlerViewController")
      let inviteFromMemberViewController = StoryboardViewControllerResource<InviteFromMemberViewController>(identifier: "InviteFromMemberViewController")
      let inviteFromWaiterViewController = StoryboardViewControllerResource<InviteFromWaiterViewController>(identifier: "InviteFromWaiterViewController")
      let name = "Main"
      let notificationVC = StoryboardViewControllerResource<NotificationViewController>(identifier: "NotificationVC")
      let paySuccessViewController = StoryboardViewControllerResource<PaySuccessViewController>(identifier: "PaySuccessViewController")
      let pickerViewController = StoryboardViewControllerResource<PickerViewController>(identifier: "PickerViewController")
      let shareViewController = StoryboardViewControllerResource<ShareViewController>(identifier: "ShareViewController")
      let verifyPayPassViewController = StoryboardViewControllerResource<VerifyPayPassViewController>(identifier: "VerifyPayPassViewController")
      
      func chooseCardViewController(_: Void = ()) -> ChooseCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseCardViewController)
      }
      
      func choosePaymentViewController(_: Void = ()) -> ChoosePaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: choosePaymentViewController)
      }
      
      func helpViewController(_: Void = ()) -> HelpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpViewController)
      }
      
      func inviteFromButlerViewController(_: Void = ()) -> InviteFromButlerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFromButlerViewController)
      }
      
      func inviteFromMemberViewController(_: Void = ()) -> InviteFromMemberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFromMemberViewController)
      }
      
      func inviteFromWaiterViewController(_: Void = ()) -> InviteFromWaiterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFromWaiterViewController)
      }
      
      func notificationVC(_: Void = ()) -> NotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }
      
      func paySuccessViewController(_: Void = ()) -> PaySuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paySuccessViewController)
      }
      
      func pickerViewController(_: Void = ()) -> PickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickerViewController)
      }
      
      func shareViewController(_: Void = ()) -> ShareViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareViewController)
      }
      
      func verifyPayPassViewController(_: Void = ()) -> VerifyPayPassViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyPayPassViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pic_nail") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_nail' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_aboutUs_btn_wechat") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_aboutUs_btn_wechat' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_cloud_shield") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_cloud_shield' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_aboutUs_btn_friend") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_aboutUs_btn_friend' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_activity1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_aboutUs_btn_qq") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_aboutUs_btn_qq' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_code1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_code1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bank_arrow_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_arrow_more' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_success") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_success' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pass_input_box") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pass_input_box' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().inviteFromButlerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFromButlerViewController' could not be loaded from storyboard 'Main' as 'InviteFromButlerViewController'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationViewController'.") }
        if _R.storyboard.main().paySuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paySuccessViewController' could not be loaded from storyboard 'Main' as 'PaySuccessViewController'.") }
        if _R.storyboard.main().chooseCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseCardViewController' could not be loaded from storyboard 'Main' as 'ChooseCardViewController'.") }
        if _R.storyboard.main().choosePaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'choosePaymentViewController' could not be loaded from storyboard 'Main' as 'ChoosePaymentViewController'.") }
        if _R.storyboard.main().helpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpViewController' could not be loaded from storyboard 'Main' as 'HelpViewController'.") }
        if _R.storyboard.main().pickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickerViewController' could not be loaded from storyboard 'Main' as 'PickerViewController'.") }
        if _R.storyboard.main().verifyPayPassViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyPayPassViewController' could not be loaded from storyboard 'Main' as 'VerifyPayPassViewController'.") }
        if _R.storyboard.main().inviteFromWaiterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFromWaiterViewController' could not be loaded from storyboard 'Main' as 'InviteFromWaiterViewController'.") }
        if _R.storyboard.main().shareViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareViewController' could not be loaded from storyboard 'Main' as 'ShareViewController'.") }
        if _R.storyboard.main().inviteFromMemberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFromMemberViewController' could not be loaded from storyboard 'Main' as 'InviteFromMemberViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mall: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let brandDetailMoreViewController = StoryboardViewControllerResource<BrandDetailMoreViewController>(identifier: "BrandDetailMoreViewController")
      let brandDetailViewController = StoryboardViewControllerResource<BrandDetailViewController>(identifier: "BrandDetailViewController")
      let bundle = R.hostingBundle
      let chooseGoodsParamViewController = StoryboardViewControllerResource<ChooseGoodsParamViewController>(identifier: "ChooseGoodsParamViewController")
      let eventDescribeViewController = StoryboardViewControllerResource<EventDescribeViewController>(identifier: "EventDescribeViewController")
      let goodsDetailViewController = StoryboardViewControllerResource<GoodsDetailViewController>(identifier: "GoodsDetailViewController")
      let goodsListViewController = StoryboardViewControllerResource<GoodsListViewController>(identifier: "GoodsListViewController")
      let hotGoodsViewController = StoryboardViewControllerResource<HotGoodsViewController>(identifier: "HotGoodsViewController")
      let mallHomeID = StoryboardViewControllerResource<MallHomeViewController>(identifier: "MallHomeID")
      let moreBrandsViewController = StoryboardViewControllerResource<MoreBrandsViewController>(identifier: "MoreBrandsViewController")
      let name = "Mall"
      let salesGoodsViewController = StoryboardViewControllerResource<SalesGoodsViewController>(identifier: "SalesGoodsViewController")
      let searchGoodsViewController = StoryboardViewControllerResource<SearchGoodsViewController>(identifier: "SearchGoodsViewController")
      let shopDetailViewController = StoryboardViewControllerResource<ShopDetailViewController>(identifier: "ShopDetailViewController")
      let shopListViewController = StoryboardViewControllerResource<ShopListViewController>(identifier: "ShopListViewController")
      let trendEventViewController = StoryboardViewControllerResource<TrendEventViewController>(identifier: "trendEventViewController")
      
      func brandDetailMoreViewController(_: Void = ()) -> BrandDetailMoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: brandDetailMoreViewController)
      }
      
      func brandDetailViewController(_: Void = ()) -> BrandDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: brandDetailViewController)
      }
      
      func chooseGoodsParamViewController(_: Void = ()) -> ChooseGoodsParamViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseGoodsParamViewController)
      }
      
      func eventDescribeViewController(_: Void = ()) -> EventDescribeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventDescribeViewController)
      }
      
      func goodsDetailViewController(_: Void = ()) -> GoodsDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goodsDetailViewController)
      }
      
      func goodsListViewController(_: Void = ()) -> GoodsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: goodsListViewController)
      }
      
      func hotGoodsViewController(_: Void = ()) -> HotGoodsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: hotGoodsViewController)
      }
      
      func mallHomeID(_: Void = ()) -> MallHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mallHomeID)
      }
      
      func moreBrandsViewController(_: Void = ()) -> MoreBrandsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moreBrandsViewController)
      }
      
      func salesGoodsViewController(_: Void = ()) -> SalesGoodsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: salesGoodsViewController)
      }
      
      func searchGoodsViewController(_: Void = ()) -> SearchGoodsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchGoodsViewController)
      }
      
      func shopDetailViewController(_: Void = ()) -> ShopDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopDetailViewController)
      }
      
      func shopListViewController(_: Void = ()) -> ShopListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopListViewController)
      }
      
      func trendEventViewController(_: Void = ()) -> TrendEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trendEventViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_brandZone_btn_menu_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_btn_menu_more' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_icon_shop_realname") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_icon_shop_realname' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_cancel") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_cancel' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_03_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_03_on' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_ic_goods_shop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_ic_goods_shop' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_share' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_ic_arraw_left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_ic_arraw_left' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_back_to_top") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_back_to_top' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_ico_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_ico_search' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_ic_shoppingcart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_ic_shoppingcart' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_already_collect") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_already_collect' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_03_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_03_off' is used in storyboard 'Mall', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_btn_more_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_btn_more_menu' is used in storyboard 'Mall', but couldn't be loaded.") }
        if _R.storyboard.mall().goodsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goodsListViewController' could not be loaded from storyboard 'Mall' as 'GoodsListViewController'.") }
        if _R.storyboard.mall().brandDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'brandDetailViewController' could not be loaded from storyboard 'Mall' as 'BrandDetailViewController'.") }
        if _R.storyboard.mall().shopDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopDetailViewController' could not be loaded from storyboard 'Mall' as 'ShopDetailViewController'.") }
        if _R.storyboard.mall().searchGoodsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchGoodsViewController' could not be loaded from storyboard 'Mall' as 'SearchGoodsViewController'.") }
        if _R.storyboard.mall().chooseGoodsParamViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseGoodsParamViewController' could not be loaded from storyboard 'Mall' as 'ChooseGoodsParamViewController'.") }
        if _R.storyboard.mall().brandDetailMoreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'brandDetailMoreViewController' could not be loaded from storyboard 'Mall' as 'BrandDetailMoreViewController'.") }
        if _R.storyboard.mall().shopListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopListViewController' could not be loaded from storyboard 'Mall' as 'ShopListViewController'.") }
        if _R.storyboard.mall().moreBrandsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moreBrandsViewController' could not be loaded from storyboard 'Mall' as 'MoreBrandsViewController'.") }
        if _R.storyboard.mall().salesGoodsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'salesGoodsViewController' could not be loaded from storyboard 'Mall' as 'SalesGoodsViewController'.") }
        if _R.storyboard.mall().trendEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trendEventViewController' could not be loaded from storyboard 'Mall' as 'TrendEventViewController'.") }
        if _R.storyboard.mall().hotGoodsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'hotGoodsViewController' could not be loaded from storyboard 'Mall' as 'HotGoodsViewController'.") }
        if _R.storyboard.mall().mallHomeID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mallHomeID' could not be loaded from storyboard 'Mall' as 'MallHomeViewController'.") }
        if _R.storyboard.mall().goodsDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'goodsDetailViewController' could not be loaded from storyboard 'Mall' as 'GoodsDetailViewController'.") }
        if _R.storyboard.mall().eventDescribeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventDescribeViewController' could not be loaded from storyboard 'Mall' as 'EventDescribeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct more: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MoreTableViewController
      
      let bundle = R.hostingBundle
      let feedbackViewController = StoryboardViewControllerResource<FeedbackViewController>(identifier: "FeedbackViewController")
      let moreTableViewController = StoryboardViewControllerResource<MoreTableViewController>(identifier: "MoreTableViewController")
      let name = "More"
      
      func feedbackViewController(_: Void = ()) -> FeedbackViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedbackViewController)
      }
      
      func moreTableViewController(_: Void = ()) -> MoreTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moreTableViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "center_aboutUs_update") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_aboutUs_update' is used in storyboard 'More', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bank_arrow_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_arrow_more' is used in storyboard 'More', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_delete' is used in storyboard 'More', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_aboutUs_logo_us") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_aboutUs_logo_us' is used in storyboard 'More', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_feedback_add_pic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_feedback_add_pic' is used in storyboard 'More', but couldn't be loaded.") }
        if _R.storyboard.more().moreTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moreTableViewController' could not be loaded from storyboard 'More' as 'MoreTableViewController'.") }
        if _R.storyboard.more().feedbackViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedbackViewController' could not be loaded from storyboard 'More' as 'FeedbackViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myAward: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyAwardViewController
      
      let bundle = R.hostingBundle
      let couponUseSuccessViewController = StoryboardViewControllerResource<CouponUseSuccessViewController>(identifier: "CouponUseSuccessViewController")
      let myAwardViewController = StoryboardViewControllerResource<MyAwardViewController>(identifier: "MyAwardViewController")
      let name = "MyAward"
      let rankListViewController = StoryboardViewControllerResource<RankListViewController>(identifier: "RankListViewController")
      let rewardDetailViewController = StoryboardViewControllerResource<RewardDetailViewController>(identifier: "RewardDetailViewController")
      let rewardViewController = StoryboardViewControllerResource<RewardViewController>(identifier: "RewardViewController")
      
      func couponUseSuccessViewController(_: Void = ()) -> CouponUseSuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponUseSuccessViewController)
      }
      
      func myAwardViewController(_: Void = ()) -> MyAwardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAwardViewController)
      }
      
      func rankListViewController(_: Void = ()) -> RankListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rankListViewController)
      }
      
      func rewardDetailViewController(_: Void = ()) -> RewardDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rewardDetailViewController)
      }
      
      func rewardViewController(_: Void = ()) -> RewardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rewardViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bg11") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg11' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg_null") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg_null' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_red") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_red' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_to_update") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_to_update' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "head_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_default' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_has_been_hit-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_has_been_hit-1' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_use_yes") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_use_yes' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_thank") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_thank' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg-1' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_ranking_List") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_ranking_List' is used in storyboard 'MyAward', but couldn't be loaded.") }
        if _R.storyboard.myAward().rewardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rewardViewController' could not be loaded from storyboard 'MyAward' as 'RewardViewController'.") }
        if _R.storyboard.myAward().rewardDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rewardDetailViewController' could not be loaded from storyboard 'MyAward' as 'RewardDetailViewController'.") }
        if _R.storyboard.myAward().rankListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rankListViewController' could not be loaded from storyboard 'MyAward' as 'RankListViewController'.") }
        if _R.storyboard.myAward().myAwardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAwardViewController' could not be loaded from storyboard 'MyAward' as 'MyAwardViewController'.") }
        if _R.storyboard.myAward().couponUseSuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponUseSuccessViewController' could not be loaded from storyboard 'MyAward' as 'CouponUseSuccessViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myLife: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyLifeTableViewController
      
      let bundle = R.hostingBundle
      let couponDetailViewController = StoryboardViewControllerResource<CouponDetailViewController>(identifier: "CouponDetailViewController")
      let myCollectionViewController = StoryboardViewControllerResource<MyCollectionViewController>(identifier: "MyCollectionViewController")
      let myCouponViewController = StoryboardViewControllerResource<MyCouponViewController>(identifier: "MyCouponViewController")
      let myLifeTableViewController = StoryboardViewControllerResource<MyLifeTableViewController>(identifier: "MyLifeTableViewController")
      let name = "MyLife"
      let shoppingCartViewController = StoryboardViewControllerResource<ShoppingCartViewController>(identifier: "ShoppingCartViewController")
      let submitOrderViewController = StoryboardViewControllerResource<SubmitOrderViewController>(identifier: "SubmitOrderViewController")
      
      func couponDetailViewController(_: Void = ()) -> CouponDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: couponDetailViewController)
      }
      
      func myCollectionViewController(_: Void = ()) -> MyCollectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCollectionViewController)
      }
      
      func myCouponViewController(_: Void = ()) -> MyCouponViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCouponViewController)
      }
      
      func myLifeTableViewController(_: Void = ()) -> MyLifeTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myLifeTableViewController)
      }
      
      func shoppingCartViewController(_: Void = ()) -> ShoppingCartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shoppingCartViewController)
      }
      
      func submitOrderViewController(_: Void = ()) -> SubmitOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: submitOrderViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ico_address_center") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_address_center' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pic_qr_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pic_qr_bg' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_my_reward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_my_reward' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_collection") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_collection' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_tiket") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_tiket' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bank_arrow_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_arrow_more' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_indent") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_indent' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_orderDetails_icon_site") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_orderDetails_icon_site' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_choice_no") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_no' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_scan_code_payment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_scan_code_payment' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_tbuying") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_tbuying' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_arrow_tiket") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_arrow_tiket' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_shoppingcart") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_shoppingcart' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_banner_order6") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_banner_order6' is used in storyboard 'MyLife', but couldn't be loaded.") }
        if _R.storyboard.myLife().couponDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'couponDetailViewController' could not be loaded from storyboard 'MyLife' as 'CouponDetailViewController'.") }
        if _R.storyboard.myLife().submitOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'submitOrderViewController' could not be loaded from storyboard 'MyLife' as 'SubmitOrderViewController'.") }
        if _R.storyboard.myLife().shoppingCartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shoppingCartViewController' could not be loaded from storyboard 'MyLife' as 'ShoppingCartViewController'.") }
        if _R.storyboard.myLife().myLifeTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myLifeTableViewController' could not be loaded from storyboard 'MyLife' as 'MyLifeTableViewController'.") }
        if _R.storyboard.myLife().myCollectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCollectionViewController' could not be loaded from storyboard 'MyLife' as 'MyCollectionViewController'.") }
        if _R.storyboard.myLife().myCouponViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCouponViewController' could not be loaded from storyboard 'MyLife' as 'MyCouponViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myMember: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyMemberViewController
      
      let addMemberViewController = StoryboardViewControllerResource<AddMemberViewController>(identifier: "AddMemberViewController")
      let bundle = R.hostingBundle
      let memberEditViewController = StoryboardViewControllerResource<MemberEditViewController>(identifier: "MemberEditViewController")
      let myMemberViewController = StoryboardViewControllerResource<MyMemberViewController>(identifier: "MyMemberViewController")
      let name = "MyMember"
      
      func addMemberViewController(_: Void = ()) -> AddMemberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addMemberViewController)
      }
      
      func memberEditViewController(_: Void = ()) -> MemberEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: memberEditViewController)
      }
      
      func myMemberViewController(_: Void = ()) -> MyMemberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myMemberViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "head_default") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'head_default' is used in storyboard 'MyMember', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_edit' is used in storyboard 'MyMember', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_myMember_addMember_banner_members") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_myMember_addMember_banner_members' is used in storyboard 'MyMember', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_myMember_addresslist") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_myMember_addresslist' is used in storyboard 'MyMember', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_myMember_banner_members") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_myMember_banner_members' is used in storyboard 'MyMember', but couldn't be loaded.") }
        if _R.storyboard.myMember().memberEditViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'memberEditViewController' could not be loaded from storyboard 'MyMember' as 'MemberEditViewController'.") }
        if _R.storyboard.myMember().myMemberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myMemberViewController' could not be loaded from storyboard 'MyMember' as 'MyMemberViewController'.") }
        if _R.storyboard.myMember().addMemberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addMemberViewController' could not be loaded from storyboard 'MyMember' as 'AddMemberViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myOrder: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyOrderViewController
      
      let appraiseViewController = StoryboardViewControllerResource<AppraiseViewController>(identifier: "appraiseViewController")
      let bundle = R.hostingBundle
      let logisticsViewController = StoryboardViewControllerResource<LogisticsViewController>(identifier: "LogisticsViewController")
      let myOrderViewController = StoryboardViewControllerResource<MyOrderViewController>(identifier: "MyOrderViewController")
      let name = "MyOrder"
      let orderDetailsViewController = StoryboardViewControllerResource<OrderDetailsViewController>(identifier: "OrderDetailsViewController")
      let refundDetailTableViewController = StoryboardViewControllerResource<RefundDetailTableViewController>(identifier: "RefundDetailTableViewController")
      let refundGoodsTableViewController = StoryboardViewControllerResource<RefundGoodsTableViewController>(identifier: "RefundGoodsTableViewController")
      let refundReasonTableViewController = StoryboardViewControllerResource<RefundReasonTableViewController>(identifier: "RefundReasonTableViewController")
      let refundServiceTableViewController = StoryboardViewControllerResource<RefundServiceTableViewController>(identifier: "RefundServiceTableViewController")
      let serviceRefundDetailViewController = StoryboardViewControllerResource<ServiceRefundDetailViewController>(identifier: "ServiceRefundDetailViewController")
      
      func appraiseViewController(_: Void = ()) -> AppraiseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: appraiseViewController)
      }
      
      func logisticsViewController(_: Void = ()) -> LogisticsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logisticsViewController)
      }
      
      func myOrderViewController(_: Void = ()) -> MyOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrderViewController)
      }
      
      func orderDetailsViewController(_: Void = ()) -> OrderDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailsViewController)
      }
      
      func refundDetailTableViewController(_: Void = ()) -> RefundDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundDetailTableViewController)
      }
      
      func refundGoodsTableViewController(_: Void = ()) -> RefundGoodsTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundGoodsTableViewController)
      }
      
      func refundReasonTableViewController(_: Void = ()) -> RefundReasonTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundReasonTableViewController)
      }
      
      func refundServiceTableViewController(_: Void = ()) -> RefundServiceTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundServiceTableViewController)
      }
      
      func serviceRefundDetailViewController(_: Void = ()) -> ServiceRefundDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serviceRefundDetailViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_to_examine") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_to_examine' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_refund") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_refund' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_feedback_add_pic") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_feedback_add_pic' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_delete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_delete' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_apply") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_apply' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_search' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_banner_order2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_banner_order2' is used in storyboard 'MyOrder', but couldn't be loaded.") }
        if _R.storyboard.myOrder().logisticsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logisticsViewController' could not be loaded from storyboard 'MyOrder' as 'LogisticsViewController'.") }
        if _R.storyboard.myOrder().appraiseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'appraiseViewController' could not be loaded from storyboard 'MyOrder' as 'AppraiseViewController'.") }
        if _R.storyboard.myOrder().refundReasonTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundReasonTableViewController' could not be loaded from storyboard 'MyOrder' as 'RefundReasonTableViewController'.") }
        if _R.storyboard.myOrder().serviceRefundDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serviceRefundDetailViewController' could not be loaded from storyboard 'MyOrder' as 'ServiceRefundDetailViewController'.") }
        if _R.storyboard.myOrder().refundGoodsTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundGoodsTableViewController' could not be loaded from storyboard 'MyOrder' as 'RefundGoodsTableViewController'.") }
        if _R.storyboard.myOrder().orderDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailsViewController' could not be loaded from storyboard 'MyOrder' as 'OrderDetailsViewController'.") }
        if _R.storyboard.myOrder().myOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrderViewController' could not be loaded from storyboard 'MyOrder' as 'MyOrderViewController'.") }
        if _R.storyboard.myOrder().refundServiceTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundServiceTableViewController' could not be loaded from storyboard 'MyOrder' as 'RefundServiceTableViewController'.") }
        if _R.storyboard.myOrder().refundDetailTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundDetailTableViewController' could not be loaded from storyboard 'MyOrder' as 'RefundDetailTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct myShop: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyShopViewController
      
      let bundle = R.hostingBundle
      let myShopViewController = StoryboardViewControllerResource<MyShopViewController>(identifier: "MyShopViewController")
      let name = "MyShop"
      
      func myShopViewController(_: Void = ()) -> MyShopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myShopViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_role") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_role' is used in storyboard 'MyShop', but couldn't be loaded.") }
        if _R.storyboard.myShop().myShopViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myShopViewController' could not be loaded from storyboard 'MyShop' as 'MyShopViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct news: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "News"
      let newsDetailsViewController = StoryboardViewControllerResource<NewsDetailsViewController>(identifier: "NewsDetailsViewController")
      let newsHomeVC = StoryboardViewControllerResource<NewsHomeViewController>(identifier: "NewsHomeVC")
      
      func newsDetailsViewController(_: Void = ()) -> NewsDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsDetailsViewController)
      }
      
      func newsHomeVC(_: Void = ()) -> NewsHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsHomeVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tab_02_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_02_off' is used in storyboard 'News', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_02_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_02_on' is used in storyboard 'News', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_share' is used in storyboard 'News', but couldn't be loaded.") }
        if _R.storyboard.news().newsHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsHomeVC' could not be loaded from storyboard 'News' as 'NewsHomeViewController'.") }
        if _R.storyboard.news().newsDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsDetailsViewController' could not be loaded from storyboard 'News' as 'NewsDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct point: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let advertDetailViewController = StoryboardViewControllerResource<AdvertDetailViewController>(identifier: "AdvertDetailViewController")
      let advertViewController = StoryboardViewControllerResource<AdvertViewController>(identifier: "AdvertViewController")
      let bundle = R.hostingBundle
      let dailyTaskDetailViewController = StoryboardViewControllerResource<DailyTaskDetailViewController>(identifier: "DailyTaskDetailViewController")
      let dailyTaskViewController = StoryboardViewControllerResource<DailyTaskViewController>(identifier: "DailyTaskViewController")
      let exchangeDetailTableViewController = StoryboardViewControllerResource<ExchangeDetailTableViewController>(identifier: "ExchangeDetailTableViewController")
      let exchangeRecordViewController = StoryboardViewControllerResource<ExchangeRecordViewController>(identifier: "ExchangeRecordViewController")
      let integralDetailViewController = StoryboardViewControllerResource<IntegralDetailViewController>(identifier: "IntegralDetailViewController")
      let integralTableViewController = StoryboardViewControllerResource<IntegralTableViewController>(identifier: "IntegralTableViewController")
      let myEventDetailTableViewController = StoryboardViewControllerResource<MyEventDetailTableViewController>(identifier: "MyEventDetailTableViewController")
      let myEventDetailViewController = StoryboardViewControllerResource<MyEventDetailViewController>(identifier: "MyEventDetailViewController")
      let myEventViewController = StoryboardViewControllerResource<MyEventViewController>(identifier: "MyEventViewController")
      let myTaskViewController = StoryboardViewControllerResource<MyTaskViewController>(identifier: "MyTaskViewController")
      let name = "Point"
      let offlineEventDetailViewController = StoryboardViewControllerResource<OfflineEventDetailViewController>(identifier: "OfflineEventDetailViewController")
      let offlineEventViewController = StoryboardViewControllerResource<OfflineEventViewController>(identifier: "OfflineEventViewController")
      let webAdvertViewController = StoryboardViewControllerResource<WebAdvertViewController>(identifier: "WebAdvertViewController")
      
      func advertDetailViewController(_: Void = ()) -> AdvertDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: advertDetailViewController)
      }
      
      func advertViewController(_: Void = ()) -> AdvertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: advertViewController)
      }
      
      func dailyTaskDetailViewController(_: Void = ()) -> DailyTaskDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyTaskDetailViewController)
      }
      
      func dailyTaskViewController(_: Void = ()) -> DailyTaskViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dailyTaskViewController)
      }
      
      func exchangeDetailTableViewController(_: Void = ()) -> ExchangeDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeDetailTableViewController)
      }
      
      func exchangeRecordViewController(_: Void = ()) -> ExchangeRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: exchangeRecordViewController)
      }
      
      func integralDetailViewController(_: Void = ()) -> IntegralDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: integralDetailViewController)
      }
      
      func integralTableViewController(_: Void = ()) -> IntegralTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: integralTableViewController)
      }
      
      func myEventDetailTableViewController(_: Void = ()) -> MyEventDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myEventDetailTableViewController)
      }
      
      func myEventDetailViewController(_: Void = ()) -> MyEventDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myEventDetailViewController)
      }
      
      func myEventViewController(_: Void = ()) -> MyEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myEventViewController)
      }
      
      func myTaskViewController(_: Void = ()) -> MyTaskViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myTaskViewController)
      }
      
      func offlineEventDetailViewController(_: Void = ()) -> OfflineEventDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offlineEventDetailViewController)
      }
      
      func offlineEventViewController(_: Void = ()) -> OfflineEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offlineEventViewController)
      }
      
      func webAdvertViewController(_: Void = ()) -> WebAdvertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webAdvertViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mall_integral_activity02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity02' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_activity01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity01' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_the_custom") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_the_custom' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_activity03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity03' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_02_off") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_02_off' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_btn_banner1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_btn_banner1' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "center_orderDetails_icon_site") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'center_orderDetails_icon_site' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_task_terminaltime") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_task_terminaltime' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_btn_banner3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_btn_banner3' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab_02_on") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab_02_on' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_time3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time3' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_activity05") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_activity05' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_integral_btn_banner2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_integral_btn_banner2' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_task_bg_detail") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_task_bg_detail' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_task_icon_coupon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_task_icon_coupon' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_myActivity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_myActivity' is used in storyboard 'Point', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mall_brandZone_btn_more_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mall_brandZone_btn_more_menu' is used in storyboard 'Point', but couldn't be loaded.") }
        if _R.storyboard.point().myEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myEventViewController' could not be loaded from storyboard 'Point' as 'MyEventViewController'.") }
        if _R.storyboard.point().advertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'advertViewController' could not be loaded from storyboard 'Point' as 'AdvertViewController'.") }
        if _R.storyboard.point().dailyTaskDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyTaskDetailViewController' could not be loaded from storyboard 'Point' as 'DailyTaskDetailViewController'.") }
        if _R.storyboard.point().myTaskViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myTaskViewController' could not be loaded from storyboard 'Point' as 'MyTaskViewController'.") }
        if _R.storyboard.point().webAdvertViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webAdvertViewController' could not be loaded from storyboard 'Point' as 'WebAdvertViewController'.") }
        if _R.storyboard.point().integralTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'integralTableViewController' could not be loaded from storyboard 'Point' as 'IntegralTableViewController'.") }
        if _R.storyboard.point().offlineEventDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offlineEventDetailViewController' could not be loaded from storyboard 'Point' as 'OfflineEventDetailViewController'.") }
        if _R.storyboard.point().exchangeRecordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeRecordViewController' could not be loaded from storyboard 'Point' as 'ExchangeRecordViewController'.") }
        if _R.storyboard.point().offlineEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offlineEventViewController' could not be loaded from storyboard 'Point' as 'OfflineEventViewController'.") }
        if _R.storyboard.point().myEventDetailTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myEventDetailTableViewController' could not be loaded from storyboard 'Point' as 'MyEventDetailTableViewController'.") }
        if _R.storyboard.point().integralDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'integralDetailViewController' could not be loaded from storyboard 'Point' as 'IntegralDetailViewController'.") }
        if _R.storyboard.point().exchangeDetailTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'exchangeDetailTableViewController' could not be loaded from storyboard 'Point' as 'ExchangeDetailTableViewController'.") }
        if _R.storyboard.point().dailyTaskViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dailyTaskViewController' could not be loaded from storyboard 'Point' as 'DailyTaskViewController'.") }
        if _R.storyboard.point().myEventDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myEventDetailViewController' could not be loaded from storyboard 'Point' as 'MyEventDetailViewController'.") }
        if _R.storyboard.point().advertDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'advertDetailViewController' could not be loaded from storyboard 'Point' as 'AdvertDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct session: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let fingerLoginViewController = StoryboardViewControllerResource<FingerLoginViewController>(identifier: "FingerLoginViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Session"
      let paypassNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "PaypassNavigationController")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let setPayPasswordViewController = StoryboardViewControllerResource<SetPayPasswordViewController>(identifier: "SetPayPasswordViewController")
      
      func fingerLoginViewController(_: Void = ()) -> FingerLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fingerLoginViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func paypassNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paypassNavigationController)
      }
      
      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }
      
      func setPayPasswordViewController(_: Void = ()) -> SetPayPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setPayPasswordViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_user' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_left_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_left_arrow' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_verify_name") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_verify_name' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_verify_id") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_verify_id' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_code1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_code1' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_password_a") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_password_a' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_finger") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_finger' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bank_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_check' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_password' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_code") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_code' is used in storyboard 'Session', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_passwordsure") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_passwordsure' is used in storyboard 'Session', but couldn't be loaded.") }
        if _R.storyboard.session().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Session' as 'RegisterViewController'.") }
        if _R.storyboard.session().fingerLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fingerLoginViewController' could not be loaded from storyboard 'Session' as 'FingerLoginViewController'.") }
        if _R.storyboard.session().setPayPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setPayPasswordViewController' could not be loaded from storyboard 'Session' as 'SetPayPasswordViewController'.") }
        if _R.storyboard.session().paypassNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paypassNavigationController' could not be loaded from storyboard 'Session' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.session().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Session' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let checkOldMobileTableViewController = StoryboardViewControllerResource<CheckOldMobileTableViewController>(identifier: "CheckOldMobileTableViewController")
      let chooseCheckTableViewController = StoryboardViewControllerResource<ChooseCheckTableViewController>(identifier: "ChooseCheckTableViewController")
      let findPayPasswordCheckTableViewController = StoryboardViewControllerResource<FindPayPasswordCheckTableViewController>(identifier: "FindPayPasswordCheckTableViewController")
      let fingerLoginTableViewController = StoryboardViewControllerResource<FingerLoginTableViewController>(identifier: "FingerLoginTableViewController")
      let inputCodeViewController = StoryboardViewControllerResource<InputCodeViewController>(identifier: "InputCodeViewController")
      let name = "Setting"
      let newMobileViewController = StoryboardViewControllerResource<NewMobileViewController>(identifier: "NewMobileViewController")
      let passwordSetupViewController = StoryboardViewControllerResource<PasswordSetupViewController>(identifier: "PasswordSetupViewController")
      let quickMenuViewController = StoryboardViewControllerResource<QuickMenuViewController>(identifier: "QuickMenuViewController")
      let settingVC = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingVC")
      let updateMobileTableViewController = StoryboardViewControllerResource<UpdateMobileTableViewController>(identifier: "UpdateMobileTableViewController")
      
      func checkOldMobileTableViewController(_: Void = ()) -> CheckOldMobileTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkOldMobileTableViewController)
      }
      
      func chooseCheckTableViewController(_: Void = ()) -> ChooseCheckTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseCheckTableViewController)
      }
      
      func findPayPasswordCheckTableViewController(_: Void = ()) -> FindPayPasswordCheckTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: findPayPasswordCheckTableViewController)
      }
      
      func fingerLoginTableViewController(_: Void = ()) -> FingerLoginTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fingerLoginTableViewController)
      }
      
      func inputCodeViewController(_: Void = ()) -> InputCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputCodeViewController)
      }
      
      func newMobileViewController(_: Void = ()) -> NewMobileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newMobileViewController)
      }
      
      func passwordSetupViewController(_: Void = ()) -> PasswordSetupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordSetupViewController)
      }
      
      func quickMenuViewController(_: Void = ()) -> QuickMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: quickMenuViewController)
      }
      
      func settingVC(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }
      
      func updateMobileTableViewController(_: Void = ()) -> UpdateMobileTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateMobileTableViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bank_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bank_check' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_help01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_help01' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_validation1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_validation1' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_check1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_check1' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_validation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_validation' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "quickMenu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'quickMenu' is used in storyboard 'Setting', but couldn't be loaded.") }
        if _R.storyboard.setting().passwordSetupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordSetupViewController' could not be loaded from storyboard 'Setting' as 'PasswordSetupViewController'.") }
        if _R.storyboard.setting().inputCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputCodeViewController' could not be loaded from storyboard 'Setting' as 'InputCodeViewController'.") }
        if _R.storyboard.setting().chooseCheckTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseCheckTableViewController' could not be loaded from storyboard 'Setting' as 'ChooseCheckTableViewController'.") }
        if _R.storyboard.setting().quickMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'quickMenuViewController' could not be loaded from storyboard 'Setting' as 'QuickMenuViewController'.") }
        if _R.storyboard.setting().findPayPasswordCheckTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'findPayPasswordCheckTableViewController' could not be loaded from storyboard 'Setting' as 'FindPayPasswordCheckTableViewController'.") }
        if _R.storyboard.setting().checkOldMobileTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkOldMobileTableViewController' could not be loaded from storyboard 'Setting' as 'CheckOldMobileTableViewController'.") }
        if _R.storyboard.setting().newMobileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newMobileViewController' could not be loaded from storyboard 'Setting' as 'NewMobileViewController'.") }
        if _R.storyboard.setting().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
        if _R.storyboard.setting().updateMobileTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateMobileTableViewController' could not be loaded from storyboard 'Setting' as 'UpdateMobileTableViewController'.") }
        if _R.storyboard.setting().fingerLoginTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fingerLoginTableViewController' could not be loaded from storyboard 'Setting' as 'FingerLoginTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}