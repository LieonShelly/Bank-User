// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Security;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum DigestType : NSInteger;
@class VerificationResult;

SWIFT_CLASS("_TtC9SwiftyRSA9SwiftyRSA")
@interface SwiftyRSA : NSObject
+ (NSString * _Nullable)encryptString:(NSString * _Nonnull)str publicKeyPEM:(NSString * _Nonnull)publicKeyPEM padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)encryptString:(NSString * _Nonnull)str publicKeyDER:(NSData * _Nonnull)publicKeyDER padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)decryptString:(NSString * _Nonnull)str privateKeyPEM:(NSString * _Nonnull)privateKeyPEM padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)encryptData:(NSData * _Nonnull)data publicKeyPEM:(NSString * _Nonnull)publicKeyPEM padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)encryptData:(NSData * _Nonnull)data publicKeyDER:(NSData * _Nonnull)publicKeyDER padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)decryptData:(NSData * _Nonnull)data privateKeyPEM:(NSString * _Nonnull)privateKeyPEM padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign a <code>String</code> using a private key.  The supplied string will be hashed using the specified
/// hashing function and the resulting digest will be signed.
/// \param str The <code>String</code> to be signed.
///
/// \param privateKeyPEM A <code>String</code> containing the private key for the signing operation in PEM format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// Base64 encoded signature for the hash of the string.
+ (NSString * _Nullable)signString:(NSString * _Nonnull)str privateKeyPEM:(NSString * _Nonnull)privateKeyPEM digestMethod:(enum DigestType)digestMethod error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign an <code>NSData</code> block using a private key.  The supplied data will be hashed using the specified
/// hashing function and the resulting digest will be signed.
/// \param data The <code>NSData</code> to be signed.
///
/// \param privateKeyPEM A <code>String</code> containing the private key for the signing operation in PEM format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// The signature for the hash of the string.
+ (NSData * _Nullable)signData:(NSData * _Nonnull)data privateKeyPEM:(NSString * _Nonnull)privateKeyPEM digestMethod:(enum DigestType)digestMethod error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>String</code> will be hashed and the
/// resulting digest will be verified against the supplied signature.
/// \param str The <code>String</code> to be verified.  This string will be hashed.
///
/// \param signature The BASE64 string representation of the signature to be verified.
///
/// \param publicKeyPEM A <code>String</code> containing the public key for the signing operation in PEM format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
+ (VerificationResult * _Nonnull)verifySignatureString:(NSString * _Nonnull)str signature:(NSString * _Nonnull)signature publicKeyPEM:(NSString * _Nonnull)publicKeyPEM digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>NSData</code> will be hashed  and the
/// resulting digest will be verified against the supplied signature.
/// \param data The <code>NSData</code> to be verified.  This data will be hashed
///
/// \param signature The signature to be verified.
///
/// \param publicKeyPEM A <code>String</code> containing the public key for the signing operation in PEM format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
+ (VerificationResult * _Nonnull)verifySignatureData:(NSData * _Nonnull)data signature:(NSData * _Nonnull)signature publicKeyPEM:(NSString * _Nonnull)publicKeyPEM digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>String</code> will be hashed and the
/// resulting digest will be verified against the supplied signature.
/// \param str The <code>String</code> to be verified.  This string will be hashed
///
/// \param signature The BASE64 string representation of the signature to be verified.
///
/// \param publicKeyDER The public key for the signing operation in DER format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
+ (VerificationResult * _Nonnull)verifySignatureString:(NSString * _Nonnull)str signature:(NSString * _Nonnull)signature publicKeyDER:(NSData * _Nonnull)publicKeyDER digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>NSData</code> will be hashed and the
/// resulting digest will be verified against the supplied signature.
/// \param data The <code>NSData</code> to be verified.  This data will be hashed
///
/// \param signature The signature to be verified.
///
/// \param publicKeyDER The public key for the signing operation in DER format
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
+ (VerificationResult * _Nonnull)verifySignatureData:(NSData * _Nonnull)data signature:(NSData * _Nonnull)signature publicKeyDER:(NSData * _Nonnull)publicKeyDER digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SecKeyRef _Nullable)publicKeyFromDERData:(NSData * _Nonnull)keyData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (SecKeyRef _Nullable)publicKeyFromPEMString:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (SecKeyRef _Nullable)privateKeyFromPEMString:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)encryptData:(NSData * _Nonnull)data publicKey:(SecKeyRef _Nonnull)publicKey padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)decryptData:(NSData * _Nonnull)encryptedData privateKey:(SecKeyRef _Nonnull)privateKey padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)encryptString:(NSString * _Nonnull)str publicKey:(SecKeyRef _Nonnull)publicKey padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)decryptString:(NSString * _Nonnull)str privateKey:(SecKeyRef _Nonnull)privateKey padding:(SecPadding)padding error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign a <code>String</code> using a private key.  The supplied string will be hashed using the specified
/// hashing method and the resulting hash will be signed.
/// \param str The <code>String</code> to be signed.
///
/// \param privateKey A <code>SecKeyRef</code> for the private key
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// Base64 encoded signature for the hash of the string.
- (NSString * _Nullable)signString:(NSString * _Nonnull)str privateKey:(SecKeyRef _Nonnull)privateKey digestMethod:(enum DigestType)digestMethod error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign an <code>NSData</code> block using a private key.  The supplied data will be hashed using the specified
/// hashing method and the resulting digest will be signed.
/// \param data The <code>NSData</code> to be signed.
///
/// \param privateKey A <code>SecKeyRef</code> for the private key
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// The signature for the  hash of the string.
- (NSData * _Nullable)signData:(NSData * _Nonnull)data privateKey:(SecKeyRef _Nonnull)privateKey digestMethod:(enum DigestType)digestMethod error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign an <code>NSData</code> block using a private key.  The supplied data must represent an SHA1 digest.
/// \param digest The <code>NSData</code> containing the SHA1 digest to be signed.
///
/// \param privateKey A <code>SecKeyRef</code> for the private key
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// The signature for the SHA1 digest.
- (NSData * _Nullable)signSHA1Digest:(NSData * _Nonnull)digest privateKey:(SecKeyRef _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sign an <code>NSData</code> block using a private key.  The supplied data must represent a digest of the indicated type.
/// \param digest The <code>NSData</code> containing the SHA1 digest to be signed.
///
/// \param privateKey A <code>SecKeyRef</code> for the private key
///
/// \param digestMethod The digest type contained in <code>digest</code>
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the signing process
///
/// returns:
/// The signature for the SHA1 digest.
- (NSData * _Nullable)signDigest:(NSData * _Nonnull)digest privateKey:(SecKeyRef _Nonnull)privateKey digestMethod:(enum DigestType)digestMethod error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>String</code> will be hashed using the specified
/// hasing function and resulting digest will be verified against the supplied signature.
/// \param str The <code>String</code> to be verified.  This string will be hashed
///
/// \param signature The BASE64 string representation of the signature to be verified.
///
/// \param publicKey A <code>SecKeyRef</code> for the public key
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
- (VerificationResult * _Nonnull)verifySignatureString:(NSString * _Nonnull)str signature:(NSString * _Nonnull)signature publicKey:(SecKeyRef _Nonnull)publicKey digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>NSData</code> will be hashed and the
/// resulting digest will be verified against the supplied signature.
/// \param data The <code>NSData</code> to be verified.  This string will be hashed
///
/// \param signatureData The of the signature data to be verified.
///
/// \param publicKey A <code>SecKeyRef</code> for the public key
///
/// \param digestMethod The <code>DigestType</code> that indicates the hashing function
///
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
- (VerificationResult * _Nonnull)verifySignatureData:(NSData * _Nonnull)data signatureData:(NSData * _Nonnull)signatureData publicKey:(SecKeyRef _Nonnull)publicKey digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>NSData</code> represents an SHA1 digest to be verified against the supplied signature.
/// \param SHA1Data The <code>NSData</code> containing the SHA1 digest to be verified.
///
/// \param signature The <code>NSData</code> containing the signature to be verified.
///
/// \param publicKey A <code>SecKeyRef</code> for the public key
///
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
- (VerificationResult * _Nonnull)verifySHA1SignatureData:(NSData * _Nonnull)SHA1Data signature:(NSData * _Nonnull)signature publicKey:(SecKeyRef _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Verify a signature using a public key.  The supplied <code>NSData</code> represents a digest to be verified against the supplied signature.
/// \param digestData The <code>NSData</code> containing the  digest to be verified.
///
/// \param signature The <code>NSData</code> containing the signature to be verified.
///
/// \param publicKey A <code>SecKeyRef</code> for the public key
///
/// \param digestMethod The method used to create the digest in the <code>digest</code> parameter
///
///
/// throws:
/// <code>SwiftyRSAError</code> if there is an error in the verification process
///
/// returns:
/// A <code>VerificationResult</code> that indicates whether the signature was valid or not
- (VerificationResult * _Nonnull)verifySignatureData:(NSData * _Nonnull)digestData signature:(NSData * _Nonnull)signature publicKey:(SecKeyRef _Nonnull)publicKey digestMethod:(enum DigestType)digestMethod SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, DigestType) {
  DigestTypeSHA1 = 0,
  DigestTypeSHA224 = 1,
  DigestTypeSHA256 = 2,
  DigestTypeSHA384 = 3,
  DigestTypeSHA512 = 4,
};

@class NSCoder;

SWIFT_CLASS("_TtC9SwiftyRSA14SwiftyRSAError")
@interface SwiftyRSAError : NSError
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// Represents the result of a signature verification
SWIFT_CLASS("_TtC9SwiftyRSA18VerificationResult")
@interface VerificationResult : NSObject
@property (nonatomic, readonly) BOOL isSuccessful;
@property (nonatomic, readonly, strong) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
